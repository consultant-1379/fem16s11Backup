<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>STATELESS_CHART_VERSION</string>
        <string>INFRA_CHART_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Creation of CSAR Package - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>INFRA_CHART_VERSION</name>
          <description>The Infra Chart version (e.g. 1.65.77)</description>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STATELESS_CHART_VERSION</name>
          <description>The Stateless Chart  version (e.g. 1.65.77)</description>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description/>
          <defaultValue>https://fem16s11-eiffel004.lmera.ericsson.se:8443/jenkins/</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@65.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@65.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.1'

def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''
def csar_package_name = 'enm-installation-package'

pipeline {
    agent {
        label 'CN_CSAR'
    }
    parameters {
        string(description: 'The Infra Chart version (e.g. 1.65.77)',  name: 'INFRA_CHART_VERSION')
        string(description: 'The Stateless Chart  version (e.g. 1.65.77)',  name: 'STATELESS_CHART_VERSION')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
    }
    stages {
       stage('Checkout Cloud-Native CSAR Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package'
            }
        }
       stage ('Clean workspace') {
          steps {
                script {
                       
                       docker_images=sh (script: "docker images -q|uniq|wc -l", returnStdout: true).trim()
                       echo "docker_images:${docker_images}"
                       if (!docker_images.equals("0")){
                          sh("docker rmi \$(docker images -q|uniq) -f")
                          echo "Successfully deleted ${docker_images} docker images....."
                       }  else {
                          echo "Docker images are not available...."
                       }
               }
            deleteDir()
         }
       }
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'csar_docker_config', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                    }
            }
        }
        stage('Get Integration Chart'){
                steps{
                    withCredentials([string(credentialsId: 'lciadm100', variable: 'HELM_REPO_TOKEN')]) {
                     sh 'curl -u ${GIT_COMMITTER_NAME}:${HELM_REPO_TOKEN} https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
                     sh 'curl -u ${GIT_COMMITTER_NAME}:${HELM_REPO_TOKEN} https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'             
                     }
            }
        }
        stage('integration value version'){
            steps{
                script {
                      withCredentials([
                         usernamePassword(credentialsId: 'cenmbuild_fem16s11_api_token', usernameVariable: 'JENKINS_USER_NAME', passwordVariable: 'JENKINS_API_TOKEN')]) {
                               sh "curl -u ${JENKINS_USER_NAME}:${JENKINS_API_TOKEN} ${JENKINS_URL}/job/integration-values-2.0/lastBuild/artifact/artifact.properties &gt; integration-values-version"
                     }
                        sh "grep CHART_VERSION=  integration-values-version | sed 's/INT_CHART_VERSION=//' &gt; INTEGRATION_VALUE_VERSION"
                     script {
                            def INTEGRATION_VALUE_VERSION = readFile('INTEGRATION_VALUE_VERSION')
                            INTEGRATION_VALUE_VERSION=INTEGRATION_VALUE_VERSION.trim()
                        }
              withCredentials([string(credentialsId: 'lciadm100', variable: 'HELM_REPO_TOKEN')]) {
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-integration-values/eric-enm-integration-functional-test-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-functional-test-values-${INTEGRATION_VALUE_VERSION}.yaml'
                        }
                      }
                }
        }
       stage('Retrieve version prefix') {
            steps {
                script {
                    env.VERSION_PREFIX = sh(script: "cat VERSION_PREFIX", returnStdout:true).trim()
                    echo "${VERSION_PREFIX}"
                }
            }
        }

    }
    post{
        failure {
            mail to: 'teja.balla1@tcs.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
        
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>