<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>ENM Cloud Native Build pipeline eric-enm-e2e-build_parastest - autogenerated using JobDSL - all manual changes will be overwritten!&lt;p&gt;&lt;h2 style="color:red"&gt;Ensure to give the product set version higher than the last nightly/manually built product set.&lt;/h2&gt;&lt;/p&gt;&lt;h2&gt;Documentation&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a style="font-size: 16px" href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide+-+build+cENM+SG+pipeline+based+on+particular+ENM+Product+Set+version" target="_blank" rel="noopener noreferrer"&gt;User Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description>Enter the product set version (e.g. 20.11.52).Please ensure to give latest product set version compared to last built product set.</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>SG_PROJECT_LIST = ["eric-enm-sles-apache2"]
BASEIMAGESOS_PROJECT_LIST = ["eric-enm-sles-apache2"]
BASEIMAGES_PROJECT_LIST = ["eric-enm-sles-apache2","eric-enm-init-wait","eric-enmsg-access-control"]
MOREBASEIMAGES_PROJECT_LIST = ["eric-enm-sles-apache2"]
pipeline {
    agent { node { label 'Cloud-Native' } }
    options {
        timestamps()
    }
    environment {
        PIPELINE_LAST_STAGE_STATUS = 'UNKNOWN'
        CENMBUILD_ARM_TOKEN = credentials('cenmbuild_ARM_token')
    }
    parameters {
        string(name: 'ISO_VERSION', description: 'Enter the product set version (e.g. 20.11.52).                      Please ensure to give latest product set version compared to last built product set.', defaultValue: "")
    }
    stages {
        stage ('Removing Docker Images') {
            steps {
                script {
                    echo "All is well"
                }
            }
        }
        stage ('Initialization of ENM Versions') {
            steps {
                script {
                    echo "All is well"
                }
            }
        }
        stage ('Building OS Base Images') {
            steps{
                script{
                    def builds = [:]
                    for (def proj in BASEIMAGESOS_PROJECT_LIST) {
                        def baseimagesos_build = "${proj}"
                        builds["${baseimagesos_build}"] = {
                            stage("Build ${baseimagesos_build}"){
                                retry(3) {
                                    echo "All is well"
                                }
                            }
                        }
                    }
                    parallel builds
                }
            }
        }
        stage ('SYNC 1: OS Base Images') {
            steps {
                echo "All OS Base Images up to this point built successfully"
                sleep(5)
                script {
                    echo "All is well"
                }
            }
        }
        stage ('Building Base Images') {
            steps{
                script{
                    def builds = [:]
                    for (def proj in BASEIMAGES_PROJECT_LIST) {
                        def baseimages_build = "${proj}"
						if (baseimages_build == "eric-enm-init-wait"){
						  builds["eric-enm-init-wait"] = {
                            stage("Build eric-enm-init-wait"){
                                retry(3) {
                                    echo "All is well"
                                }
                            }
                          } 
						}
						else {
                         builds["${baseimages_build}"] = {
                            stage("Build ${baseimages_build}"){
                                retry(3) {
                                    echo "All is well"
                                }
                            }
                         }
						}
                    }                     
                    parallel builds
                }				
            }		
        }
        stage ('SYNC 2: BaseImages') {
            steps {
                echo "All Base Images up to this point built successfully"
                sleep(5)
                script {
                    echo "All is well"
                }
            }
        }
        stage ('Building more Base Images') {
            steps{
                script{
                    def builds = [:]
                    for (def proj in MOREBASEIMAGES_PROJECT_LIST) {
                        def morebaseimages_build = "${proj}"
                        builds["${morebaseimages_build}"] = {
                            stage("Build ${morebaseimages_build}"){
                                retry(3) {
                                    echo "All is well"
                                }
                            }
                        }
                    }
                    parallel builds
                }
            }
        }
        stage ('SYNC 3: More BaseImages') {
            steps {
                echo "All Base Images built successfully"
                sleep(5)
                script {
                    echo "All is well"
                }
            }
        }
        stage('Building Service Groups Images and Helm Charts') {
            steps{
                script{
                    def builds = [:]
                    for (def proj in SG_PROJECT_LIST) {
                        def service_group_build = "${proj}"
                        builds["${service_group_build}"] = {
                            stage("Build ${service_group_build}"){
                                retry(3) {
                                    echo "All is well"
                                }
                            }
                        }
                    }
                    parallel builds
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>