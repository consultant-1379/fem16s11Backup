<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Creation of CSAR Package - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INFRA_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STATELESS_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Slave</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.28'
def metadataImage = 'armdocker.rnd.ericsson.se/proj_oss_releases/enm/cenm-build-utilities:latest'

def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''
def csar_package_name = 'enm_csar_package'


def overrideIntegrationValues(){
    try {
        filename = "scripts/${integration_values}"
        values = readYaml file: filename

        if (values."eric-data-search-engine-curator".containsKey("imageCredentials"))
            values."eric-data-search-engine-curator".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
        else
            values."eric-data-search-engine-curator".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released"]

        if (values."eric-data-search-engine".containsKey("imageCredentials"))
            values."eric-data-search-engine".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
        else
            values."eric-data-search-engine".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released"]

        if (values."eric-data-graph-database-nj".containsKey("imageCredentials"))
            values."eric-data-graph-database-nj".imageCredentials.repoPath = "proj-enm/aia_releases"
        else
            values."eric-data-graph-database-nj".imageCredentials = ["repoPath": "proj-enm/aia_releases"]

        if (values."eric-data-document-database-pg".containsKey("imageCredentials"))
            values."eric-data-document-database-pg".imageCredentials.repoPath = "proj-enm/proj-document-database-pg/data"
        else
            values."eric-data-document-database-pg".imageCredentials = ["repoPath": "proj-enm/proj-document-database-pg/data"]

        if (values."eric-ctrl-bro".containsKey("imageCredentials"))
            values."eric-ctrl-bro".imageCredentials.repoPath = "proj-enm/proj-adp-eric-ctrl-bro-drop"
        else
            values."eric-ctrl-bro".imageCredentials = ["repoPath": "proj-enm/proj-adp-eric-ctrl-bro-drop"]

        if (values."eric-pm-server".containsKey("imageCredentials"))
            values."eric-pm-server".imageCredentials.repoPath = "proj-enm/proj-common-assets-cd/monitoring/pm"
        else
            values."eric-pm-server".imageCredentials = ["repoPath": "proj-enm/proj-common-assets-cd/monitoring/pm"]

        if (values."eric-pm-alert-manager".containsKey("imageCredentials"))
            values."eric-pm-alert-manager".imageCredentials.repoPath = "proj-enm/proj-adp-pm-alert-manager-drop"
        else
            values."eric-pm-alert-manager".imageCredentials = ["repoPath": "proj-enm/proj-adp-pm-alert-manager-drop"]

        if (values."eric-pm-node-exporter".containsKey("imageCredentials"))
            values."eric-pm-node-exporter".imageCredentials.repoPath = "proj-enm/proj_kds/erikube"
        else
            values."eric-pm-node-exporter".imageCredentials = ["repoPath": "proj-enm/proj_kds/erikube"]

        if (values."eric-enm-int-log-transformer"."eric-log-transformer".containsKey("imageCredentials"))
            values."eric-enm-int-log-transformer"."eric-log-transformer".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
        else
            values."eric-enm-int-log-transformer"."eric-log-transformer".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released"]

        if (values."eric-oss-ingress-controller-nx".containsKey("imageCredentials"))
            values."eric-oss-ingress-controller-nx".imageCredentials.repoPath = "proj-enm/proj-eric-oss-ingress-ctr-nx-dev"
        else
            values."eric-oss-ingress-controller-nx".imageCredentials = ["repoPath": "proj-enm/proj-eric-oss-ingress-ctr-nx-dev"]


        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        error "$err"
    }
}




pipeline {
    agent {
            node
            {
               label slave
            }
    }
    environment{
        repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        CSAR_PACKAGE_NAME = "enm-installation-package"
        BRO_CLI_IMAGE = "backup-restore-cli:latest"
        BRO_CLI_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
    }

    stages {
       stage ('Clean workspace') {
          steps {
                script {
                          sh "docker image prune -fa"
               }
            deleteDir()
         }
       }
       stage('Checkout Cloud-Native CSAR Git Repository') {
            steps {
                git branch: 'dTORF-400000',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package'
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                    }
            }
        }
        stage('Get Integration Chart'){
                steps{
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz -o charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz -o charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'
            }
        }
        stage('integration value version'){
            steps{
                script {
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
                     
					 }
                }
        }
        stage('Override integration-values file') {
            steps {
                script {
				    env.integration_values=sh (script: "ls scripts |grep eric-enm-integration-production-values*", returnStdout: true ).trim()
                    overrideIntegrationValues()
                }
            }
        }
        stage('Package backup-restore-cli image') {
            steps {
                script {
                    sh 'docker pull ${BRO_CLI_IMAGE_PATH}/${BRO_CLI_IMAGE}'
                    sh 'docker tag ${BRO_CLI_IMAGE_PATH}/${BRO_CLI_IMAGE} ${BRO_CLI_IMAGE}'
                    sh 'docker save ${BRO_CLI_IMAGE} -o scripts/backup-restore-cli-docker.tar'
                }
            }
            post {
                always {
                    sh 'docker image remove ${BRO_CLI_IMAGE}'
                    sh 'docker image remove ${BRO_CLI_IMAGE_PATH}/${BRO_CLI_IMAGE}'
                }
            }
        }
		
	
        stage('Retrieve version prefix') {
            steps {
                script {
                    env.VERSION_PREFIX = sh(script: "cat VERSION_PREFIX", returnStdout:true).trim()
                    echo "${VERSION_PREFIX}"
                }
            }
        }
        stage('Update manifest details') {
            steps {
                script {
                    env.NOW = sh(script: "date +'%FT%TZ'", returnStdout:true).trim()
                    echo "${NOW}"
                    sh "sed -i -e '/^vnf_package_version:/s/.*/vnf_package_version: $VERSION_PREFIX/' -e '/^vnf_release_date_time:/s/.*/vnf_release_date_time: $NOW/' manifest/enm_descriptor.mf"
                    sh("cat manifest/enm_descriptor.mf")
                }
            }
        }
		stage('Update VNFD details') {
            steps {
                script {
                    sh "mkdir -p vnfd_updated"
                    sh "cp vnfd/enm_descriptor.yaml vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;VERSION_PREFIX&gt;&gt;/$VERSION_PREFIX/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;DESCRIPTOR_ID&gt;&gt;/${UUID.randomUUID().toString()}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRODUCT_SET&gt;&gt;/20.14.112/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;BRO_CHART_VERSION&gt;&gt;/${BRO_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRE_DEPLOY_CHART_VERSION&gt;&gt;/${PRE_DEPLOY_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;INFRA_CHART_VERSION&gt;&gt;/${INFRA_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;STATELESS_CHART_VERSION&gt;&gt;/${STATELESS_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                }
            }
        }
        stage('Build CSAR Package') {
            steps {
                script {
                        def bobWithCsar = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['ENM_INSTALLATION_CHART_VERSION': env.INFRA_CHART_VERSION,
                                          'INTEGRATION_VALUE_VERSION': env.INTEGRATION_VALUE_VERSION,
                                ])
                                .toString()
						sh "${bobWithCsar} generate -hd charts/ --name ${CSAR_PACKAGE_NAME}-${env.VERSION_PREFIX} -sc scripts -mf manifest/enm_descriptor.mf --no-images --history history/ChangeLog.txt --vnfd vnfd_updated/enm_descriptor.yaml --definitions definitions/etsi_nfv_sol001_vnfd_2_5_1_types.yaml"
                }
            }
        }
        stage('Generate CSAR Parameters') {
            steps {
                script {
                            sh 'echo "CSAR_PACKAGE_VERSION=${VERSION_PREFIX}" &gt; artifact.properties'
                            sh 'echo "BRO_CHART_VERSION=${BRO_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "PRE_DEPLOY_VERSION=${PRE_DEPLOY_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "INFRA_CHART_VERSION=${INFRA_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "STATELESS_CHART_VERSION=${STATELESS_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "INTEGRATION_VALUE_VERSION=${INTEGRATION_VALUE_VERSION}" &gt;&gt; artifact.properties'
                            archiveArtifacts 'artifact.properties'
                }
            }
        }
        
    }
    post{
        failure {
            mail to: 'udaya.boyina@tcs.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>