<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>slave</name>
          <defaultValue>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_2</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPECIFIC_DESIGN_RULE</name>
          <description>Mention specific DR in given format-DR-D1123-124. Entire report summary also generated along with specific DR</description>
          <defaultValue>DR-D1123-124</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */
def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1&apos;
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = &apos;lciadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;lciadm100@ericsson.com&apos;
def GERRIT_USER = &quot;cenmbuild&quot;
def GERRIT_API_KEY = &quot;Lxszgui71aPyTO2p3A5C&quot;
def JENKINS_USER = &quot;cenmbuild&quot;
def JENKINS_API_KEY = &quot;Lxszgui71aPyTO2p3A5C&quot;
def failedStage = &apos;&apos;
pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    environment{
        HOME_DIR = &quot;${WORKSPACE}&quot;
        image_name = &quot;cenm-build-utilities&quot;
	    docker_image_path = &quot;armdocker.rnd.ericsson.se/proj_oss_releases/enm&quot;
    }
    stages {
        stage(&apos;Clean Up WorkSpace&apos;){
                steps{
                       deleteDir()
                       
                       sh &quot;echo $HOME_DIR&quot;
                     }
             }
        stage(&apos;Checkout Integration Pipeline Git Repository&apos;) {
            steps {
                git branch: &apos;dTORF-572749&apos;,
                        url: &apos;${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code&apos;
                  }
             }
        stage(&apos;Build Image&apos;) {
            steps {
                sh &apos;mkdir -p ${HOME_DIR}/reports&apos;
                /*sh &quot;cat script/docker/dr.py&quot;*/
                sh &quot;docker build -f script/docker/DockerfileDR --tag ${docker_image_path}/${image_name}:drchecker .&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;docker image remove ${docker_image_path}/${image_name}:drchecker&quot;
                    }
                }
            }
        }
        stage(&apos;Create container&apos;){
            steps {
                
                sh &quot;docker run --rm  -v $WORKSPACE/reports:/config/reports ${docker_image_path}/${image_name}:drchecker python3 ./dr.py --GERRIT_USER ${GERRIT_USER} --GERRIT_API_KEY &apos;Lxszgui71aPyTO2p3A5C&apos; --JENKINS_USER ${JENKINS_USER} --JENKINS_API_KEY &apos;Lxszgui71aPyTO2p3A5C&apos; --SPECIFIC_DESIGN_RULE ${SPECIFIC_DESIGN_RULE}&quot;
            
                
            }
        }
        }
        

	    post {
            success {
                script {
                        sh &apos;echo &quot;success&quot;&apos;
                        sh &quot;ls&quot;
                }
            }
        failure {
            script {
                sh &apos;echo &quot;failed&quot;&apos;
            }
            }
            always {
                script{
                    
                    archiveArtifacts &apos;reports/SpecificDR.txt&apos; 
                    archiveArtifacts &apos;reports/SpecificDR.html&apos; 
                    archiveArtifacts &apos;reports/GroupByDR_sglist.txt&apos;
                    archiveArtifacts &apos;reports/GroupByDR_sglist.html&apos; 
                    archiveArtifacts &apos;reports/DRsummary_status.txt&apos;
                    archiveArtifacts &apos;reports/DRsummary_status.html&apos;
                }
            }
        }
}
   


// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>