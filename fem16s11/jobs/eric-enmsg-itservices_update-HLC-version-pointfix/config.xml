<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
  </actions>
  <description>ENM Cloud Native Helm Chart Library Build pipeline eric-enmsg-itservices_update-HLC-version-pointfix - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>30</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>CHART_VERSION</name>
          <description>The Common Library chart version (e.g. 1.65.77)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>The pointfix version (e.g. )</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *  + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([CHART_VERSION: &apos;${CHART_VERSION}&apos;,
                  BRANCH: &apos;${BRANCH}&apos;])
        .needDockerSocket(true)
        .toString()

def failedStage = &apos;&apos;
def Job_name = env.JOB_NAME.tokenize(&apos;_&apos;) as String[];
def pipeline_name = Job_name[0]

def sg_gerrit_repo= &quot;OSS/com.ericsson.oss.containerisation/${pipeline_name}&quot;

pipeline {
      agent {
        label &apos;Cloud-Native-Pointfix&apos;
      }
     environment {
	   pipeline_name = &quot;${pipeline_name}&quot;
      }
      parameters {
        string(name: &apos;CHART_VERSION&apos;, description: &apos;The Common Library chart version (e.g. 1.65.77)&apos;)
        string(name: &apos;BRANCH&apos;, description: &apos;The pointfix version (e.g. )&apos;)
      }
    stages {
       stage (&apos;Clean workspace&apos;) {
          steps {
              deleteDir()
            }
         }
         stage(&apos;Checkout Cloud-Native SG Git Repository&apos;) {
            steps {
                git branch: env.BRANCH,
                        url: &quot;${GERRIT_MIRROR}/${sg_gerrit_repo}&quot;
                sh &quot;git remote set-url origin --push ${GERRIT_CENTRAL}/${sg_gerrit_repo}&quot;
            }
        }
     stage(&apos;Update Chart.yaml file and precommit Verification&apos;) {
            steps {
                sh &quot;${bob} update_hlc_version_pointfix --chart-name ${pipeline_name} --branch ${BRANCH} --gerrit-proj ${sg_gerrit_repo}&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Push Chart.yaml to pointfix branch&apos;) {
         steps {
               sh &quot;cd ${pipeline_name} &amp;&amp; git push origin ${BRANCH}&quot;
           }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
    }
    post {
        failure {
            mail to: &apos;EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com&apos;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |-v \${HOME}:\${HOME}
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}
       </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>