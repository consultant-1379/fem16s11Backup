<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>CHECKOUT_TAG</string>
        <string>SLAVE</string>
        <string>REPO</string>
        <string>EMAIL</string>
        <string>CURRENT_SPRINT</string>
        <string>PUSH_COMMIT</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native SVU pipeline eric-cenm-create-pointfix-branch-InCA - autogenerated using JobDSL - all manual changes will be overwritten!This is a Sprint Version Update job for cENM repos to be run at the end of every sprints.This job creates a branch from the given branch/tag (master by default) in the name of the current sprint number (eg print_20.11) and increments the patch version contained in the VERSION_PREFIX. Further, this job also incements the minor version in the master.&lt;h2&gt;Documentation&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a style=&quot;font-size: 16px&quot; href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide%3A+Sprint+Version+Update+Job&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a style=&quot;font-size: 16px&quot; href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/pages/viewpage.action?pageId=374880120&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Admin Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SLAVE</name>
          <defaultValue>Docker-POC-e2e</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPO</name>
          <description>Enter the repo.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CURRENT_SPRINT</name>
          <description>Enter current sprint number Eg: 21.01</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHECKOUT_TAG</name>
          <description>This is the reference tag based on which pointfix branch would be created. Use refs/tags/SPRINT_[Current Sprint Number] to pick up the latest release. Eg: refs/tags/SPRINT_20.14.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUSH_COMMIT</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>pipeline {
    agent { label SLAVE }
    parameters {
        string(name: &apos;SLAVE&apos;, defaultValue: &quot;Docker-POC-e2e&quot;)
        string(name: &apos;REPO&apos;, description: &apos;Enter the repo.&apos;, defaultValue: &quot;&quot;)
        string(name: &apos;CURRENT_SPRINT&apos;, description: &apos;Enter current sprint number Eg: 21.01&apos;)
        string(name: &apos;CHECKOUT_TAG&apos;, description: &apos;This is the reference tag based on which pointfix branch would be created. Use refs/tags/SPRINT_[Current Sprint Number] to pick up the latest release. Eg: refs/tags/SPRINT_20.14.&apos;)
        string(name: &apos;EMAIL&apos;, defaultValue: &quot;&quot;)
        booleanParam(name: &apos;PUSH_COMMIT&apos;, defaultValue: false,)
    }
    stages {

        stage(&apos;Get Latest Sprint Version&apos;) {
         steps {
                script {
                    deleteDir()
                    //def drop = getLatestSprintNumber()
                    env.BRANCH_NAME=&quot;point_fix_${params.CURRENT_SPRINT}&quot;

                    REPO=REPO.trim()
                    env.ARTIFACT_ID=REPO.tokenize(&apos;/&apos;).last()

                    //env.BRANCH_NAME=&quot;point_fix_${drop}&quot;
                    //env.BRANCH_NAME=&quot;sprint_test_1&quot;

                    echo &quot;Repo Name is: ${params.REPO}&quot;
                    echo &quot;Branching based on the tag/branch: ${params.CHECKOUT_TAG}&quot;
                    echo &quot;Branch Name is: ${BRANCH_NAME}&quot;

                }
            }
        }
        stage(&apos;Checkout&apos;) {
            steps {

                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &quot;${params.CHECKOUT_TAG}&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: &apos;Default&apos;, submoduleCfg: [], userRemoteConfigs: [[url: &quot;${env.GERRIT_MIRROR}/${params.REPO}&quot;]]])
                sh &apos;&apos;&apos;
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                &apos;&apos;&apos;
            }
        }
        stage(&quot;Check if branch exists&quot;) {
            steps {
                script {
                    env.exists = check_branch(&quot;${params.REPO}&quot;, &quot;${env.BRANCH_NAME}&quot;)

                    echo &quot;exists=${env.exists}&quot;
                }
            }
        }
        stage(&quot;Create Branch&quot;) {
            when { expression { env.exists != &quot;true&quot; } }
            steps {
                script {
                    sh &apos;&apos;&apos;
                        echo ${WORKSPACE}
                        chmod -R 777 ${WORKSPACE}
                    &apos;&apos;&apos;
                    functionToCreatePointfixBranch(&quot;${params.REPO}&quot;, &quot;${env.BRANCH_NAME}&quot;)
                }
            }
        }

        stage(&apos;Check if any updates&apos;) {
            when { expression { env.exists == &quot;true&quot; } }
            steps {
                script {
                    // Switch to the existing branch
                    sh(returnStatus: true, script: &quot;git checkout ${env.BRANCH_NAME}&quot;)
                    def changed = checkIfVersionPrefixChanged()
                    echo &quot;${changed}&quot;

                    if(changed == false){
                        println(&quot;*****************************************************************************************************************************************************************************************&quot;)
                        println(&quot;Remote branch ${env.BRANCH_NAME} exists but there is no change to VERSION_PREFIX. Hence calling function to create branch, bump patch version and push the changes to the remote repo...&quot;)
                        bumpPatchVersion(&quot;${params.REPO}&quot;, &quot;${env.BRANCH_NAME}&quot;)
                        env.updated = &quot;TRUE&quot;
                        println(&quot;*****************************************************************************************************************************************************************************************&quot;)
                    } else {
                        println(&quot;******************************************************************************************************&quot;)
                        println(&quot;Remote branch ${env.BRANCH_NAME} exists and VERSION_PREFIX has been updated. Hence skipping this repo.&quot;)
                        currentBuild.description = &quot;Branch already created. Skipping this repo&quot;
                        println(&quot;******************************************************************************************************&quot;)
                        env.updated = &quot;FALSE&quot;
                    }

                }
            }
        }
        stage(&quot;Bump the Minor Version&quot;) {
            when { expression { env.exists != &quot;true&quot; } }
            steps {
                script {
                    // Switch to Master
                    sh(returnStatus: true, script: &quot;git checkout master&quot;)
                    sh(returnStatus: true, script: &quot;git pull&quot;)
                    sh(returnStatus: true, script: &quot;git reset --hard origin/master&quot;)
                    sh &apos;&apos;&apos;
                        echo ${WORKSPACE}
                        chmod -R 777 ${WORKSPACE}
                    &apos;&apos;&apos;
                    bumpMinorVersion(&quot;${params.REPO}&quot;, &apos;HEAD:master&apos;)
                }
            }
        }

    }
    post {
        failure {
            mail to: EMAIL,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}

def getLatestSprintNumber() {
    def versionText  = sh (returnStdout: true, script: &apos;wget -q -O - --no-check-certificate &quot;https://ci-portal.seli.wh.rnd.internal.ericsson.com//api/product/ENM/latestdrop/&quot;&apos; )
    def props = readJSON text: versionText

    return props.drop
}

def checkIfVersionPrefixChanged(){
    def status = sh (returnStatus: true, script: &apos;git diff --name-only  origin/master | grep VERSION_PREFIX&apos;)
    return status == 0
}

def check_branch(repo_check, branch_check){
    return_value= false
    branch_exists = sh(returnStatus: true, script: &quot;&quot;&quot;git ls-remote --exit-code --heads $env.GERRIT_MIRROR/$repo_check $branch_check&quot;&quot;&quot;)

    if(branch_exists == 0){
        return_value= true
    }
    return return_value
}


def functionToCreatePointfixBranch(repo_check, branch_check) {
    println(&quot;Remote branch $branch_check doesn&apos;t exist. Calling function to create branch, bump patch version and push the changes to the remote repo...&quot;)
    sh(returnStatus: true, script: &quot;git checkout -b $branch_check&quot;)
    println(&quot;*******************************************************************************************************************************************************&quot;)
    bumpPatchVersion(&quot;$repo_check&quot;, &quot;$branch_check&quot;)
    println(&quot;Pointfix Branch ${env.BRANCH_NAME} created for the repo: ${params.REPO}&quot;)
    println(&quot;*******************************************************************************************************************************************************&quot;)
    sh(returnStatus: true, script: &quot;git checkout master&quot;)
    sh(returnStatus: true, script: &quot;git branch -D $branch_check&quot;)
}

def updateChart(version_type) {
    env.VERSION_TYPE=version_type
    sh &apos;&apos;&apos;
        #!/bin/bash

        CHART_DETAILS=$(cat -n chart/${ARTIFACT_ID}/Chart.yaml | sed -n &apos;/&apos;&quot;${ARTIFACT_ID}&quot;&apos;/,$p&apos; | grep version | head -1 | sed &apos;s/version: //g&apos;)
        CHART_LINE=$(echo $CHART_DETAILS | tr -s &apos; &apos; | cut -d &apos; &apos; -f 1)
        CHART_VERSION_PREFIX=$(echo $CHART_DETAILS | tr -s &apos; &apos; | cut -d &apos; &apos; -f 2)
        CHART_VERSION=$(echo $CHART_VERSION_PREFIX | sed &apos;s/-.*$//&apos;)

        CHART_MAJOR_VERSION=$(echo ${CHART_VERSION} | awk -F&quot;.&quot; &apos;{print $1}&apos;)
        CHART_MINOR_VERSION=$(echo ${CHART_VERSION} | awk -F&quot;.&quot; &apos;{print $2}&apos;)
        CHART_PATCH_VERSION=$(echo ${CHART_VERSION} | awk -F&quot;.&quot; &apos;{print $3}&apos;)

        if [[ &quot;${VERSION_TYPE}&quot; == &quot;PATCH&quot; ]]; then
            CHART_PATCH_VERSION_1=$(expr ${CHART_PATCH_VERSION} + 1)
            NEW_VERSION=&quot;${CHART_MAJOR_VERSION}.${CHART_MINOR_VERSION}.${CHART_PATCH_VERSION_1}&quot;
        elif [[ &quot;${VERSION_TYPE}&quot; == &quot;MINOR&quot; ]]; then
            CHART_MINOR_VERSION_1=$(expr ${CHART_MINOR_VERSION} + 1)
            NEW_VERSION=&quot;${CHART_MAJOR_VERSION}.${CHART_MINOR_VERSION_1}.0&quot;
        fi

        echo &quot;${NEW_VERSION}&quot; &gt; VERSION_PREFIX

        sed -i &quot;${CHART_LINE}&quot;&apos;s/&apos;&quot;${CHART_VERSION_PREFIX}&quot;&apos;/&apos;&quot;${NEW_VERSION}-1&quot;&apos;/&apos; chart/${ARTIFACT_ID}/Chart.yaml
    &apos;&apos;&apos;

    IMAGE_VERSION = readFile &quot;VERSION_PREFIX&quot;
    IMAGE_VERSION = IMAGE_VERSION.trim()
}

def bumpPatchVersion(repo_check, branch_check) {
    updateChart(&quot;PATCH&quot;)

    if (env.PUSH_COMMIT == &quot;true&quot;) {
        sh &quot;&quot;&quot;
            git add VERSION_PREFIX chart/${ARTIFACT_ID}/Chart.yaml
            git commit -m &quot;[ci-skip] Automatic new patch version bumping: ${IMAGE_VERSION}&quot;
            git push $env.GERRIT_CENTRAL/$repo_check $branch_check
        &quot;&quot;&quot;
        status = &quot;OK&quot;
        env.updated = &quot;TRUE&quot;
        currentBuild.description = &quot;Pointfix Branch Version: ${IMAGE_VERSION}&lt;BR&gt;&quot;
    } else {
        status = &quot;OK&quot;
        currentBuild.description = &quot;Pointfix Branch Version: ${IMAGE_VERSION}&lt;BR&gt;&quot;
        currentBuild.description += &quot;PUSH_COMMIT set to false, no commit was made.&quot;
        env.updated = &quot;FALSE&quot;
        echo &quot;PUSH_COMMIT set to false, no commit was made.&quot;
        sh(returnStatus: true, script: &quot;git reset --hard origin/master &gt; /dev/null&quot;)
    }
}

def bumpMinorVersion(repo_check, branch_check) {
    updateChart(&quot;MINOR&quot;)

    if (env.PUSH_COMMIT == &quot;true&quot;) {
        sh &quot;&quot;&quot;
            git add VERSION_PREFIX chart/${ARTIFACT_ID}/Chart.yaml
            git commit -m &quot;[ci-skip] Automatic new minor version bumping: ${IMAGE_VERSION}&quot;
            #git push $env.GERRIT_CENTRAL/$repo_check $branch_check
            git push origin $branch_check
        &quot;&quot;&quot;
        status = &quot;OK&quot;
        env.updated = &quot;TRUE&quot;
        currentBuild.description += &quot;Master Branch Version: ${IMAGE_VERSION}&quot;
    } else {
        status = &quot;OK&quot;
        currentBuild.description += &quot;Master Branch Version: ${IMAGE_VERSION}&quot;
        env.updated = &quot;FALSE&quot;
        echo &quot;PUSH_COMMIT set to false, no commit was made.&quot;
        sh(returnStatus: true, script: &quot;git reset --hard origin/master &gt; /dev/null&quot;)
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>