<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Upgrade Build pipeline Initial_install_snapshot - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The deployment name to run the job against</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_mechanism</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either charts or csar.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>charts</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>repository_URL</name>
          <description>Name of the repository at which charts are stored</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>infra_chart_version</name>
          <description>Provide clould native infra version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>stateless_chart_version</name>
          <description>Provide clould native product set version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>bro_chart_version</name>
          <description>Provide clould native product set version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>pre_deploy_chart_version</name>
          <description>Provide pre_deploy_chart_version version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>monitoring_chart_version</name>
          <description>Provide monitoring_chart_version version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>integration_value_version</name>
          <description>Provide values version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>integration_value_type</name>
          <description>Select the type of integration values type to be used. &lt;br&gt;&lt;br&gt;NOTE : CSAR supports only eric-enm-integration-production-values and eric-enm-integration-extra-large-production-values.&lt;br&gt; If you choose deployment mechanism as CSAR please select the value as eric-enm-integration-production-values or eric-enm-integration-extra-large-production-values only.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-production-values</string>
              <string>eric-enm-integration-extra-large-production-values</string>
              <string>eric-enm-multi-instance-functional-integration-values</string>
              <string>eric-enm-single-instance-production-integration-values</string>
              <string>eric-enm-integration-functional-test-values</string>
              <string>eric-enm-integration-openstack-core-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description/>
          <defaultValue>Upgrade_CSAR_Slave_4Node_MISTY</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>def commonMethods
pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 11, unit: 'HOURS')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
        Client_HOME ="/home/cenmbuild"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-507859',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code
                '''
            }
         }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage('Download Charts from CI Internal') {
            when {
                allOf {
                    environment name: 'deployment_mechanism', value: 'charts'
                }
            }
            steps {
                script {
                       commonMethods.csar_pre_config_setup()
                       if(bro_chart_version != ''){
                            echo "curl ${repository_URL}/eric-enm-bro-integration/eric-enm-bro-integration-${bro_chart_version}.tgz -o cENM/Definitions/OtherTemplates/eric-enm-bro-integration-${bro_chart_version}.tgz"
                           sh "curl ${repository_URL}/eric-enm-bro-integration/eric-enm-bro-integration-${bro_chart_version}.tgz -o cENM/Definitions/OtherTemplates/eric-enm-bro-integration-${bro_chart_version}.tgz"
                       }
                }
            }
        }
    }
    post{
        failure {
            script{
                   echo "Failure"
                   def report = commonMethods.reportHeading("Failed")
                   report += commonMethods.printPods()
                   commonMethods.emailReport(report)

            }
        }
        aborted{
            script{
                echo "Aborted"
                def report = commonMethods.reportHeading("Aborted")
                report += commonMethods.printPods()
                commonMethods.emailReport(report)

            }
        }
        success{
            script{
                  echo "Success"
                  def report = commonMethods.reportHeading("Success")
                  report +=commonMethods.printPods()
                  commonMethods.emailReport(report)

            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>