<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>JENKINS_URL_INTEGRATION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Creation of eric-enm-int-sync- autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL_INTEGRATION</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>SLAVE</name>
          <defaultValue/>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
env.bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: '${ISO_VERSION}',PRODUCT_SET:'${PRODUCT_SET}',SPRINT_TAG:'${SPRINT_TAG}',DOCKER_COMMIT_HASH:'${DOCKER_COMMIT_HASH}',DOCKER_IMAGE_PATH:'${DOCKER_IMAGE_PATH}',DOCKER_IMAGE_NAME:'${DOCKER_IMAGE_NAME}',DOCKER_IMAGE_VERSION:'${DOCKER_IMAGE_VERSION}',UTILITY_TGZ_FILE_SIZE:'${UTILITY_TGZ_FILE_SIZE}',UTILITY_METADATA_FILE_NAME:'${UTILITY_METADATA_FILE_NAME}'])
         .needDockerSocket(true)
         .toString()

pipeline{
    agent {
            node
            {
            label SLAVE
            }
        }
        parameters {
             string(name: 'JENKINS_URL_INTEGRATION', defaultValue: 'https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443', description: 'Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443')
        }
    stages{
        stage('Clean Up WorkSpace'){
           steps{
                   deleteDir()
                }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dutilities',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code
                '''
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                        sh 'mkdir -p ${PWD}/utilities'
                    }
            }
        }
        
     stage('cenm-pre-post-deployment-utility'){
          steps{
                 script {
                         withCredentials([
                             usernamePassword(credentialsId: 'cenmbuild_api_token', usernameVariable: 'JENKINS_USER_NAME', passwordVariable: 'JENKINS_API_TOKEN')]) {
                             sh "curl -4 -u ${JENKINS_USER_NAME}:${JENKINS_API_TOKEN} ${JENKINS_URL_INTEGRATION}/jenkins/job/cenm-pre-post-deployment-utility/lastBuild/artifact/artifact.properties &gt; artifacts"
                             sh "curl -4 -u ${JENKINS_USER_NAME}:${JENKINS_API_TOKEN} ${JENKINS_URL_INTEGRATION}/jenkins/job/cenm-pre-post-deployment-utility/lastBuild/artifact/.bob/var.commit-hash &gt; docker-commit-hash"
                             }
                             sh "grep IMAGE_VERSION= artifacts | sed 's/INT_DOCKER_IMAGE_VERSION=//' &gt; DOCKER_IMAGE_VERSION"
                             sh "grep IMAGE_PATH= artifacts | sed 's/INT_DOCKER_IMAGE_PATH=//' &gt; DOCKER_IMAGE_PATH"
                             sh "grep IMAGE_NAME= artifacts | sed 's/INT_DOCKER_IMAGE_NAME=//' &gt; DOCKER_IMAGE_NAME"
                             def DOCKER_IMAGE_VERSION = readFile('DOCKER_IMAGE_VERSION')
                             env.DOCKER_IMAGE_VERSION=DOCKER_IMAGE_VERSION.trim()
                             def DOCKER_COMMIT_HASH = readFile('docker-commit-hash')
                             env.DOCKER_COMMIT_HASH=DOCKER_COMMIT_HASH.trim()
                             def DOCKER_IMAGE_PATH = readFile('DOCKER_IMAGE_PATH')
                             env.DOCKER_IMAGE_PATH = DOCKER_IMAGE_PATH.trim()
                             def DOCKER_IMAGE_NAME = readFile('DOCKER_IMAGE_NAME')
                             env.DOCKER_IMAGE_NAME = DOCKER_IMAGE_NAME.trim()
                             echo "${DOCKER_IMAGE_VERSION}"
                             echo "${DOCKER_IMAGE_PATH}"
                             echo "${DOCKER_IMAGE_NAME}"
                             echo "${DOCKER_COMMIT_HASH}"
                             env.UTILITY_METADATA_FILE_NAME = 'pre-post-int-metadata-artifacts.json'
                             echo "${UTILITY_METADATA_FILE_NAME}"
                             if (env.DOCKER_IMAGE_VERSION == "" ) {
                                echo "Pipeline fails due to Docker image version is empty"
                                sh "exit 1"
                             }
                             if (env.DOCKER_COMMIT_HASH == "" ) {
                                echo "Pipeline fails due to commit hash is empty"
                                sh "exit 1"
                             }
                             generate_metadata_filesize()
                             }
               }
                              }
       stage('cenm-deployment-utility'){
           steps{
                 script {
                         withCredentials([
                             usernamePassword(credentialsId: 'cenmbuild_api_token', usernameVariable: 'JENKINS_USER_NAME', passwordVariable: 'JENKINS_API_TOKEN')]) {
                                 sh "curl -4 -u ${JENKINS_USER_NAME}:${JENKINS_API_TOKEN} ${JENKINS_URL_INTEGRATION}/jenkins/job/cenm-deployment-utility/lastBuild/artifact/artifact.properties &gt; artifacts"
                                 sh "curl -4 -u ${JENKINS_USER_NAME}:${JENKINS_API_TOKEN} ${JENKINS_URL_INTEGRATION}/jenkins/job/cenm-deployment-utility/lastBuild/artifact/.bob/var.commit-hash &gt; docker-commit-hash"
                              }
                             sh "grep IMAGE_VERSION= artifacts | sed 's/INT_DOCKER_IMAGE_VERSION=//' &gt; DOCKER_IMAGE_VERSION"
                             sh "grep IMAGE_PATH= artifacts | sed 's/INT_DOCKER_IMAGE_PATH=//' &gt; DOCKER_IMAGE_PATH"
                             sh "grep IMAGE_NAME= artifacts | sed 's/INT_DOCKER_IMAGE_NAME=//' &gt; DOCKER_IMAGE_NAME"
                             def DOCKER_IMAGE_VERSION = readFile('DOCKER_IMAGE_VERSION')
                             env.DOCKER_IMAGE_VERSION=DOCKER_IMAGE_VERSION.trim()
                             def DOCKER_COMMIT_HASH = readFile('docker-commit-hash')
                             env.DOCKER_COMMIT_HASH=DOCKER_COMMIT_HASH.trim()
                             def DOCKER_IMAGE_PATH = readFile('DOCKER_IMAGE_PATH')
                             env.DOCKER_IMAGE_PATH = DOCKER_IMAGE_PATH.trim()
                             def DOCKER_IMAGE_NAME = readFile('DOCKER_IMAGE_NAME')
                             env.DOCKER_IMAGE_NAME = DOCKER_IMAGE_NAME.trim()
                             echo "${DOCKER_IMAGE_VERSION}"
                             echo "${DOCKER_COMMIT_HASH}"
                             echo "${DOCKER_IMAGE_PATH}"
                             echo "${DOCKER_IMAGE_NAME}"
                             env.UTILITY_METADATA_FILE_NAME = 'deployment-int-metadata-artifacts.json'
                             echo "${UTILITY_METADATA_FILE_NAME}"
                             if (env.DOCKER_IMAGE_VERSION == "" ) {
                                echo "Pipeline fails due to Docker image version is empty"
                                sh "exit 1"
                             }
                             if (env.DOCKER_COMMIT_HASH == "" ) {
                                echo "Pipeline fails due to commit hash is empty"
                                sh "exit 1"
                             }
                             generate_metadata_filesize()
                             }
           }
       }
        stage('Generate Parameters') {
            steps {
                script {
                            
                            sh 'echo "enm_iso_version=${ISO_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "product_set_version=${PRODUCT_SET}" &gt;&gt; artifact.properties'
                            sh 'echo "SPRINT_TAG=${SPRINT_TAG}" &gt;&gt; artifact.properties'
                            archiveArtifacts 'artifact.properties'
                            currentBuild.displayName = "PRODUCT SET ON: ${PRODUCT_SET}"
                }
            }
        }
    }
    post {
        success {
            script {
                sh(script: 'wget -q -O - --no-check-certificate --post-data="" https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/manageCNProductSet/\${PRODUCT_SET}/cENM-Build-Integration-Charts/passed/', returnStdout: true).trim()
                currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
            }
        }
        failure {
            script {
                sh(script: 'wget -q -O - --no-check-certificate --post-data="" https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/manageCNProductSet/\${PRODUCT_SET}/cENM-Build-Integration-Charts/failed/', returnStdout: true).trim()
                currentBuild.rawBuild.@result = hudson.model.Result.FAILURE
            }
        }
    }
}


// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
def generate_metadata_filesize() {
             //generate utility_tgz_filesize
             sh 'curl -4 https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/utilities/${DOCKER_IMAGE_NAME}/${DOCKER_IMAGE_VERSION}/${DOCKER_IMAGE_NAME}-${DOCKER_IMAGE_VERSION}.tgz -o utilities/${DOCKER_IMAGE_NAME}-${DOCKER_IMAGE_VERSION}.tgz'
             env.UTILITY_TGZ_FILE_SIZE = sh(script: "du -b utilities/${DOCKER_IMAGE_NAME}-${DOCKER_IMAGE_VERSION}.tgz | cut -f1", returnStdout: true).trim()
             // generate utilities metadata parameters
             sh "${bob} generate-utilities-int-metadata-parameters"
             archiveArtifacts "${UTILITY_METADATA_FILE_NAME}"
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>