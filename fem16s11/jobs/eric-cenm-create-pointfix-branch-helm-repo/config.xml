<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SLAVE</string>
        <string>REPO</string>
        <string>EMAIL</string>
        <string>CURRENT_SPRINT</string>
        <string>PUSH_COMMIT</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native SVU pipeline eric-cenm-create-pointfix-branch-helm-repo - autogenerated using JobDSL - all manual changes will be overwritten!This is a Sprint Version Update job for cENM repos to be run at the end of every sprints.This job creates a branch from the given branch/tag (master by default) in the name of the current sprint number (eg print_20.11) and increments the patch version contained in the VERSION_PREFIX. Further, this job also incements the minor version in the master.&lt;h2&gt;Documentation&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a style=&quot;font-size: 16px&quot; href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide%3A+Sprint+Version+Update+Job&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a style=&quot;font-size: 16px&quot; href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/pages/viewpage.action?pageId=374880120&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Admin Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SLAVE</name>
          <defaultValue>Docker-POC-e2e</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPO</name>
          <description>Enter the repo. Eg. OSS/com.ericsson.oss.de.containerisation/test-eric-enmsg-kpi-service</description>
          <defaultValue>OSS/com.ericsson.oss.de.containerisation/test-eric-enmsg-kpi-service</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CURRENT_SPRINT</name>
          <description>Enter current sprint number Eg: 21.01</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUSH_COMMIT</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHECKOUT_TAG</name>
          <description>This is the reference tag based on which pointfix branch would be created. Use refs/tags/[Current Sprint Number] to pick up the latest release. Eg:  refs/tags/21.04.</description>
          <defaultValue>refs/tags/21.04</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>pipeline {
    agent { label SLAVE }
    parameters {
      string(name: &apos;SLAVE&apos;, defaultValue: &quot;Docker-POC-e2e&quot;)
      string(name: &apos;REPO&apos;, description: &apos;Enter the repo. Eg. OSS/com.ericsson.oss.de.containerisation/test-eric-enmsg-kpi-service&apos;, defaultValue: &quot;OSS/com.ericsson.oss.de.containerisation/test-eric-enmsg-kpi-service&quot;)
      string(name: &apos;CURRENT_SPRINT&apos;, description: &apos;Enter current sprint number Eg: 21.01&apos;)
      string(name: &apos;EMAIL&apos;, defaultValue: &quot;&quot;)
      booleanParam(name: &apos;PUSH_COMMIT&apos;, defaultValue: false,)
    }

    stages {

        stage(&apos;Init&apos;) {
         steps {
                script {
                    deleteDir()
                    env.updated = &quot;FALSE&quot;
                    env.BRANCH_NAME=&quot;point_fix_${params.CURRENT_SPRINT}&quot;
                    echo &quot;Repo Name is: ${params.REPO}&quot;
                    echo &quot;Branching based on the tag/branch: ${params.CHECKOUT_TAG}&quot;
                    echo &quot;Branch Name is: ${BRANCH_NAME}&quot;

                }
            }
        }
        stage(&apos;Checkout&apos;) {
            steps {

                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &quot;master&quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: &apos;Default&apos;, submoduleCfg: [], userRemoteConfigs: [[url: &quot;${env.GERRIT_MIRROR}/${params.REPO}&quot;]]])
                sh &apos;&apos;&apos;
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                &apos;&apos;&apos;
            }
        }
        stage(&quot;Check if branch exists&quot;) {
            steps {
                script {
                    env.exists = check_branch(&quot;${params.REPO}&quot;, &quot;${env.BRANCH_NAME}&quot;)

                    echo &quot;exists=${env.exists}&quot;
                }
            }
        }
        stage(&quot;Create Branch&quot;) {
            when { expression { env.exists != &quot;true&quot; } }
            steps {
                script {
                    sh &apos;&apos;&apos;
                        echo ${WORKSPACE}
                        chmod -R 777 ${WORKSPACE}
                    &apos;&apos;&apos;
                    createPointfixBranch(&quot;${params.REPO}&quot;, &quot;${env.BRANCH_NAME}&quot;)
                }
            }
        }
        stage(&quot;Bump the Minor Version&quot;) {
            when { expression { env.exists != &quot;true&quot; } }
            steps {
                script {
                    // Switch to Master
                    sh(returnStatus: true, script: &quot;git checkout master&quot;)
                    sh(returnStatus: true, script: &quot;git pull&quot;)
                    sh(returnStatus: true, script: &quot;git reset --hard origin/master&quot;)
                    sh &apos;&apos;&apos;
                        echo ${WORKSPACE}
                        chmod -R 777 ${WORKSPACE}
                    &apos;&apos;&apos;
                    bumpMinorVersion(&quot;${params.REPO}&quot;, &apos;HEAD:master&apos;)
                    println(&quot;*******************************************************************************************************************************************************&quot;)
                    println(&quot;Old Minor Version: ${env.oldMinorVersion}&quot;)
                    println(&quot;New Minor Version: ${env.newMinorVersion}&quot;)
                    println(&quot;*******************************************************************************************************************************************************&quot;)
                }
            }
        }
    }
    post {
        failure {
            mail to: EMAIL,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}



def check_branch(repo_check, branch_check){
    return_value= false
    branch_exists = sh(returnStatus: true, script: &quot;&quot;&quot;git ls-remote --exit-code --heads $env.GERRIT_MIRROR/$repo_check $branch_check&quot;&quot;&quot;)

    if(branch_exists == 0){
        return_value= true
    }
    return return_value
}


def createPointfixBranch(repo_check, branch_check) {
    println(&quot;Remote branch $branch_check doesn&apos;t exist. Calling function to create branch, bump patch version and push the changes to the remote repo...&quot;)
    sh(returnStatus: true, script: &quot;git checkout -b $branch_check&quot;)
    if (env.PUSH_COMMIT == &quot;true&quot;) {
      sh(returnStatus: true, script: &quot;git push ${GERRIT_CENTRAL}/$repo_check $branch_check&quot;)
      env.updated = &quot;TRUE&quot;
    }
println(&quot;*******************************************************************************************************************************************************&quot;)
    bumpPatchVersion(&quot;$repo_check&quot;, &quot;$branch_check&quot;)
    println(&quot;Pointfix Branch ${env.BRANCH_NAME} created for the repo: ${params.REPO}&quot;)
}

def bumpPatchVersion(repo_check, branch_check) {

    env.oldVersion = readFile &quot;VERSION_PREFIX&quot;
    env.oldVersion = env.oldVersion.trim()

    sh &apos;docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch&apos;

    env.newVersion = readFile &quot;VERSION_PREFIX&quot;
    env.newVersion = env.newVersion.trim()
    env.IMAGE_VERSION = env.newVersion

    if (env.PUSH_COMMIT == &quot;true&quot;) {
        sh &quot;&quot;&quot;
            git add VERSION_PREFIX
            git commit -m &quot;[ci-skip] Automatic new patch version bumping: $IMAGE_VERSION&quot;
            git push $env.GERRIT_CENTRAL/$repo_check $branch_check
        &quot;&quot;&quot;
        status = &quot;OK&quot;
        env.updated = &quot;TRUE&quot;
        currentBuild.description = &quot;Pointfix Branch Version: &quot; + env.newVersion + &quot;&lt;BR&gt;&quot;
    } else {
        status = &quot;OK&quot;
        currentBuild.description = &quot;Pointfix Branch Version: &quot; + env.newVersion + &quot;&lt;BR&gt;&quot;
        currentBuild.description += &quot;PUSH_COMMIT set to false, no commit was made.&quot;
        env.updated = &quot;FALSE&quot;
        echo &quot;PUSH_COMMIT set to false, no commit was made.&quot;
        sh(returnStatus: true, script: &quot;git reset --hard origin/master &gt; /dev/null&quot;)
    }
}

def bumpMinorVersion(repo_check, branch_check) {

    env.oldMinorVersion = readFile &quot;VERSION_PREFIX&quot;
    env.oldMinorVersion = env.oldMinorVersion.trim()

    sh &apos;docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump minor&apos;
    env.newMinorVersion = readFile &quot;VERSION_PREFIX&quot;
    env.newMinorVersion = env.newMinorVersion.trim()

    env.IMAGE_VERSION = env.newMinorVersion

    if (env.PUSH_COMMIT == &quot;true&quot;) {
        sh &quot;&quot;&quot;
            git add VERSION_PREFIX
            git commit -m &quot;[ci-skip] Automatic new minor version bumping: $IMAGE_VERSION&quot;
            #git push $env.GERRIT_CENTRAL/$repo_check $branch_check
            git push origin $branch_check
        &quot;&quot;&quot;
        status = &quot;OK&quot;
        env.updated = &quot;TRUE&quot;
        currentBuild.description += &quot;Master Branch Version: &quot; + env.newMinorVersion
    } else {
        status = &quot;OK&quot;
        currentBuild.description += &quot;Master Branch Version: &quot; + env.newMinorVersion
        env.updated = &quot;FALSE&quot;
        echo &quot;PUSH_COMMIT set to false, no commit was made.&quot;
        sh(returnStatus: true, script: &quot;git reset --hard origin/master &gt; /dev/null&quot;)
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>