<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Creation of CSAR Package - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MONITORING_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INFRA_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STATELESS_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>slave</name>
          <defaultValue/>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_SNAPSHOT</name>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def metadataImage = 'armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest'
def defaultAMPackageImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.28'

def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def UpdateIntegrationValues(){
    try {
        filename = "scripts/${integration_values}"
        values = readYaml file: filename

        values."eric-enm-version-configmap" = [enabled: true,"productVersion": "ENM ${SPRINT_TAG} (CSAR-lite Version: ${VERSION}) ${ENM_RSTATE_NUMBER}", "productSet":"${PRODUCT_SET}","productionDate":"${VNF_RELEASE_DATE_TIME}"]
        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        error "$err"
    }
}

pipeline {
    agent {
        label slave
    }
    environment {
        repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/ci-internal"
        CSAR_PACKAGE_NAME = "${params.BUILD_SNAPSHOT == true ? "enm-lite-installation-package-kgb" : "enm-lite-installation-package"}"
        PACKAGE_TYPE = "${params.BUILD_SNAPSHOT == true ? "csar-lite-kgb" : "csar-lite"}"
    }

    stages {
        stage('Clean workspace') {
            steps {
                script {
                    sh "docker image prune -fa"
                }
                deleteDir()
            }
        }
        stage('Import Local Variables') {
            steps {
                script {
                    if (env.PIPELINE_LOCAL_VARIABLES) {
                        ARRAY_LOCAL_VARIABLE = PIPELINE_LOCAL_VARIABLES.trim().tokenize("\n")
                        ARRAY_LOCAL_VARIABLE.each {
                            def (env_name, env_value) = it.split('=', 2)
                            env."$env_name"="$env_value"
                        }
                    }
                }
            }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dcsarliteenm',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-installation'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-installation
                '''
            }
        }
        stage('Pre Configurations') {
            steps {
                script {
                    sh 'mkdir -p ${PWD}/charts'
                    sh 'cp settings.xml ${HOME}/.m2/ || true'
                    echo "here,status of job has to be updated to ci portal as in_progress NOT Applicable when BUILD_SNAPSHOT true"
                    env.VNF_RELEASE_DATE_TIME = sh(script: "date +'%FT%TZ'", returnStdout: true).trim()
                    echo "${VNF_RELEASE_DATE_TIME}"
                    env.ENM_RSTATE_NUMBER = sh(script: 'wget -q -O - --no-check-certificate "https://ci-portal.seli.wh.rnd.internal.ericsson.com/getAOMRstate/?product=ENM&amp;drop=${SPRINT_TAG}"', returnStdout: true).trim()
                    echo "${ENM_RSTATE_NUMBER}"
                }
            }
        }

        stage('Generate new version') {
            steps {
                script {
                    if (params.BUILD_SNAPSHOT) {
                        sh "${bob} generate-new-snapshot-version"
                    } else {
                        sh "${bob} generate-new-version"
                    }
                    env.VERSION = sh(script: "cat .bob/var.version", returnStdout: true).trim()
                    echo "${VERSION}"
                    env.VNF_PACKAGE_VERSION = sh(script: "echo CXP9039612_${VERSION}", returnStdout: true).trim()
                    echo "${VNF_PACKAGE_VERSION}"
                }
            }
        }
        stage('Update manifest details') {
            steps {
                script {
                    env.NOW = sh(script: "date +'%FT%TZ'", returnStdout: true).trim()
                    echo "${NOW}"
                    sh "sed -i -e '/^vnf_package_version:/s/.*/vnf_package_version: $VNF_PACKAGE_VERSION/' -e '/^vnf_release_date_time:/s/.*/vnf_release_date_time: $NOW/' manifest/enm_descriptor.mf"
                    sh("cat manifest/enm_descriptor.mf")
                }
            }
        }
        stage('Update VNFD details') {
            steps {
                script {
                    sh "mkdir -p vnfd_updated"
                    sh "cp vnfd/enm_descriptor.yaml vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;VERSION_PREFIX&gt;&gt;/$VERSION/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;DESCRIPTOR_ID&gt;&gt;/${UUID.randomUUID().toString()}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRODUCT_SET&gt;&gt;/${PRODUCT_SET}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;BRO_CHART_VERSION&gt;&gt;/${BRO_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRE_DEPLOY_CHART_VERSION&gt;&gt;/${PRE_DEPLOY_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;MONITORING_CHART_VERSION&gt;&gt;/${MONITORING_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;INFRA_CHART_VERSION&gt;&gt;/${INFRA_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;STATELESS_CHART_VERSION&gt;&gt;/${STATELESS_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    if (!params.BUILD_SNAPSHOT) {
                        sh 'echo PUSH TO dcsarliteenm'
                        sh '''
                             git add --all
                             git commit -m "NO JIRA vnfdlite.yaml"
                             git push origin HEAD:dcsarliteenm
                       '''
                    }
                }
            }
        }
        stage('Get Integration Chart') {
            steps {
                script {
                    def getBroSnapshotChart = false
                    def getPreDeploySnapshotChart = false
                    def getMonitoringSnapshotChart = false
                    def getInfraSnapshotChart = false
                    def getStatelessSnapshotChart = false
                    if (params.BUILD_SNAPSHOT) {
                        env.BRO_SNAPSHOT_URL = 'https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm/eric-enm-bro-integration/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz'
                        env.PRE_DEPLOY_SNAPSHOT_URL = 'https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz'
                        env.MONITORING_SNAPSHOT_URL = 'https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz'
                        env.INFRA_SNAPSHOT_URL = 'https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
                        env.STATELESS_SNAPSHOT_URL = 'https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'

                        def broSnapshotChart = sh(script: "curl --head --silent --fail ${BRO_SNAPSHOT_URL}", returnStatus: true)
                        getBroSnapshotChart = !broSnapshotChart
                        def preDeploySnapshotChart = sh(script: "curl --head --silent --fail ${PRE_DEPLOY_SNAPSHOT_URL}", returnStatus: true)
                        getPreDeploySnapshotChart = !preDeploySnapshotChart
                        def monitoringSnapshotChart = sh(script: "curl --head --silent --fail ${MONITORING_SNAPSHOT_URL}", returnStatus: true)
                        getMonitoringSnapshotChart = !monitoringSnapshotChart
                        def infraSnapshotChart = sh(script: "curl --head --silent --fail ${INFRA_SNAPSHOT_URL}", returnStatus: true)
                        getInfraSnapshotChart = !infraSnapshotChart
                        def statelessSnapshotChart = sh(script: "curl --head --silent --fail ${STATELESS_SNAPSHOT_URL}", returnStatus: true)
                        getStatelessSnapshotChart = !statelessSnapshotChart
                    }
                    if (getBroSnapshotChart) {
                        sh "curl -4 ${BRO_SNAPSHOT_URL} -o charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz"
                    } else {
                        sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz -o charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz'
                    }
                    if (getPreDeploySnapshotChart) {
                        sh "curl -4  ${PRE_DEPLOY_SNAPSHOT_URL} -o charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz"
                    } else {
                        sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz -o charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz'
                    }
                    if (getMonitoringSnapshotChart) {
                        sh "curl -4 ${MONITORING_SNAPSHOT_URL} -o charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz"
                    } else {
                        sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz -o charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz'
                    }
                    if (getInfraSnapshotChart) {
                        sh "curl -4  ${INFRA_SNAPSHOT_URL} -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz"
                    } else {
                        sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
                    }
                    if (getStatelessSnapshotChart) {
                        sh "curl -4 ${STATELESS_SNAPSHOT_URL} -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz"
                    } else {
                        sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'
                    }
                }
            }
        }
        stage('integration value version') {
            steps {
                script {
                    env.VALUES_HELM_PATH = 'proj-enm-dev-internal-helm'
                    if (params.BUILD_SNAPSHOT) {
                        env.VALUES_SNAPSHOT_URL = 'https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
                        def valuesSnapshotChart = sh(script: "curl --head --silent --fail ${VALUES_SNAPSHOT_URL}", returnStatus: true)
                        getValuesSnapshotChart = !valuesSnapshotChart
                        if (getValuesSnapshotChart) {
                            env.VALUES_HELM_PATH = 'proj-enm-kgb-dev-helm'
                        }
                    }
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-integration-functional-kaas-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-functional-kaas-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-integration-functional-test-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-functional-test-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-integration-kaas-core-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-kaas-core-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-integration-openstack-core-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-openstack-core-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-multi-instance-functional-integration-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-multi-instance-functional-integration-values-${INTEGRATION_VALUE_VERSION}.yaml"
                    sh "curl -4 https://arm.epk.ericsson.se/artifactory/${VALUES_HELM_PATH}/eric-enm-integration-values/eric-enm-single-instance-production-integration-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-single-instance-production-integration-values-${INTEGRATION_VALUE_VERSION}.yaml"
                }
            }
        }
        stage('updating integration-values file') {
            steps {
                script {
                    String[] arr = ['eric-enm-integration-production-values','eric-enm-integration-extra-large-production-values','eric-enm-integration-functional-kaas-values','eric-enm-integration-functional-test-values','eric-enm-integration-kaas-core-values','eric-enm-integration-openstack-core-values','eric-enm-multi-instance-functional-integration-values','eric-enm-single-instance-production-integration-values']
                    for (i in arr) {
                         check_extra_large_values=sh (script: "ls scripts |grep $i*", returnStatus: true )
                         if (check_extra_large_values == 0){
                              env.integration_values=sh (script: "ls scripts |grep $i*", returnStdout: true ).trim()
                              UpdateIntegrationValues()
                         env.integration_values_file_path= sh (script: "ls scripts/|grep $i*", returnStdout: true ).trim()
                         archiveArtifacts "scripts/${integration_values_file_path}"
                          }
                }
				sh "sed -i -z 's/tags:/tags: \\&amp;tags_reference/1' scripts/eric-enm*"
                sh "sed -i -z 's/tags:/tags:\\n    *tags_reference/2' scripts/eric-enm*"
                sh "sed -i '20,2000{/value_pack_/d}' scripts/eric-enm*"
              }
            }
        }
        stage('Build CSAR Lite Package') {
            steps {
                script {
                    def bobWithCsar = new BobCommand()
                            .bobImage(defaultAMPackageImage)
                            .needDockerSocket(true)
                            .envVars(['ENM_INSTALLATION_CHART_VERSION': env.INFRA_CHART_VERSION,
                                      'INTEGRATION_VALUE_VERSION'     : env.INTEGRATION_VALUE_VERSION,
                            ])
                            .toString()
                    sh "${bobWithCsar} generate -hd charts/ --name ${CSAR_PACKAGE_NAME}-${env.VERSION} -sc scripts -mf manifest/enm_descriptor.mf --no-images --history history/ChangeLog.txt --vnfd vnfd_updated/enm_descriptor.yaml --definitions definitions/etsi_nfv_sol001_vnfd_2_5_1_types.yaml"
                }
            }
        }
        stage('Generate CSAR Lite Parameters') {
            steps {
                script {
                    sh 'echo "CSAR_PACKAGE_VERSION=${VERSION}" &gt; artifact.properties'
                    sh 'echo "ENM_ISO_VERSION=${ISO_VERSION}" &gt;&gt; artifact.properties'
                    sh 'echo "PRODUCT_SET_VERSION=${PRODUCT_SET}" &gt;&gt; artifact.properties'
                    sh 'echo "SPRINT_TAG=${SPRINT_TAG}" &gt;&gt; artifact.properties'
                    sh 'echo "BRO_CHART_VERSION=${BRO_CHART_VERSION}" &gt;&gt; artifact.properties'
                    sh 'echo "PRE_DEPLOY_VERSION=${PRE_DEPLOY_CHART_VERSION}" &gt;&gt; artifact.properties'
                    sh 'echo "MONITORING_CHART_VERSION=${MONITORING_CHART_VERSION}" &gt;&gt; artifact.properties'
                    sh 'echo "INFRA_CHART_VERSION=${INFRA_CHART_VERSION}" &gt;&gt; artifact.properties'
                    sh 'echo "STATELESS_CHART_VERSION=${STATELESS_CHART_VERSION}" &gt;&gt; artifact.properties'
                    sh 'echo "INTEGRATION_VALUE_VERSION=${INTEGRATION_VALUE_VERSION}" &gt;&gt; artifact.properties'
                    archiveArtifacts 'artifact.properties'
                    env.CSAR_URL = "${repositoryUrl}/cENM/${PACKAGE_TYPE}/${CSAR_PACKAGE_NAME}/${VERSION}/${CSAR_PACKAGE_NAME}-${VERSION}.csar"

                }
            }
        }
    }
    post {
        success {
              script {
                //currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
                //echo "here,status of job has to be updated to ci portal as success"
                 sh '''
                    set +x
                    git tag --annotate --message "Tagging latest in sprint" --force $SPRINT_TAG HEAD
                    git push --force origin $SPRINT_TAG
                    git tag --annotate --message "Tagging latest in sprint with ISO version" --force ${SPRINT_TAG}_iso_${ISO_VERSION} HEAD
                    git push --force origin ${SPRINT_TAG}_iso_${ISO_VERSION}
                    git tag --annotate --message "Tagging latest in sprint with Product Set version" --force ps_${PRODUCT_SET} HEAD
                    git push --force origin ps_${PRODUCT_SET}
                '''
                echo "Job has completed succesfully."
            }
        }
        failure {
            script {
                //currentBuild.rawBuild.@result = hudson.model.Result.FAILURE
                //echo "here,status of job has to be updated to ci portal as failure. NOT Applicable when BUILD_SNAPSHOT true"
                echo  "Job has failed. Please check."
            }

        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class AMPackageCommand {
    def AMPackageImage = 'AMPackage.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${AMPackageImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:1.5.2-0'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>