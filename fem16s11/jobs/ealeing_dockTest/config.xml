<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>BRANCH</string>
        <string>ISO_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description>The ENM ISO version (e.g. 1.65.77)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Enter the GIT Branch (e.g. master)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <EnvInjectJobProperty plugin="envinject@2.4.0">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.containerisation/eric-enm-sles-base</propertiesContent>
        <secureGroovyScript plugin="script-security@1138.v8e727069a_025">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)  
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: '${ISO_VERSION}', ENM_ISO_REPO_VERSION: '${ENM_ISO_REPO_VERSION}'])
        .needDockerSocket(true)
        .toString()
def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = ''
def failedStage = ''
pipeline {
    agent {
        label 'CENM_RHEL7_GE_1'
    }
    parameters {
        string(name: 'ISO_VERSION', description: 'The ENM ISO version (e.g. 1.65.77)')
        string(name: 'BRANCH', description: 'Enter the GIT Branch (e.g. master)')
    }
    stages {
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage('Checkout Base Image Git Repository') {
            steps {
                git branch: env.BRANCH,
                     credentialsId: 'enmadm100_private_key',
                     url: '${GERRIT_MIRROR}/'+env.REPO
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                '''
            }
        }
        stage('Helm Lint') {
            steps {
                script {
                    if ( env.REPO.split('/').last() == "eric-enm-monitoring-master" || env.REPO.split('/').last() == "eric-enm-monitoring-remotewriter") {
                        sh "${bob} lint-helm"
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('ADP Helm Design Rule Check') {
            steps {
                script {
                    if ( env.REPO.split('/').last() == "eric-enm-monitoring-master" || env.REPO.split('/').last() == "eric-enm-monitoring-remotewriter") {
                        sh "${bob} test-helm || true"
                        archiveArtifacts 'design-rule-check-report.*'
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Update Yum Repo or Swap versions'){
            steps {
                script {
                    if ( env.REPO.split('/').last() == "eric-enm-sles-base"){
                        sh "${bob} generate-yum-repo-version"
                        sh '''
                            if git status | grep 'Dockerfile' &gt; /dev/null; then
                               git add Dockerfile
                               git commit -m "Updating yum repo version"
                            fi
                        '''
                    }
                   else if ( env.REPO.split('/').last() == "eric-enm-monitoring-master" || env.REPO.split('/').last() == "eric-enm-monitoring-remotewriter" || env.REPO.split('/').last() == "eric-enm-neo4j-extension-plugin") {
                       return "not required"
                       }
                    else {
                        echo sh(script: 'env', returnStdout:true)
                        step ([$class: 'CopyArtifact', projectName: 'sync-build-trigger-pointfix', filter: "*"]);
                        sh "${bob} swap-latest-versions-with-numbers"
                        sh '''
                            if git status | grep 'Dockerfile\\|values.yaml' &gt; /dev/null; then
                               git commit -m "NO JIRA - Updating Dockerfile and Values.yaml files with base images version"
                            fi
                        '''
                    }
                }
            }
        }
        stage('Build Image and chart') {
            steps {
                script {
                    if ( env.REPO.split('/').last() == "eric-enm-monitoring-master" || env.REPO.split('/').last() == "eric-enm-monitoring-remotewriter" ) {
                        sh "${bob} generate-new-version build-helm build-image"
                    }
                    else {
                       sh "echo ${ISO_VERSION}"
                       sh "${bob} generate-new-version build-image"
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} remove-image"
                    }
                }
            }
        }
        stage('Retrieve image version') {
            steps {
                script {
                    env.IMAGE_TAG = sh(script: "cat .bob/var.version", returnStdout:true).trim()
                    echo "${IMAGE_TAG}"
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} remove-image"
                    }
                }
            }
        }
        stage('Publish Images to Artifactory') {
            steps {
                sh "${bob} push-image"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} remove-image"
                    }
                }
                always {
                    sh "${bob} remove-image"
                }
            }
        }
        stage('Publish Helm Chart') {
            steps {
                script {
                    if ( env.REPO.split('/').last() == "eric-enm-monitoring-master" || env.REPO.split('/').last() == "eric-enm-monitoring-remotewriter") {
                        withCredentials([string(credentialsId: 'enmadm100', variable: 'HELM_REPO_TOKEN')]) {
                            def bobWithHelmToken = new BobCommand()
                                    .bobImage(defaultBobImage)
                                    .needDockerSocket(true)
                                    .envVars(['HELM_REPO_TOKEN': env.HELM_REPO_TOKEN])
                                    .toString()
                            sh "${bobWithHelmToken} push-helm"
                        }
                    }
                }
            }
        }
        stage('Generate ADP Parameters') {
            steps {
                sh "${bob} generate-output-parameters"
                archiveArtifacts 'artifact.properties'
            }
        }
        stage('Tag Base Image Git Repository') {
            steps {
                wrap([$class: 'BuildUser']) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        'AUTHOR_NAME'        : "\${BUILD_USER:-${GIT_COMMITTER_NAME}}",
                                        'AUTHOR_EMAIL'       : "\${BUILD_USER_EMAIL:-${GIT_COMMITTER_EMAIL}}",
                                        'GIT_COMMITTER_NAME' : "${GIT_COMMITTER_NAME}",
                                        'GIT_COMMITTER_EMAIL': "${GIT_COMMITTER_EMAIL}"
                                ])
                                .toString()
                        sh "${bobWithCommitterInfo} create-git-tag"
                        sh """
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        """
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                always {
                    script {
                        sh "${bob} remove-git-tag"
                    }
                }
            }
        }
        stage('Bump Version') {
            steps {
                script {
                    sh 'hostname'
                    Version = readFile "VERSION_PREFIX"
                    sh 'docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch'
                    newVersion = readFile "VERSION_PREFIX"
                    env.IMAGE_VERSION = newVersion
                    currentBuild.displayName = "${BUILD_NUMBER} - Version - " + Version
                    sh '''
                        git add VERSION_PREFIX
                        git commit -m "Version $IMAGE_VERSION"
                        git push origin HEAD:${BRANCH}
                    '''
                }
            }
        }
        stage('Generate Metadata Parameters') {
            steps {
                script {
                    if (env.REPO.split('/').last() == "eric-oss-monitoring-master") {
                        return "not required"
                    }
                    else {
                            sh "${bob} generate-metadata-parameters"
                            archiveArtifacts 'image-metadata-artifact.json'
                    }
                }
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}:\${HOME}
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>