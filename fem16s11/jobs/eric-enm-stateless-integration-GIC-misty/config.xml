<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enm-stateless-integration - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_REPO_TOKEN</name>
          <description>helm token</description>
          <defaultValue>AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
        .needDockerSocket(true)
        .toString()
def GIT_COMMITTER_NAME = &apos;enmadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;enmadm100@ericsson.com&apos;
def failedStage = &apos;&apos;
pipeline {
    agent {
        label &apos;Docker-POC-e2e&apos;
    }
    stages {
        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
        stage(&apos;Checkout stateless-integration Chart From Internal Stage Area&apos;) {
            steps {
                withCredentials([string(credentialsId: &apos;enmadm100&apos;, variable: &apos;HELM_REPO_TOKEN&apos;)]) {
                    sh &apos;curl -4 -u ${GIT_COMMITTER_NAME}:${HELM_REPO_TOKEN} https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${INTEGRATION_CHART_VERSION}.tgz -o eric-enm-stateless-integration-${INTEGRATION_CHART_VERSION}.tgz&apos;

               }
            }
        }
        /*
        stage(&apos;Publish-stateless-Integration&apos;) {
            steps {
                script {
                        def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([&apos;HELM_REPO_TOKEN&apos;: env.HELM_REPO_TOKEN,
                                          &apos;INTEGRATION_CHART_VERSION&apos;: env.INTEGRATION_CHART_VERSION,
                                ])
                                .toString()
                        sh &quot;${bobWithHelmToken} helm-publish&quot;
                }
            }
        }
        */
        stage(&apos;Helm Generate ADP Parameters&apos;) {
         steps {
                script {
                        def bobWithAdpParameters = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([&apos;INTEGRATION_CHART_VERSION&apos;: env.INTEGRATION_CHART_VERSION,
                                ])
                                .toString()
                        //sh &quot;${bobWithAdpParameters} generate-adp-parameters&quot;
             //archiveArtifacts &apos;artifact.properties&apos;
             }
          }
       }
    }
    post {
        failure {
            mail to: &apos;rakesh.thummala1-external@tcs.com&apos;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
        success {
           /*
            script {
                sh(script: &apos;curl -4 --location --request POST https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudNative/publishVerifiedCNContent/\${PRODUCT_SET_VERSION}/eric-enm-stateless-integration/\${INTEGRATION_CHART_VERSION}/&apos;, returnStdout: true).trim()
            }
            */
            echo &quot;Publishing stage completed&quot;
        }
        always {
             sh &quot;rm -rf eric-enm-stateless-integration-${INTEGRATION_CHART_VERSION}.tgz&quot;
             sh &quot;rm -rf artifact.properties&quot;
        }
        cleanup{
             deleteDir()
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |--group-add \$(stat -c &apos;%g&apos; /var/run/docker.sock)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>