<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Upgrade Build pipeline cENM_Initial_Install - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The deployment name to run the job against</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description/>
          <defaultValue>CSAR_Slave_4Node_Thunderbird</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>
def integration_values_file_keys_exists(element, keys,value){
     def str = keys.tokenize(".");
    _element = element
    _flag = false
     for (i = 0; i &lt; str.size(); i++) {
        try{
           if ( _element!=null&amp;&amp;_element.containsKey(str[i])){
              _element = _element[str[i]]
              if(i==str.size()-1){
                _flag=true
              }
           }
           } catch( err ) {
              return false
            }
        }
         return  _flag
}

/* 
 * This function will update value of the key in integration values.yaml file.
 */
 
def update_IntegrationValues_with_values(keys,value){
     def str = keys.tokenize(".");
     def bindings = [:]
     def map = bindings
     for (i = 0; i &lt; str.size(); i++) {
       def part = str[i];
       if (!map.containsKey(part)) {
           map[part] = values.get(part)
       }
       if (i == str.size() - 1) {
           map[part] = value
       } else {
          map = map[part]
       }
     }
    values.putAll(bindings)
}

/* 
 * This function is required to Update the integration values.yaml file with site-config properties
 */

def updateIntegrationValues() {
    try {
        def integration_value_map = [
                       'global.registry.url':'TARGET_DOCKER_REGISTRY_URL',
                       'global.registry.pullSecret':'PULLSECRET',
                       'global.persistentVolumeClaim.storageClass':'STORAGE_CLASS',
                       'global.ingress.enmHost':'ENM_LAUNCHER_HOSTNAME',
                       'global.enmProperties.COM_INF_LDAP_ROOT_SUFFIX':'COM_INF_LDAP_ROOT_SUFFIX',
                       'global.enmProperties.COM_INF_LDAP_ADMIN_CN':'COM_INF_LDAP_ADMIN_CN',
                       'global.rwx.storageClass':'RWX_STORAGE_CLASS',
                       'global.timezone':'TIME_ZONE',
                       'global.enmProperties.host_system_identifier':'HOST_SYSTEM_IDENTIFIER',
                       'eric-net-ingress-l4.interfaces.internal':'LVS_INTERNAL_INTERFACE',
                       'eric-net-ingress-l4.interfaces.external':'LVS_EXTERNAL_INTERFACE',
                       'eric-net-ingress-l4.cniMode':'LVS_CNIMODE',
                       'eric-data-graph-database-nj.persistentVolumeClaim.storageClass':'STORAGE_CLASS',
                       'eric-data-graph-database-nj.persistentVolumeClaim.backup.storageClass':'STORAGE_CLASS',
                       'eric-data-graph-database-nj.persistentVolumeClaim.logging.storageClass':'STORAGE_CLASS',
                       'global.vips.fm_vip_address':'FM_VIP_ADDRESS',
                       'global.vips.cm_vip_address':'CM_VIP_ADDRESS',
                       'global.vips.pm_vip_address':'PM_VIP_ADDRESS',
                       'global.vips.amos_vip_address':'AMOS_VIP_ADDRESS',
                       'global.vips.general_scripting_vip_address':'SCRIPT_VIP_ADDRESS',
                       'global.vips.element_manager_vip_address':'ELEMENT_MANAGER_VIP',
                       'global.vips.ui_vip_address':'UI_VIP_ADDRESS',
                       'global.vips.visinamingsb_vip_address':'CM_VIP_ADDRESS',
                       'eric-ctrl-bro.persistence.persistentVolumeClaim.storageClassName':'STORAGE_CLASS',
                       'eric-data-search-engine.persistence.data.persistentVolumeClaim.storageClassName':'STORAGE_CLASS',
                       'eric-data-search-engine.persistence.backup.persistentVolumeClaim.storageClassName':'RWX_STORAGE_CLASS',
                       'eric-enm-monitoring-master.monitoring.autoUpload.ddpsite':'DDPSITE',
                       'eric-enm-monitoring-master.monitoring.autoUpload.account':'ACCOUNT',
                       'eric-enm-monitoring-master.monitoring.autoUpload.password':'PASSWORD',
                       'eric-pm-node-exporter.prometheus.nodeExporter.service.hostPort':'NODE_EXPORTER_HOST_PORT',
                       'eric-pm-node-exporter.prometheus.nodeExporter.service.servicePort':'NODE_EXPORTER_SERVICE_PORT',
                       'eric-pm-server.server.persistentVolume.storageClass':'STORAGE_CLASS'
                       ]
        def list_all_environment = env.getEnvironment()
       filename ="${HOME_DIR}/${integration_values_file_path}"
       values = readYaml file: filename
       for (parameter in integration_value_map){
         def value = parameter.value
         def key = parameter.key
         if (integration_values_file_keys_exists( values, key, value)){
               if ( value == "TARGET_DOCKER_REGISTRY_URL"){
                   value="TARGET_DOCKER_REGISTRY_URL_WITH_OUT_PORT"
               }
               value= list_all_environment.get(value)
               update_IntegrationValues_with_values(key,value)
         }
       }

        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        sh "exit 1"
    }
}
def commonMethods

pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 9, unit: 'HOURS')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
        https_proxy = "http://www-proxy.lmera.ericsson.se:8080/"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage( 'setup_kubeconfig_file_for_cluster' ) {
            steps {
                script{
                      commonMethods.download_jq()
                      commonMethods.download_kube_config_file_from_dit()
                      commonMethods.read_site_config_info_from_dit()
                      commonMethods.set_kube_config_file()
               }
            }
        }
        stage('Updating integration values'){
            steps{
                script{
				     sh "scp -o ' LogLevel=error' -o 'StrictHostKeyChecking no' cenmbuild@100.76.23.74:/local/installation/Misty/Scripts/eric-enm-integration-production-values-1.5.0-4.yaml ${HOME_DIR}/"
				     env.integration_values_file_path="eric-enm-integration-production-values-1.5.0-4.yaml"
                     updateIntegrationValues()
					 sh "scp  -o ' LogLevel=error' -o 'StrictHostKeyChecking no'  ${HOME_DIR}/${integration_values_file_path} cenmbuild@100.76.23.74:/local/installation/Misty/Scripts/"
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>