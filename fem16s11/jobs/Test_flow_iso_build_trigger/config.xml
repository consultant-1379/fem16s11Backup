<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enm-green-iso-build-trigger - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SKIP_STAGE</name>
          <description/>
          <defaultValue>True</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@65.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@65.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>pipeline {
    agent { label 'Cloud-Native' }
    stages {
        stage('Gathering Information - Step 1') {
            steps {
                script {
                    if("${PRODUCT_SET}" == "") {
                        echo "Triggered without the PRODUCT_SET. Considering the latest PRODUCT_SET/ISO."
                        get_product_set()
                    } else {
                        echo "Triggered with the PRODUCT_SET: ${PRODUCT_SET}"
                        env.PRODUCT_SET = "${PRODUCT_SET}"
                    }
                }
                echo env.PRODUCT_SET
                get_iso_version()
                echo env.ISO_VERSION
            }
        }
        stage('Create Yum repo - Step 2') {
            // when { expression { env.SKIP_STAGE != 'True' } }
            steps {
                // create_yum_repo()
                script {
                    echo "Simulating this stage of creating yum repo"
                    env.ENM_ISO_REPO_VERSION = "ENM_20_11_ERICenm_CXP9027091_1_95_53"
                    echo env.ENM_ISO_REPO_VERSION
                }
            }
        }
        stage('Set Yum repo to latest - Step 3'){           
            when { expression { env.SKIP_STAGE != 'True' } }
            steps { retry(3) { 
                    //set_to_latest()
                    //echo env.LATEST_YUM_REPO_SETUP
                    echo "Passing this stage of set to latest"
                }
            }
        }
    }
}

def get_product_set() {
    echo "Running product set function"
    env.PRODUCT_SET = sh(script: 'wget -q -O - --no-check-certificate https://ci-portal.seli.wh.rnd.internal.ericsson.com/getLastGoodProductSetVersion/?productSet=ENM', returnStdout: true).trim()
}

def get_iso_version() {
    echo "Running iso version function"
    def iso_version_json = $/eval "wget -q -O - --no-check-certificate 'https://ci-portal.seli.wh.rnd.internal.ericsson.com/getProductSetVersionContents/?productSet=ENM&amp;version=${PRODUCT_SET}&amp;pretty=true' | grep 'ERICenm_CXP9027091' -A4 | grep 'version' | sed -n -e 's/^.*\"version\": //p' | sed 's/\"//g'"/$
    env.ISO_VERSION = sh(script: "${iso_version_json}", returnStdout: true).trim()

    if (env.ISO_VERSION == "") {
        error("Invalid Product Set provided. There is no ENM ISO content for the given Product Set Version.")
    }
}

def create_yum_repo() {
    echo "Running create yum repo function"
    env.ENM_ISO_REPO_VERSION = sh(script: 'wget -q -O - --no-check-certificate --post-data="product=ENM&amp;baseIsoName=ERICenm_CXP9027091&amp;baseIsoVersion=${ISO_VERSION}&amp;useMediaContent=True&amp;repoNameOnly=True" https://ci-portal.seli.wh.rnd.internal.ericsson.com/createRepo/', returnStdout: true).trim()
    if (env.ENM_ISO_REPO_VERSION.contains("File exists:")) {
        env.ENM_ISO_REPO_VERSION = env.ENM_ISO_REPO_VERSION.split("/")[-1].replace("'", "")
        env.SKIP_STAGE = 'True'
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>