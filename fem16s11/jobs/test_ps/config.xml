<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Upgrade Build pipeline cENM_Initial_Install - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_mechanism</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either charts or csar.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>charts</string>
              <string>csar</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The deployment name to run the job against</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>stage_area</name>
          <description>This parameter acts as the flow controller to download charts from internal area or release area</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci_internal</string>
              <string>drop</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Provide clould native product set version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>drop</name>
          <description>provide the drop version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description/>
          <defaultValue>Upgrade_CSAR_Slave_4Node_MISTY</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>def check_version_a_newer_than_version_b(latest_productset_version,old_productset_version) {
    if(latest_productset_version &gt; old_productset_version){
        return true
    } else{
        return false
    }

}

def get_cn_build_version_info(){
       sh "curl --location --request GET 'https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudnative/getCloudNativeProductSetContent/${drop}/${product_set_version}/'&gt;cn_confidence_level_response.json"
       if (env.deployment_mechanism == 'charts') {
            env.infra_chart_version= sh (script : "./jq '.[1] .integration_charts_data|.[] | select(.chart_name==\"eric-enm-infra-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            echo "infra:${env.infra_chart_version}"
            if(env.infra_chart_version==''){
               error("Invalid Infra Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.bro_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-bro-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            echo "bro : ${env.bro_chart_version}"
            if(env.bro_chart_version==''){
               error("Invalid Bro Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.pre_deploy_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-pre-deploy-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            echo "predep: ${env.pre_deploy_chart_version}"
            if(env.pre_deploy_chart_version==''){
               error("Invalid Predeploy Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.stateless_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-stateless-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            echo "stateless:${env.stateless_chart_version}"
            if(env.stateless_chart_version==''){
               error("Invalid Stateless Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            if (check_version_a_newer_than_version_b("${product_set_version}","21.03.57")){
                env.monitoring_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-monitoring-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                echo "monitoring:${env.monitoring_chart_version}"
                if(env.monitoring_chart_version==''){
                    error("Invalid Monitoring Integration chart provided. There is no Cloud native content for the given Product Set Version.")
                    }
                  }
            else {
                env.monitoring_chart_version = ''
             }
            env.integration_value_version= sh (script : "./jq -r '.[2].integration_values_file_data.values_file_version' cn_confidence_level_response.json", returnStdout: true).trim()
            echo "values:${env.integration_value_version}"
            if(env.integration_value_version==''){
               error("Invalid Integration values provided. There is no Cloud native content for the given Product Set Version.")
            }
            println("bro integration chart version":env.bro_chart_version)
            println("pre deploy integration chart version":env.pre_deploy_chart_version)
            println("infra integration chart version":env.infra_chart_version)
            println("stateless integration chart version":env.stateless_chart_version)
            println("integration values version":env.integration_value_version)
      } else {
           env.csar_package_version=sh (script : "./jq -r '.[0] .csar_data.csar_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
           if(env.csar_package_version==''){
              error("Invalid csar package provided. There is no Cloud native content for the given Product Set Version.")
            }
           env.csar_verified= sh (script : "./jq '.[0] .csar_data.csar_verify' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
           println("csar package version":env.csar_package_version)
           println("csar verified status":env.csar_verified)
      }
}
def commonMethods

pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 9, unit: 'HOURS')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
        https_proxy = "http://www-proxy.lmera.ericsson.se:8080/"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-427030',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage('Pull docker image') {
            steps {
                script {
                    sh "docker pull ${cenm_utilities_docker_image}"
                }
            }
        }
        stage( 'setup_kubeconfig_file_for_cluster' ) {
            steps {
                script{
                      commonMethods.extract_jq()
                      get_cn_build_version_info()
               }
            }
        }
        
    }
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>