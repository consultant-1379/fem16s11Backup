<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>slave</name>
          <defaultValue>Upgrade_CSAR_Slave_4Node_MISTY</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPECIFIC_DESIGN_RULE</name>
          <description>Mention specific DR in given format-DR-D1123-124. Entire report summary also generated along with specific DR</description>
          <defaultValue>DR-D1123-124</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */
def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: '${ISO_VERSION}'])
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def GERRIT_USER = "cenmbuild"
def GERRIT_API_KEY = "Lxszgui71aPyTO2p3A5C"
def JENKINS_USER = "cenmbuild"
def JENKINS_API_KEY = "Lxszgui71aPyTO2p3A5C"
def failedStage = ''
pipeline {
    agent {
        node {
            label SLAVE
        }
    }
    environment{
        HOME_DIR = "${WORKSPACE}"
        image_name = "cenm-build-utilities"
	    docker_image_path = "armdocker.rnd.ericsson.se/proj_oss_releases/enm"
    }
    stages {
        stage('Clean Up WorkSpace'){
                steps{
                       deleteDir()
                       
                       sh "echo $HOME_DIR"
                     }
             }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-572749',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
                  }
             }
        stage('Build Image') {
            steps {
                sh 'mkdir -p ${HOME_DIR}/reports'
                /*sh "cat script/docker/dr.py"*/
                sh "docker build -f script/docker/DockerfileDR --tag ${docker_image_path}/${image_name}:drchecker ."
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "docker image remove ${docker_image_path}/${image_name}:drchecker"
                    }
                }
            }
        }
        stage('Create container'){
            steps {
                
                sh "docker run --rm  -v $WORKSPACE/reports:/config/reports ${docker_image_path}/${image_name}:drchecker python3 ./dr.py --GERRIT_USER ${GERRIT_USER} --GERRIT_API_KEY 'Lxszgui71aPyTO2p3A5C' --JENKINS_USER ${JENKINS_USER} --JENKINS_API_KEY 'Lxszgui71aPyTO2p3A5C' --SPECIFIC_DESIGN_RULE ${SPECIFIC_DESIGN_RULE}"
            
                
            }
        }
        }
        

	    post {
            success {
                script {
                        sh 'echo "success"'
                        sh "ls"
                }
            }
        failure {
            script {
                sh 'echo "failed"'
            }
            }
            always {
                script{
                    
                    archiveArtifacts 'reports/SpecificDR.txt' 
                    archiveArtifacts 'reports/SpecificDR.html' 
                    archiveArtifacts 'reports/GroupByDR_sglist.txt'
                    archiveArtifacts 'reports/GroupByDR_sglist.html' 
                    archiveArtifacts 'reports/DRsummary_status.txt'
                    archiveArtifacts 'reports/DRsummary_status.html'
                }
            }
        }
}
   


// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>