<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enm-e2e-build - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>@midnight</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = &apos;armdocker.rnd.ericsson.se/proj_oss_releases/enm/eric-am-package-manager:dTORF-442495&apos;
def metadataImage = &apos;armdocker.rnd.ericsson.se/proj_oss_releases/enm/adp-int-helm-chart-auto:ultimate&apos;

def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = &apos;lciadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;lciadm100@ericsson.com&apos;
def failedStage = &apos;&apos;

pipeline {
    agent {
        label &apos;Cloud-Native&apos;
    }
    environment{
        repositoryUrl = &quot;https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/&quot;
        CSAR_PACKAGE_NAME = &quot;enm-installation-package&quot;
    }
    stages {
       stage (&apos;Clean workspace&apos;) {
          steps {
                script {
                          sh &quot;docker image prune -fa&quot;
               }
            deleteDir()
         }
       }
       stage(&apos;Checkout Cloud-Native CSAR Git Repository&apos;) {
            steps {
                git branch: &apos;master&apos;,
                        url: &apos;ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package&apos;
            }
        }
        stage( &apos;Pre Configurations&apos; ) {
            steps {
                 script{
                        sh &apos;mkdir -p ${PWD}/charts&apos;
                    }
            }
        }
        stage(&apos;Get Integration Chart&apos;){
                steps{
                     sh &apos;curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-1.0.18-8.tgz -o charts/eric-enm-bro-integration-1.0.18-8.tgz&apos;
                     
            }
        }
        stage(&apos;integration value version&apos;){
            steps{
                script {
                     sh &apos;curl https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-integration-values/eric-enm-integration-functional-test-values-1.1.83-19.yaml -o scripts/eric-enm-integration-functional-test-values-1.1.83-19.yaml&apos;
                      }
                }
        }
        stage(&apos;Retrieve version prefix&apos;) {
            steps {
                script {
                    env.VERSION_PREFIX = sh(script: &quot;cat VERSION_PREFIX&quot;, returnStdout:true).trim()
                    echo &quot;${VERSION_PREFIX}&quot;
                }
            }
        }
        stage(&apos;Update manifest details&apos;) {
            steps {
                script {
                    env.NOW = sh(script: &quot;date +&apos;%FT%TZ&apos;&quot;, returnStdout:true).trim()
                    echo &quot;${NOW}&quot;
                    sh &quot;sed -i -e &apos;/^vnf_package_version:/s/.*/vnf_package_version: $VERSION_PREFIX/&apos; -e &apos;/^vnf_release_date_time:/s/.*/vnf_release_date_time: $NOW/&apos; manifest/enm_descriptor.mf&quot;
                    sh(&quot;cat manifest/enm_descriptor.mf&quot;)
                    
                }
            }
        }
        stage(&apos;Build CSAR Package&apos;) {
            steps {
                script {
                        def AMPackageWithCsar = new AMPackageCommand()
                                .AMPackageImage(defaultAMPackageImage)
                                .needDockerSocket(true)
                                .envVars([&apos;ENM_INSTALLATION_CHART_VERSION&apos;: env.INFRA_CHART_VERSION,
                                          &apos;INTEGRATION_VALUE_VERSION&apos;: env.INTEGRATION_VALUE_VERSION,
                                ])
                                .toString()
                        sh &quot;${AMPackageWithCsar} generate -hd charts/ --name ${CSAR_PACKAGE_NAME}-${env.VERSION_PREFIX} -sc scripts -mf manifest/enm_descriptor.mf&quot;
                }
            }
        }
        stage(&apos;Generate CSAR Parameters&apos;) {
            steps {
                script {
                            sh &apos;echo &quot;CSAR_PACKAGE_VERSION=${VERSION_PREFIX}&quot; &gt; artifact.properties&apos;
                            sh &apos;echo &quot;BRO_CHART_VERSION=${BRO_CHART_VERSION}&quot; &gt;&gt; artifact.properties&apos;
                            sh &apos;echo &quot;PRE_DEPLOY_VERSION=${PRE_DEPLOY_CHART_VERSION}&quot; &gt;&gt; artifact.properties&apos;
                            sh &apos;echo &quot;INTEGRATION_VALUE_VERSION=${INTEGRATION_VALUE_VERSION}&quot; &gt;&gt; artifact.properties&apos;
                            archiveArtifacts &apos;artifact.properties&apos;
                }
            }
        }

        stage(&apos;fetch size&apos;) {
            steps {
              script {
               env.filesize = sh(script: &quot;du -h ${CSAR_PACKAGE_NAME}-${VERSION_PREFIX}.csar | cut -f1&quot;, returnStdout: true).trim()
              }
            }
        }
       stage(&apos;Bump Version&apos;) {
            steps {
                script {
                    sh &apos;hostname&apos;
                    Version = readFile &quot;VERSION_PREFIX&quot;
                    sh &apos;docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch&apos;
                    newVersion = readFile &quot;VERSION_PREFIX&quot;
                    env.IMAGE_VERSION = &apos;2&apos;
                    
                }
            }
        }
        stage(&apos;Generate CSAR metadata&apos;) {
            steps {
                script {
				        sh &apos;git rev-parse --short HEAD &gt; commit-hash&apos; 
                        def AMPackageWithCsarMetadata = new AMPackageCommand()
                                .AMPackageImage(metadataImage)
                                .needDockerSocket(true)
                                .envVars([&apos;INFRA_CHART_VERSION&apos;: env.INFRA_CHART_VERSION,
                                          &apos;STATELESS_CHART_VERSION&apos;: env.STATELESS_CHART_VERSION,
                                ])
                                .toString()
                        sh &quot;${AMPackageWithCsarMetadata} generate-csar-metadata-artifacts --int-chart-repo https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/ --iso-version 9 --int-chart-location charts --int-values-file-repo https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-integration-values/ --int-values-file-location scripts --csar-package-version 3v --file_size ${filesize} --base-csar-repo  https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/cENM/csar/enm-installation-package/ --product-set 27 --name csar&quot;
                        archiveArtifacts &apos;csar-metadata-artifacts.json&apos;
                }
            }
        }		
    }
    post{
        failure {
            mail to: &apos;rami.kovvuri@tcs.com&apos;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class AMPackageCommand {
    def AMPackageImage = &apos;AMPackage.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)
        def cmd = &quot;&quot;&quot;\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${AMPackageImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>