<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Creation of CSAR Package - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>SLAVE</name>
          <description>Jenkins CSAR slave options</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Transformation_CSAR_Slave_4Node</string>
              <string>Cloud-Native</string>
              <string>enm_cn_ci_openstack-16102020-10</string>
              <string>Jenkins_CN_Design_Totoro_13</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_3</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_27</string>
              <string>Jenkins_cENM_Design_Teams_TAF1_Slave_4Node_8</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_6</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_2</string>
              <string>Jenkins_Trojan_CSAR_Slave_7</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MONITORING_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILD_TYPE</name>
          <description>automatic picks the charts and values from internal area. Whearas manual picks the charts and values from chart directory of csar repo.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>automatic</string>
              <string>manual</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INTEGRATION_VALUE_FILE</name>
          <description>This parameter will work for the automatic BUILD_TYPE and whichever value is chosen that file will be written as production values and further process will continue.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-kaas-core-values</string>
              <string>eric-enm-integration-openstack-core-values</string>
              <string>eric-enm-integration-functional-kaas-values</string>
              <string>eric-enm-integration-functional-test-values</string>
              <string>eric-enm-integration-production-values</string>
              <string>eric-enm-integration-extra-large-production-values</string>
              <string>eric-enm-single-instance-production-integration-values</string>
              <string>eric-enm-multi-instance-functional-integration-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>provide sprint value</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.28'
def metadataImage = 'armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest'
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()
def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''
def check_version_a_newer_than_version_b(latest_productset_version,old_productset_version) {
    if(latest_productset_version &gt; old_productset_version){
        return true
    } else{
        return false
    }
}
def overrideIntegrationValues(){
    try {
        filename = "scripts/${integration_values}"
        values = readYaml file: filename

        bro = "eric-enm-bro-integration"
        sh "tar -zxf charts/${bro}-${BRO_CHART_VERSION}.tgz"
        pre_deploy = "eric-enm-pre-deploy-integration"
        sh "tar -zxf charts/${pre_deploy}-${PRE_DEPLOY_CHART_VERSION}.tgz"

        monitoring = "eric-enm-monitoring-integration"
        sh "tar -zxf charts/${monitoring}-${MONITORING_CHART_VERSION}.tgz"

        if (values."eric-ctrl-bro".containsKey("imageCredentials"))
            values."eric-ctrl-bro".imageCredentials.repoPath = "proj-enm/proj-adp-eric-ctrl-bro-drop"
        else
            values."eric-ctrl-bro".imageCredentials = ["repoPath": "proj-enm/proj-adp-eric-ctrl-bro-drop"]

        if (values."eric-pm-server".containsKey("imageCredentials"))
            values."eric-pm-server".imageCredentials.repoPath = "proj-enm/proj-common-assets-cd/monitoring/pm"
        else
            values."eric-pm-server".imageCredentials = ["repoPath": "proj-enm/proj-common-assets-cd/monitoring/pm"]

        if (values."eric-pm-alert-manager".containsKey("imageCredentials"))
            values."eric-pm-alert-manager".imageCredentials.repoPath = "proj-enm/proj-adp-pm-alert-manager-drop"
        else
            values."eric-pm-alert-manager".imageCredentials = ["repoPath": "proj-enm/proj-adp-pm-alert-manager-drop"]

        if (values."eric-pm-node-exporter".containsKey("imageCredentials"))
            values."eric-pm-node-exporter".imageCredentials.repoPath = "proj-enm/proj_kds/erikube"
        else
            values."eric-pm-node-exporter".imageCredentials = ["repoPath": "proj-enm/proj_kds/erikube"]

        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        error "$err"
    }
}
pipeline {
    agent {
            node
            {
            label SLAVE
            }
        }
    environment{
        repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        CSAR_PACKAGE_NAME = "enm-installation-package"
        BRO_CLI_IMAGE = "backup-restore-cli:latest"
        BRO_CLI_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
    }
    stages {
       stage ('Clean workspace') {
          steps {
                script {
                          sh "docker image prune -fa"
               }
            deleteDir()
         }
       }
       stage('Checkout Cloud-Native CSAR Git Repository') {
            steps {
                git branch: 'dTORF-528540',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-installation'
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                        sh 'cp settings.xml ${HOME}/.m2/'
                        env.VNF_RELEASE_DATE_TIME = sh(script: "date +'%FT%T%:z'", returnStdout: true).trim()
                        echo "${VNF_RELEASE_DATE_TIME}"
                        env.ENM_RSTATE_NUMBER = sh(script: 'wget -q -O - --no-check-certificate "https://ci-portal.seli.wh.rnd.internal.ericsson.com/getAOMRstate/?product=ENM&amp;drop=${SPRINT_TAG}"', returnStdout: true).trim()
                        echo "${ENM_RSTATE_NUMBER}"
                 }
            }
        }
        stage('Get integration charts'){
            steps {
                script {
                   sh 'echo "drop=${SPRINT_TAG}" '
                   echo "Extracting the jq software"
                   sh "tar -xvf Software/jq-1.0.1.tar ; chmod +x ./jq"
                   get_cn_build_version_info()
                   download_charts_ci_internal()
                   remove_tgz_with_artifacts()
                 }
            }
        }
        stage('Generate new version') {
            steps {
            sh "${bob} generate-new-version"
                script {
                    env.VERSION = sh(script: "cat .bob/var.version", returnStdout:true).trim()
                    echo "${VERSION}"
                    env.RSTATE = sh(script: "cat .bob/var.rstate", returnStdout:true).trim()
                    echo "${RSTATE}"
                    env.VNF_PACKAGE_VERSION = sh(script: "echo CXP9041414_$VERSION", returnStdout:true).trim()
                    echo "$VNF_PACKAGE_VERSION"
                }
            }
        }
        stage('Packaging of Additional images') {
             steps {
                script {
                    sh 'docker pull ${OPENIDM_IMAGE_PATH}/${OPENIDM}'
                    sh 'docker pull ${PASSKEY_IMAGE_PATH}/${PASSKEY}'
                    sh 'docker tag  ${OPENIDM_IMAGE_PATH}/${OPENIDM} ${OPENIDM}'
                    sh 'docker tag  ${PASSKEY_IMAGE_PATH}/${PASSKEY} ${PASSKEY}'
                    sh 'docker save ${OPENIDM} -o scripts/eric-enm-openidm-change-password-docker.tar'
                    sh 'docker save ${PASSKEY} -o scripts/eric-enm-securestorage-regen-passkey-docker.tar'
                    sh 'gzip scripts/eric-enm-securestorage-regen-passkey-docker.tar'
                    sh 'gzip scripts/eric-enm-openidm-change-password-docker.tar'
                }
            }
            post {
                always {
                    sh 'docker image remove ${OPENIDM}'
                    sh 'docker image remove ${PASSKEY}'
                    sh 'docker image remove ${OPENIDM_IMAGE_PATH}/${OPENIDM}'
                    sh 'docker image remove ${PASSKEY_IMAGE_PATH}/${PASSKEY}'
                }
            }
        }        
        }
        stage('Override integration-values file') {
            steps {
                script {
                    env.integration_values=sh (script: "ls scripts |grep eric-enm-integration-production-values*", returnStdout: true ).trim()
                    overrideIntegrationValues()
                    if("${PRODUCT_SET}" &gt; "21.08.74"){
                       env.integration_values=sh (script: "ls scripts |grep eric-enm-integration-extra-large-production-values*", returnStdout: true ).trim()
                       overrideIntegrationValues()
                    }
                }
            }
        }
    }
    post {
        failure {
            mail to: 'teja.balla1@tcs.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class AMPackageCommand {
    def AMPackageImage = 'AMPackage.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${AMPackageImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:1.5.2-0'
    def envVars = [:]
    def needDockerSocket = false
    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' \$group; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>