<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPO_NAME</name>
          <description></description>
          <defaultValue>example</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>REPO_TYPE</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Service_Group</string>
              <string>BAse_Image</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PARENT_GROUP_RIGHTS</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>OSS/ENM-Parent</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JIRA_TICKET</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_NUMBER</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>helm_dep_up</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>merge_values</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>sg_rpm_repo</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>lint_br_agent</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>python_unit_test</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>yum_swap</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>skip_PCR_DSL</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>skip_Release_DSL</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>e2e_enable</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>skip_pointfix_DSL</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>e2e_pointfix_enable</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HLC_enable</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>HLC_pointfix_enable</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

CI_REPO=&quot;OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline&quot;
ARCH_REPO=&quot;OSS/com.ericsson.oss.containerisation/enm-cn-ci-pipeline-archtype-generator&quot;

git clone ${GERRIT_MIRROR}/${ARCH_REPO}
git clone ${GERRIT_MIRROR}/${CI_REPO}

REPO=${REPO_NAME// /}
ARTIFACT_ID=${REPO##*/}
ARCH_ARTIFACT_ID=${ARCH_REPO##*/}
PARENT_GROUP_RIGHTS=${PARENT_GROUP_RIGHTS// /}

#define Gerrit guardian groups
GUARD_GROUP_NAME=&quot;CTF_guard Cloud_Native_TC_Group cENM_Guard&quot;
GURAD_GROUP1=&quot;CTF_guard&quot;
GURAD_GROUP2=&quot;Cloud_Native_TC_Group&quot;
GURAD_GROUP3=&quot;cENM_Guard&quot;

echo &quot;Tell $ARTIFACT_ID&quot;

echo &quot;*******************Creating the repository in Gerrit*****************&quot;

echo &quot;*******************Creating repository &quot;$REPO&quot; with required master branch only********************&quot;

GERRIT_CENTRAL_HOST=$(echo ${GERRIT_CENTRAL} | sed -e &apos;s/ssh:\/\/\(.*\):29418/\1/&apos;)

ssh -p 29418 ${GERRIT_CENTRAL_HOST} gerrit ls-projects | grep -Fx ${REPO}

if [ $? -eq 0 ]; then
    echo &quot;${REPO} already existing&quot;
else
    echo &quot;Proceed to ${REPO} creation&quot;
    ssh -p 29418 ${GERRIT_CENTRAL_HOST} self-service create-project --parent ${PARENT_GROUP_RIGHTS} ${REPO} -b master --empty-commit -o CI_Infrastructure_ENM_admin || { echo &apos;ERROR: Check Job Parameters&apos;; exit 1; }
fi

echo &quot;*******************Adding access rights for &quot;${GUARD_GROUP_NAME}&quot;*******************&quot;

mkdir test
cd test
git init

git pull ${GERRIT_CENTRAL}/${REPO} refs/meta/config

#manage multiple guardian groups
IFS=&apos; &apos; read -ra ADDR &lt;&lt;&lt; &quot;${GUARD_GROUP_NAME}&quot;
for group in &quot;${ADDR[@]}&quot;; do
    ssh -p 29418 ${GERRIT_CENTRAL_HOST} gerrit ls-groups -v | grep ${group} &gt; output.txt
    GroupID_Sub=$(grep ^${group} output.txt | cut -f 2)
    rm output.txt
    echo -e &quot;${GroupID_Sub}\t${group}&quot; &gt;&gt; groups
done

git add .
git commit -m &quot;${JIRA_TICKET}: Added new group&quot;
git push ${GERRIT_CENTRAL}/${REPO} HEAD:refs/meta/config

echo &quot;************* groups file pushed **************&quot;
echo &quot;*************config file push******************&quot;


rm -rf project.config

echo -e &quot;[access]
        inheritFrom = ${PARENT_GROUP_RIGHTS}
[access \&quot;refs/*\&quot;]
        owner = group CI_Infrastructure_ENM_admin&quot; &gt; project.config

echo -e &quot;create = group ${GURAD_GROUP1}&quot; &gt;&gt; project.config;
echo -e &quot;create = group ${GURAD_GROUP2}&quot; &gt;&gt; project.config;
echo -e &quot;forgeCommitter = group ${GURAD_GROUP1}&quot; &gt;&gt; project.config;
echo -e &quot;forgeCommitter = group ${GURAD_GROUP2}&quot; &gt;&gt; project.config;
echo -e &quot;pushTag = group ${GURAD_GROUP1}&quot; &gt;&gt; project.config;
echo -e &quot;pushTag = group ${GURAD_GROUP2}&quot; &gt;&gt; project.config;
echo -e &quot;label-Code-Review = -2..+2 group ${GURAD_GROUP1}&quot; &gt;&gt; project.config;
echo -e &quot;label-Code-Review = -2..+2 group ${GURAD_GROUP2}&quot; &gt;&gt; project.config;
echo -e &quot;label-Code-Review = -2..+2 group ${GURAD_GROUP3}&quot; &gt;&gt; project.config;
echo -e &quot;label-Verified = -1..+1 group ${GURAD_GROUP1}&quot; &gt;&gt; project.config;
echo -e &quot;label-Verified = -1..+1 group ${GURAD_GROUP2}&quot; &gt;&gt; project.config;
echo -e &quot;label-Verified = -1..+1 group ${GURAD_GROUP3}&quot; &gt;&gt; project.config;
echo -e &quot;rebase = group ${GURAD_GROUP1}&quot; &gt;&gt; project.config;
echo -e &quot;rebase = group ${GURAD_GROUP2}&quot; &gt;&gt; project.config;
echo -e &quot;submit = group ${GURAD_GROUP3}&quot; &gt;&gt; project.config;

echo -e &quot;[project]
        description = 
[receive]
        requireChangeId = true
[submit]
        action = fast forward only
        mergeContent = false
[access \&quot;refs/for/refs/heads/master\&quot;]&quot; &gt;&gt; project.config

echo -e &quot;pushMerge = group ${GURAD_GROUP3}&quot; &gt;&gt; project.config;

echo -e &quot;[access \&quot;refs/heads/master\&quot;]&quot; &gt;&gt; project.config

echo -e &quot;push = group ${GURAD_GROUP3}&quot; &gt;&gt; project.config;
echo -e &quot;exclusiveGroupPermissions = push pushMerge&quot; &gt;&gt; project.config;
echo -e &quot;pushMerge = group ${GURAD_GROUP3}&quot; &gt;&gt; project.config;

echo -e &quot;[plugin \&quot;eiffel\&quot;]
        enabled = true
        rmq-domain = eiffel004.camo.gerrit
        rmq-exchange = mb401-eiffel004
        rmq-server = amqp://mb401-eiffel004.mo.ca.am.ericsson.se:5672&quot; &gt;&gt; project.config

git add .
git commit -m &quot;${JIRA_TICKET}: Added access controls&quot;
git push ssh://gerrit.ericsson.se:29418/${REPO} HEAD:refs/meta/config
cd ..
rm -rf test/

echo &quot;*******************Running Archetype Generator Tool*****************&quot;
git clone ssh://gerrit.ericsson.se:29418/${REPO}

cd ${ARCH_ARTIFACT_ID}
docker build . -t archgen_pcr
docker run --entrypoint &quot;sh&quot; -v ${WORKSPACE}/temporary_folder:/data/output archgen_pcr -c &quot;python run.py --service_name  $ARTIFACT_ID --service_type 0 --service_description TestSG --path_of_archtype /data/output --product_number 123456 --is_depend_on_jboss_base_image n&quot;

cd ..
cp -r temporary_folder/${ARTIFACT_ID}/* ${ARTIFACT_ID}
cd ${ARTIFACT_ID}

git add --all
git commit -m &quot;${JIRA_TICKET}: Adding artifacts/archetype&quot;
git push

echo &quot;************* end ******************&quot;

echo REPO=${REPO} &gt; ${WORKSPACE}/env.properties
echo CI_REPO=${CI_REPO} &gt;&gt; ${WORKSPACE}/env.properties

#calculate dropback sprint number
SPR_MAJOR_VERSION=$(echo ${SPRINT_NUMBER} | awk -F&quot;.&quot; &apos;{print $1}&apos;)
SPR_MINOR_VERSION=$(echo ${SPRINT_NUMBER} | awk -F&quot;.&quot; &apos;{print $2}&apos;)


SPR_MINOR_VERSION_1=$(expr ${SPR_MINOR_VERSION} - 1)
if [ &quot;${SPR_MINOR_VERSION}&quot; -le 10 ] ; then 
   echo DROPBACK_SPRINT_NUMBER=&quot;${SPR_MAJOR_VERSION}.0${SPR_MINOR_VERSION_1}&quot; &gt;&gt; ${WORKSPACE}/env.properties
else
   echo DROPBACK_SPRINT_NUMBER=&quot;${SPR_MAJOR_VERSION}.${SPR_MINOR_VERSION_1}&quot; &gt;&gt; ${WORKSPACE}/env.properties
fi</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.78.3">
      <scriptText>import java.io.File

create_repo()

def create_repo() {
if ( skip_Release_DSL == &quot;false&quot; ) {
createPipelineBuildJob(REPO_NAME)
}
if ( skip_Release_DSL == &quot;true&quot; ) {
createPipelineBuildJob_from_Repo(REPO_NAME)
}
if ( skip_PCR_DSL == &quot;false&quot; ) {
createPipelineBuildJobPre(REPO_NAME)
}
if ( skip_PCR_DSL == &quot;true&quot; ) {
createPipelineBuildJobPre_from_Repo(REPO_NAME)
}
}

def createPipelineBuildJob(project_name) {
    jenkinsFile_path = &apos;enm-containerisation-ci-pipeline/jenkins/jobDSL/&apos;
    pipeline_name = project_name.split(&apos;/&apos;).last()
    chart_dir = project_name.split(&apos;/&apos;).last()
    if(REPO_TYPE == &quot;Base_Image&quot;) {
        jenkinsfile = jenkinsFile_path + &apos;common_jenkinsfile_baseImages&apos;
    }
    else if(REPO_TYPE == &quot;Service_Group&quot;) {
        jenkinsfile = jenkinsFile_path + &apos;common_jenkinsfile_sg&apos;
    }
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
        	stringParam(&apos;REPO&apos;, REPO, &apos;Project name&apos;)
        }
        logRotator {
            numToKeep(30)
        }
		environmentVariables {
              env(&apos;REPO&apos;, project_name)
              env(&apos;CHART_DIR&apos;, chart_dir)
              env(&apos;PROJECT_TYPE&apos;, REPO_TYPE)
              env(&apos;HELM_DEP_UP&apos;,helm_dep_up)
              env(&apos;MERGE_VALUES&apos;,merge_values)
              env(&apos;SG_RPM_REPO&apos;,sg_rpm_repo)
              env(&apos;LINT_BR_AGENT&apos;,lint_br_agent)
              env(&apos;PYTHON_UNIT_TEST&apos;,python_unit_test)
              env(&apos;YUM_SWAP&apos;,yum_swap)
              env(&apos;SKIP_PCR_DSL&apos;,skip_PCR_DSL)
              env(&apos;SKIP_RELEASE_DSL&apos;,skip_Release_DSL)
              env(&apos;E2E_ENABLE&apos;,e2e_enable)
              env(&apos;SKIP_POINTFIX_DSL&apos;,skip_pointfix_DSL)
              env(&apos;E2E_POINTFIX_ENABLE&apos;,e2e_pointfix_enable)
              env(&apos;HLC_ENABLE&apos;,HLC_enable)
              env(&apos;HLC_POINTFIX_ENABLE&apos;,HLC_pointfix_enable)
              env(&apos;SKIP_HLC_DSL&apos;,skip_HLC_DSL)
              env(&apos;SKIP_HLC_POINTFIX_DSL&apos;,skip_HLC_pointfix_DSL)
        }
        definition {
            cps {
				script(readFileFromWorkspace(jenkinsfile))
				sandbox(true)
            }
        }
    }
}
def createPipelineBuildJob_from_Repo(project_name) {
    chart_dir = project_name.split(&apos;/&apos;).last()
    pipeline_name = project_name.split(&apos;/&apos;).last()
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
            stringParam(&apos;ISO_VERSION&apos;)
            stringParam(&apos;BRANCH&apos;)
        }
        logRotator {
            numToKeep(30)
        }
        environmentVariables {
            env(&apos;REPO&apos;, project_name)
            env(&apos;CHART_DIR&apos;, chart_dir)
        }		
        definition {
            cpsScm {
                scm {
                    git {
                        branch(&apos;${BRANCH}&apos;)
                        remote {
                            credentials(&apos;lciadm100_private_key&apos;)
                            url(&quot;${GERRIT_MIRROR}/&quot; + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath(&quot;Jenkinsfile&quot;)
            }
        }
   }
}

def createPipelineBuildJobPre(project_name) {
    GERRIT_MIRROR_SSH = &quot;ssh://lciadm100@gerritmirror-ha.lmera.ericsson.se:29418/&quot;
    pipeline_name = project_name.split(&apos;/&apos;).last()
    pipeline_job = pipeline_name + &apos;_precommit&apos;
    chart_dir = project_name.split(&apos;/&apos;).last()
	jenkinsFile_path = &apos;enm-containerisation-ci-pipeline/jenkins/jobDSL/&apos;
	if(REPO_TYPE == &quot;Base_Image&quot;) {
        jenkinsfile = jenkinsFile_path + &apos;common_baseImages_jenkinsfile_precommit&apos;
    }
    else if(REPO_TYPE == &quot;Service_Group&quot;) {
	    jenkinsfile = jenkinsFile_path + &apos;common_jenkinsfile_precommit_sg&apos;
    }
    pipelineJob(pipeline_job) {
      description (&apos;ENM Cloud Native precommit pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
      concurrentBuild(allowConcurrentBuild = false)
      //disabled()
	  environmentVariables {
              env(&apos;REPO&apos;, project_name)
              env(&apos;CHART_DIR&apos;, chart_dir)
              env(&apos;PROJECT_TYPE&apos;, REPO_TYPE)
              env(&apos;HELM_DEP_UP&apos;,helm_dep_up)
              env(&apos;MERGE_VALUES&apos;,merge_values)
              env(&apos;SG_RPM_REPO&apos;,sg_rpm_repo)
              env(&apos;LINT_BR_AGENT&apos;,lint_br_agent)
              env(&apos;PYTHON_UNIT_TEST&apos;,python_unit_test)
              env(&apos;YUM_SWAP&apos;,yum_swap)
              env(&apos;SKIP_PCR_DSL&apos;,skip_PCR_DSL)
              env(&apos;SKIP_RELEASE_DSL&apos;,skip_Release_DSL)
              env(&apos;E2E_ENABLE&apos;,e2e_enable)
              env(&apos;SKIP_POINTFIX_DSL&apos;,skip_pointfix_DSL)
              env(&apos;E2E_POINTFIX_ENABLE&apos;,e2e_pointfix_enable)
              env(&apos;HLC_ENABLE&apos;,HLC_enable)
              env(&apos;HLC_POINTFIX_ENABLE&apos;,HLC_pointfix_enable)
              env(&apos;SKIP_HLC_DSL&apos;,skip_HLC_DSL)
              env(&apos;SKIP_HLC_POINTFIX_DSL&apos;,skip_HLC_pointfix_DSL)
      }
      triggers {
          gerrit {
              events {
                  patchsetCreated()
              }
              project(&apos;plain:&apos; + project_name, [&apos;plain:master&apos;])
          }
      }
      definition {
            cps {
                script(readFileFromWorkspace(jenkinsfile))
                sandbox(true)
            }
        }
    }
}

def createPipelineBuildJobPre_from_Repo(project_name) {
    GERRIT_MIRROR_SSH = &quot;ssh://lciadm100@gerritmirror-ha.lmera.ericsson.se:29418/&quot;
    pipeline_name = project_name.split(&apos;/&apos;).last()
    pipeline_job = pipeline_name + &apos;_precommit&apos;
    chart_dir = project_name.split(&apos;/&apos;).last()
    pipelineJob(pipeline_job) {
      description (&apos;ENM Cloud Native precommit pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
      concurrentBuild(allowConcurrentBuild = false)
      //disabled()
	  environmentVariables {
              env(&apos;REPO&apos;, project_name)
              env(&apos;CHART_DIR&apos;, chart_dir)
      }
      triggers {
          gerrit {
              events {
                  patchsetCreated()
              }
              project(&apos;plain:&apos; + project_name, [&apos;plain:master&apos;])
          }
      }
      definition {
            cpsScm {
                scm {
                    git {
                        branch(&apos;${BRANCH}&apos;)
                        remote {
                            credentials(&apos;lciadm100_private_key&apos;)
                            url(&quot;${GERRIT_MIRROR}/&quot; + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath(&quot;Jenkinsfile_precommit&quot;)
            }
        }
    }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

CI_REPO=&quot;OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline&quot;

PROJECT_NAME=${CI_REPO##*/}

GERRIT_MIRROR_HOST=$(echo ${GERRIT_MIRROR} | sed -e &apos;s/ssh:\/\/\(.*\):29418/\1/&apos;)
rm -rf ${PROJECT_NAME}
git clone ${GERRIT_MIRROR}/${CI_REPO} &amp;&amp; scp -p -P 29418 ${GERRIT_MIRROR_HOST}:hooks/commit-msg ${PROJECT_NAME}/.git/hooks/

cd ${PROJECT_NAME}
git checkout dTORF-401748

if [[ &quot;${REPO_TYPE}&quot; == &quot;Service_Group&quot; ]]; then
    jenkinsfile_release=&quot;jenkins/jobDSL/common_jenkinsfile_serviceGroup&quot;
    jenkinsfile_pcr=&quot;jenkins/jobDSL/common_jenkinsfile_serviceGroup_precommit&quot;
    jenkinsfile_pointfix=&quot;jenkins/jobDSL/common_pointfix_serviceGroup&quot;
else
  jenkinsfile_release=&quot;jenkins/jobDSL/common_jenkinsfile_baseImages&quot;
  jenkinsfile_pcr=&quot;jenkins/jobDSL/common_jenkinsfile_baseImages_precommit&quot;
  jenkinsfile_pointfix=&quot;jenkins/jobDSL/common_pointfix_baseImages&quot;
fi
sed -i &apos;$d&apos; jenkins/projectfile.json
sed -i &apos;$d&apos; jenkins/projectfile.json
echo &quot;    },&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;    {&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;repo\&quot;:\&quot;$REPO_NAME\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;project_type\&quot;:\&quot;$REPO_TYPE\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;helm_dep_up\&quot;:\&quot;$helm_dep_up\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;merge_values\&quot;:\&quot;$merge_values\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;sg_rpm_repo\&quot;:\&quot;$sg_rpm_repo\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;lint_br_agent\&quot;:\&quot;$lint_br_agent\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;python_unit_test\&quot;:\&quot;$python_unit_test\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;jenkinsfile_release\&quot;:\&quot;$jenkinsfile_release\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;jenkinsfile_pcr\&quot;:\&quot;$jenkinsfile_pcr\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;jenkinsfile_pointfix\&quot;:\&quot;$jenkinsfile_pointfix\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;yum_swap\&quot;:\&quot;$yum_swap\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;skip_PCR_DSL\&quot;:\&quot;$skip_PCR_DSL\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;skip_Release_DSL\&quot;:\&quot;$skip_Release_DSL\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;skip_pointfix_DSL\&quot;:\&quot;$skip_pointfix_DSL\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;E2E_Enable\&quot;:\&quot;$e2e_enable\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;E2E_pointfix_enable\&quot;:\&quot;$e2e_pointfix_enable\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;        \&quot;HLC_enable\&quot;:\&quot;$HLC_enable\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
if [[ &quot;${REPO_TYPE}&quot; == &quot;Base_Image&quot; ]]; then
    echo &quot;        \&quot;E2E_Order\&quot;:\&quot;$E2E_Order\&quot;,&quot; &gt;&gt; jenkins/projectfile.json
fi
echo &quot;        \&quot;HLC_pointfix_enable\&quot;:\&quot;$HLC_pointfix_enable\&quot;&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;    }&quot; &gt;&gt; jenkins/projectfile.json
echo &quot;]&quot; &gt;&gt; jenkins/projectfile.json

if [[ &quot;${e2e_enable}&quot; == &quot;true&quot; &amp;&amp; &quot;${HLC_enable}&quot; == &quot;false&quot; ]]; then
    COMMIT_MESSAGE=&quot;${JIRA_TICKET}: Add new repo to the json file and repo is enabled in e2e flow&quot;
elif [[ &quot;${HLC_enable}&quot; == &quot;true&quot; &amp;&amp; &quot;${e2e_enable}&quot; == &quot;true&quot; ]]; then
    COMMIT_MESSAGE=&quot;${JIRA_TICKET}: Add new repo to the json file and repo is enabled in e2e flow and enabled in HLC flow&quot;
else
    COMMIT_MESSAGE=&quot;${JIRA_TICKET}: Add new repo to the json file&quot;
fi

git add --all
git commit -m &quot;${COMMIT_MESSAGE}&quot;
git remote set-url origin --push ${GERRIT_CENTRAL}/${CI_REPO}
git push origin HEAD:refs/for/dTORF-401748/VALIDATION &gt; review_message.txt 2&gt;&amp;1
cat review_message.txt

REVIEW_DETAILS=$(grep -F &quot;${COMMIT_MESSAGE}&quot; review_message.txt | tr -s &quot; &quot;)
REVIEW_LINK1=$(cut -d&apos; &apos; -f2 &lt;&lt;&lt;&quot;${REVIEW_DETAILS}&quot;)

echo REVIEW_DATE=$(date &quot;+%d-%m-%Y&quot;) &gt;&gt; ${WORKSPACE}/env.properties
echo REVIEW_LINK1=${REVIEW_LINK1} &gt;&gt; ${WORKSPACE}/env.properties</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.4.0">
      <info>
        <propertiesFilePath>${WORKSPACE}/env.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.16.1">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.5">
            <worstResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <com.myyearbook.hudson.plugins.confluence.ConfluencePublisher plugin="confluence-publisher@2.0.6">
              <siteName>confluence-oss.seli.wh.rnd.internal.ericsson.com</siteName>
              <spaceName>ENMT</spaceName>
              <pageName>cENM DQ sprint ${SPRINT_NUMBER}</pageName>
              <attachArchivedArtifacts>true</attachArchivedArtifacts>
              <buildIfUnstable>false</buildIfUnstable>
              <replaceAttachments>false</replaceAttachments>
              <parentId>0</parentId>
              <editors>
                <com.myyearbook.hudson.plugins.confluence.wiki.editors.BeforeTokenEditor>
                  <generator class="com.myyearbook.hudson.plugins.confluence.wiki.generators.PlainTextGenerator">
                    <text>  &lt;tr&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;${JIRA_TICKET}&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Review&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;${REVIEW_DATE}&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Chakras&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;NA&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;
&lt;a href=&quot;${REVIEW_LINK1}&quot; rel=&quot;nofollow&quot; style=&quot;text-decoration: none;text-align: left;&quot;&gt;${REVIEW_LINK1}&lt;/a&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;linked to the corresponding newly created release job for new repo added &lt;/td&gt;
  &lt;/tr&gt;</text>
                  </generator>
                  <markerToken>&lt;/tbody&gt;&lt;/table&gt;</markerToken>
                </com.myyearbook.hudson.plugins.confluence.wiki.editors.BeforeTokenEditor>
              </editors>
            </com.myyearbook.hudson.plugins.confluence.ConfluencePublisher>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
    <com.myyearbook.hudson.plugins.confluence.ConfluencePublisher plugin="confluence-publisher@2.0.6">
      <siteName>confluence-oss.seli.wh.rnd.internal.ericsson.com</siteName>
      <spaceName>ECN</spaceName>
      <pageName>cENM Dropback sprint ${DROPBACK_SPRINT_NUMBER}</pageName>
      <attachArchivedArtifacts>true</attachArchivedArtifacts>
      <buildIfUnstable>false</buildIfUnstable>
      <replaceAttachments>false</replaceAttachments>
      <parentId>0</parentId>
      <editors>
        <com.myyearbook.hudson.plugins.confluence.wiki.editors.BeforeTokenEditor>
          <generator class="com.myyearbook.hudson.plugins.confluence.wiki.generators.PlainTextGenerator">
            <text>  &lt;tr&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;${JIRA_TICKET}&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Review&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;${REVIEW_DATE}&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Chakras&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;NA&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;
&lt;a href=&quot;${REVIEW_LINK1}&quot; rel=&quot;nofollow&quot; style=&quot;text-decoration: none;text-align: left;&quot;&gt;${REVIEW_LINK1}&lt;/a&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;linked to the corresponding newly created release job for new repo added &lt;/td&gt;
  &lt;/tr&gt;</text>
          </generator>
          <markerToken>&lt;/tbody&gt;&lt;/table&gt;</markerToken>
        </com.myyearbook.hudson.plugins.confluence.wiki.editors.BeforeTokenEditor>
      </editors>
    </com.myyearbook.hudson.plugins.confluence.ConfluencePublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>