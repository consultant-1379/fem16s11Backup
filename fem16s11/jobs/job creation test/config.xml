<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPO_NAME</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>typ</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Service_Group</string>
              <string>Base_Image</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sprint_number</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INCLUDED</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>HCL</string>
              <string>NO HCL</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://gerritmirror-ha.lmera.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline</url>
        <credentialsId>lciadm100_private_key</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>RHEL6.10_GE_1</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.78.3">
      <scriptText>createPipelineBuildJob(REPO_NAME)
createPipelinePrecommitJob(REPO_NAME)
createPipelineBuildPointfixJob(REPO_NAME)

String pipeline_name
def createPipelineBuildJob(project_name) {
    pipeline_name = project_name.split(&apos;/&apos;).last()
    if(typ == &quot;Base_Image&quot;) {
        jenkinsfile = &apos;jenkins/jobDSL/common_pointfix_baseImages&apos;
    }
    else if(typ == &quot;Service_Group&quot;) {
        if(INCLUDED == &quot;HCL&quot;) {
            jenkinsfile = &apos;jenkins/jobDSL/common_pointfix_sg&apos;
        }
        else if(INCLUDED == &quot;NO HCL&quot;) {
            jenkinsfile = &apos;jenkins/jobDSL/common_pointfix_sg_no_merge_values_no_dep_up&apos;
        }
    }
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        logRotator {
            numToKeep(30)
        }
        definition {
            cps {
                script(readFileFromWorkspace(jenkinsfile))
                sandbox(true)
            }
        }
    }
}

def createPipelinePrecommitJob(project_name){
    pipeline_name = project_name.split(&apos;/&apos;).last()
    pipeline_name = pipeline_name + &apos;-precommit&apos;
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        //disabled()
        triggers {
            gerrit {
                events {
                    patchsetCreated()
                }
                project(&apos;plain:OSS/com.ericsson.oss.containerisation/&apos; + REPO_NAME, [&apos;plain:master&apos;])
            }
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch(&apos;$GERRIT_REFSPEC&apos;)
                        remote {
                            credentials(&apos;lciadm100_private_key&apos;)
                            refspec(&apos;$GERRIT_REFSPEC:$GERRIT_REFSPEC&apos;)
                        }
                    }
                }
                scriptPath(&quot;JenkinsfilePreCommit&quot;)
            }
        }
    }
}

def createPipelineBuildPointfixJob(project_name){
    pipeline_name = project_name.split(&apos;/&apos;).last()
    pipeline_name = pipeline_name + &apos;-pointfix&apos;
    if(typ == &quot;Base_Image&quot;) {
        jenkinsfile = &apos;jenkins/jobDSL/common_pointfix_baseImages&apos;
    }
    else if(typ == &quot;Service_Group&quot;) {
        if(INCLUDED == &quot;HCL&quot;) {
            jenkinsfile = &apos;jenkins/jobDSL/common_pointfix_sg&apos;
        }
        else if(INCLUDED == &quot;NO HCL&quot;) {
            jenkinsfile = &apos;jenkins/jobDSL/common_pointfix_sg_no_merge_values_no_dep_up&apos;
        }
    }
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        logRotator {
            numToKeep(30)
        }
        definition {
            cps {
                script(readFileFromWorkspace(jenkinsfile))
                sandbox(true)               
            }
        }
    }
}
def PipelineName = job(&apos;pipeline_name&apos;) {
    displayName(&apos;pipeline_name&apos;)
}

queue(pipeline_name)</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

REPO=&quot;OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline&quot;
PROJECT_NAME=${REPO##*/}

GERRIT_MIRROR_HOST=$(echo ${GERRIT_MIRROR} | sed -e &apos;s/ssh:\/\/\(.*\):29418/\1/&apos;)
rm -rf ${PROJECT_NAME}
git clone ${GERRIT_MIRROR}/${REPO} &amp;&amp; scp -p -P 29418 ${GERRIT_MIRROR_HOST}:hooks/commit-msg ${PROJECT_NAME}/.git/hooks/

cd ${PROJECT_NAME}

if [[ &quot;${PROJECT_TYPE}&quot; == &quot;Service_Group&quot; ]]; then
   echo -e &quot;\n${REPO_NAME}\n&quot; &gt;&gt; jenkins/projects_service_group
else
   echo -e &quot;\n${REPO_NAME}\n&quot; &gt;&gt; jenkins/projects_common
fi

git add --all
git commit -m &quot;${JIRA_TICKET}: add new repo&quot;
git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
    
git push origin HEAD:refs/for/master
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>echo review_date=$(date &quot;+%d-%m-%Y&quot;) &gt; ${WORKSPACE}/workspace/${JOB_NAME}/env.properties</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@2.4.0">
      <info>
        <propertiesFilePath>${WORKSPACE}/env.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher plugin="flexible-publish@0.16.1">
      <publishers>
        <org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
          <condition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.5">
            <worstResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </worstResult>
            <bestResult>
              <name>SUCCESS</name>
              <ordinal>0</ordinal>
              <color>BLUE</color>
              <completeBuild>true</completeBuild>
            </bestResult>
          </condition>
          <publisherList>
            <com.myyearbook.hudson.plugins.confluence.ConfluencePublisher plugin="confluence-publisher@2.0.6">
              <siteName>confluence-oss.seli.wh.rnd.internal.ericsson.com</siteName>
              <spaceName>ENMT</spaceName>
              <pageName>cENM DQ sprint ${sprint_number}</pageName>
              <attachArchivedArtifacts>false</attachArchivedArtifacts>
              <buildIfUnstable>false</buildIfUnstable>
              <replaceAttachments>false</replaceAttachments>
              <parentId>0</parentId>
              <editors>
                <com.myyearbook.hudson.plugins.confluence.wiki.editors.BeforeTokenEditor>
                  <generator class="com.myyearbook.hudson.plugins.confluence.wiki.generators.PlainTextGenerator">
                    <text>    &lt;tr&gt;
&lt;td colspan=&quot;1&quot;&gt;n&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;No Jira&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Review&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;${review_date}&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Chakras&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;NA&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;Passed&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
&lt;td colspan=&quot;1&quot;&gt;&lt;/td&gt;
    &lt;/tr&gt;</text>
                  </generator>
                  <markerToken>&lt;/tbody&gt;&lt;/table&gt;</markerToken>
                </com.myyearbook.hudson.plugins.confluence.wiki.editors.BeforeTokenEditor>
              </editors>
            </com.myyearbook.hudson.plugins.confluence.ConfluencePublisher>
          </publisherList>
          <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$Fail" plugin="run-condition@1.5"/>
          <executionStrategy class="org.jenkins_ci.plugins.flexible_publish.strategy.FailAtEndExecutionStrategy"/>
        </org.jenkins__ci.plugins.flexible__publish.ConditionalPublisher>
      </publishers>
    </org.jenkins__ci.plugins.flexible__publish.FlexiblePublisher>
  </publishers>
  <buildWrappers/>
</project>