<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>product_set_version</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enm-e2e-build - autogenerated using JobDSL - all manual changes will be overwritten!&lt;p&gt;&lt;h2 style=&quot;color:red&quot;&gt;Ensure to give the product set version higher than the last nightly/manually built product set.&lt;/h2&gt;&lt;/p&gt;&lt;h2&gt;Documentation&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a style=&quot;font-size: 16px&quot; href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide+-+build+cENM+SG+pipeline+based+on+particular+ENM+Product+Set+version&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <hudson.triggers.TimerTrigger>
          <spec>@midnight</spec>
        </hudson.triggers.TimerTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Enter the product set version (e.g. 20.11.52).                      Please ensure to give latest product set version compared to last built product set.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>SG_PROJECT_LIST = [&quot;eric-enm-ephemeral-container&quot;, &quot;eric-enm-models-ebs&quot;, &quot;eric-enmsg-gossiprouter-eap7&quot;, &quot;elasticsearch-admin&quot;, &quot;eric-enm-sfwkdb-schemamgt&quot;, &quot;eric-enmsg-opendj&quot;, &quot;eric-enm-flsdb-schemamgt&quot;, &quot;eric-enm-dps-schemamgt&quot;, &quot;eric-enm-modeldeployservice&quot;, &quot;eric-pm-fileaccess-nbi&quot;, &quot;eric-enmsg-eventbasedclient&quot;, &quot;eric-enmsg-fmx-inference-engine&quot;, &quot;eric-enmsg-sa-service&quot;, &quot;eric-enmsg-web-push-service&quot;, &quot;eric-enmsg-ebs-topology&quot;, &quot;eric-enmsg-fmx-actionserver&quot;, &quot;eric-enmsg-mssnmpcm&quot;, &quot;eric-enmsg-ebs-flow&quot;, &quot;eric-enmsg-nedo-serv&quot;, &quot;eric-enmsg-pmservice&quot;, &quot;eric-enmsg-uiservice&quot;, &quot;eric-enmsg-fm-alarm-processing&quot;, &quot;eric-enmsg-sps-web-service&quot;, &quot;eric-enmsg-networkexplorer&quot;, &quot;eric-enmsg-mssnmpfm&quot;, &quot;eric-enmsg-node-plugins&quot;, &quot;eric-enmsg-cmservice&quot;, &quot;eric-enmsg-mskpirt&quot;, &quot;eric-enmsg-cmevents&quot;, &quot;eric-enmsg-mscmapg&quot;, &quot;eric-enmsg-cellserv&quot;, &quot;eric-enmsg-import-export-service&quot;, &quot;eric-enmsg-pki-ra-service&quot;, &quot;eric-enmsg-fm-history&quot;, &quot;eric-enmsg-security-service&quot;, &quot;eric-enmsg-itservices&quot;, &quot;eric-enmsg-fmx-moduleserver&quot;, &quot;eric-enmsg-supervisionclient&quot;, &quot;eric-enmsg-nb-alarm-irp-agent-corba&quot;, &quot;eric-enm-data-migration&quot;, &quot;eric-enmsg-fmx-admin-ws&quot;, &quot;eric-enmsg-gossiprouter-cache&quot;, &quot;eric-enmsg-comecimpolicy&quot;, &quot;eric-enmsg-kpi-service&quot;, &quot;eric-enmsg-fileaccountservice&quot;, &quot;eric-enm-troubleshooting-utils&quot;, &quot;eric-enmsg-nbi-bnsi-fm&quot;, &quot;eric-enmsg-gossiprouter-remoting&quot;, &quot;eric-enmsg-com-ecim-mscm&quot;, &quot;eric-enmsg-lcmservice&quot;, &quot;eric-enmsg-openidm&quot;, &quot;eric-enm-sso-core-token-service&quot;, &quot;eric-enmsg-ebs-controller&quot;, &quot;eric-enmsg-elex&quot;, &quot;eric-enmsg-access-control&quot;, &quot;eric-enmsg-fm-service&quot;, &quot;eric-enmsg-kpi-calc-serv&quot;, &quot;eric-enmsg-flowautomation&quot;, &quot;eric-enmsg-domain-proxy-coordinator&quot;, &quot;eric-enmsg-dc-history&quot;, &quot;eric-enmsg-mscmip&quot;, &quot;eric-enmsg-visinaming-sb&quot;, &quot;eric-enmsg-mspm&quot;, &quot;eric-enmsg-medrouter&quot;, &quot;eric-enmsg-shm-core-service&quot;, &quot;eric-enmsg-element-manager&quot;, &quot;eric-enmsg-autoprovisioning&quot;, &quot;eric-enmsg-fls&quot;, &quot;eric-enmsg-cmutilities&quot;, &quot;eric-enmsg-msfm&quot;, &quot;eric-enm-omnidaemon&quot;, &quot;eric-enmsg-dlms&quot;, &quot;eric-enmsg-vault-service&quot;, &quot;eric-enmsg-msapgfm&quot;, &quot;eric-enmsg-nb-fm-snmp&quot;, &quot;eric-enmsg-sps-service&quot;, &quot;eric-enmsg-sso&quot;, &quot;eric-enmsg-ip-service-management&quot;, &quot;eric-enmsg-shmservice&quot;, &quot;eric-enmsg-msnetlog&quot;, &quot;eric-enmsg-identity-mgmt-service&quot;, &quot;eric-enmsg-jmsserver&quot;, &quot;eric-enmsg-filetransferservice&quot;, &quot;eric-enmsg-visinaming-nb&quot;, &quot;eric-enmsg-sentinel&quot;, &quot;eric-enmsg-mspmip&quot;, &quot;eric-enmsg-msap&quot;, &quot;eric-enmsg-pmic-router-policy&quot;, &quot;eric-enmsg-autoid-service&quot;, &quot;eric-enmsg-nodecli&quot;, &quot;eric-enmsg-amos&quot;, &quot;eric-enmsg-mscm&quot;, &quot;eric-enmsg-general-scripting&quot;, &quot;eric-enmsg-remotedesktop&quot;]
BASEIMAGESOS_PROJECT_LIST = [&quot;eric-enm-sles-base&quot;]
BASEIMAGES_PROJECT_LIST = [&quot;eric-enm-sles-apache2&quot;, &quot;eric-enm-neo4j-extension-plugin&quot;, &quot;eric-enm-init-wait&quot;, &quot;eric-enm-sles-eap7&quot;, &quot;eric-sec-directoryservices-fd&quot;, &quot;eric-enm-securestorage-init-base&quot;]
MOREBASEIMAGES_PROJECT_LIST = [&quot;eric-enm-sles-base-scripting&quot;, &quot;eric-enm-monitoring-eap7&quot;, &quot;eric-enm-monitoring-jre&quot;, &quot;eric-enm-models&quot;, &quot;eric-enm-credm-controller&quot;, &quot;eric-enm-kvstore-hc&quot;]
pipeline {
    agent { node { label &apos;Cloud-Native&apos; } }
    options {
        timestamps()
    }
    environment {
        PIPELINE_LAST_STAGE_STATUS = &apos;UNKNOWN&apos;
        CENMBUILD_ARM_TOKEN = credentials(&apos;cenmbuild_ARM_token&apos;)
    }
    parameters {
        string(name: &apos;product_set_version&apos;, description: &apos;Enter the product set version (e.g. 20.11.52).                      Please ensure to give latest product set version compared to last built product set.&apos;, defaultValue: &quot;&quot;)
    }
    stages {
        stage (&apos;Removing Docker Images&apos;) {
            steps {
                script {
                    //build(job: &quot;enm-cn-docker-purge-slaves&quot;, propagate: true, wait: true)
                    //build(job: &quot;enm-cn-docker-purge-slaves-3BF05&quot;, propagate: true, wait: true)
                    //build(job: &quot;enm-cn-docker-purge-slaves-5BF02&quot;, propagate: true, wait: true)
                    build(job: &quot;enm-cn-docker-purge-slaves-GE-e2e&quot;, propagate: true, wait: true)
                }
            }
        }
        stage (&apos;Initialization of ENM Versions&apos;) {
            steps {
                script {
                    def productSet = &quot;&quot;

                    // For nightly build this parameter would be empty
                    if (params.product_set_version) {
                        productSet = params.product_set_version.trim()
                    }
                    // Check if product set version is given
                    if (productSet != &quot;&quot;) {
                        env.PRODUCT_SET = productSet
                        echo &quot;Triggered manually with the PRODUCT_SET: ${productSet}&quot;
                        currentBuild.description = &quot;Triggered Mode: &lt;b&gt;Manual&lt;/b&gt;&lt;br/&gt;&quot;
                    } else {
                        echo &quot;Triggered automatically.&quot;
                        currentBuild.description = &quot;Triggered Mode: &lt;b&gt;Auto&lt;/b&gt;&lt;br/&gt;&quot;
                    }
                    // Call eric-enm-green-iso-build-trigger with PRODUCT_SET parameter
                    def b = build(job: &quot;eric-enm-green-iso-build-trigger&quot;, parameters: [[$class:&apos;StringParameterValue&apos;, name:&apos;PRODUCT_SET&apos;, value:String.valueOf(&quot;${productSet}&quot;)]], propagate: true, wait: true)

                    env.ISO_VERSION = &quot;$b.buildVariables.ISO_VERSION&quot;
                    echo &quot;ISO VERSION: $ISO_VERSION&quot;

                    env.PRODUCT_SET = &quot;$b.buildVariables.PRODUCT_SET&quot;
                    echo &quot;PRODUCT SET VERSION: $PRODUCT_SET&quot;

                    env.ENM_ISO_REPO_VERSION = &quot;$b.buildVariables.ENM_ISO_REPO_VERSION&quot;
                    echo &quot;ENM_ISO_REPO_VERSION: $ENM_ISO_REPO_VERSION&quot;

                    env.SPRINT_TAG = &quot;$b.buildVariables.SPRINT_TAG&quot;
                    echo &quot;SPRINT_TAG: $SPRINT_TAG&quot;

                    // Update the Build Description
                    currentBuild.description += &quot;Product Set Version: $PRODUCT_SET&lt;br/&gt;&quot;
                    currentBuild.description += &quot;ISO Version: $ISO_VERSION&lt;br/&gt;&quot;
                    currentBuild.description += &quot;Yum Repo Setup: $ENM_ISO_REPO_VERSION&lt;br/&gt;&quot;
                    currentBuild.description += &quot;Sprint Tag: $SPRINT_TAG&lt;br/&gt;&quot;

                    environment_list = [[$class:&apos;StringParameterValue&apos;, name:&quot;ISO_VERSION&quot;, value:String.valueOf(&quot;${ISO_VERSION}&quot;)],
                                        [$class:&apos;StringParameterValue&apos;, name:&quot;ENM_ISO_REPO_VERSION&quot;, value:String.valueOf(&quot;${ENM_ISO_REPO_VERSION}&quot;)],
                                        [$class:&apos;StringParameterValue&apos;, name:&quot;SPRINT_TAG&quot;, value:String.valueOf(&quot;${SPRINT_TAG}&quot;)],
                                        [$class:&apos;StringParameterValue&apos;, name:&quot;PRODUCT_SET&quot;, value:String.valueOf(&quot;${PRODUCT_SET}&quot;)]]
                    echo &quot;$environment_list&quot;
                }
            }
        }
        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
        stage (&apos;Building OS Base Images&apos;) {
            steps{
                script{
                    def builds = [:]
                    for (def proj in BASEIMAGESOS_PROJECT_LIST) {
                        def baseimagesos_build = &quot;${proj}&quot;
                        builds[&quot;${baseimagesos_build}&quot;] = {
                            stage(&quot;Build ${baseimagesos_build}&quot;){
                                retry(3) {
                                    def image_tag_name = (baseimagesos_build.replaceAll(&quot;-&quot;, &quot;_&quot;) + &quot;_IMAGE_TAG&quot;).toUpperCase()
                                    def build = build(job: &quot;${baseimagesos_build}&quot;, propagate: true, wait: true, parameters: environment_list)
                                    env.&quot;$image_tag_name&quot; = &quot;$build.buildVariables.IMAGE_TAG&quot;
                                    echo &quot;IMAGE TAG: $image_tag_name&quot;
                                }
                            }
                        }
                    }
                    parallel builds
                    echo sh(script: &apos;env&apos;, returnStdout:true)
                }
            }
        }
        stage (&apos;SYNC 1: OS Base Images&apos;) {
            steps {
                echo &quot;All OS Base Images up to this point built successfully&quot;
                sleep(5)
                script {
                    build_environment_list()
                }
            }
        }
        stage (&apos;Building Base Images&apos;) {
            steps{
                script{
                    def builds = [:]
                    for (def proj in BASEIMAGES_PROJECT_LIST) {
                        def baseimages_build = &quot;${proj}&quot;
                        if (baseimages_build == &quot;eric-enm-init-wait&quot;){
                          builds[&quot;eric-enm-init-wait&quot;] = {
                            stage(&quot;Build eric-enm-init-wait&quot;){
                                retry(3) {
                                    def eric_enm_init_wait_build = build(job: &quot;eric-enm-init-wait&quot;, propagate: true, wait: true, parameters: environment_list)
                                    env.ERIC_ENM_INIT_CONTAINER_IMAGE_TAG = &quot;$eric_enm_init_wait_build.buildVariables.IMAGE_TAG&quot;
                                }
                            }
                          }
                        }
                        else {
                          builds[&quot;${baseimages_build}&quot;] = {
                            stage(&quot;Build ${baseimages_build}&quot;){
                                retry(3) {
                                    def image_tag_name = (baseimages_build.replaceAll(&quot;-&quot;, &quot;_&quot;) + &quot;_IMAGE_TAG&quot;).toUpperCase()
                                    def build = build(job: &quot;${baseimages_build}&quot;, propagate: true, wait: true, parameters: environment_list)
                                    env.&quot;$image_tag_name&quot; = &quot;$build.buildVariables.IMAGE_TAG&quot;
                                    echo &quot;IMAGE TAG: $image_tag_name&quot;
                                }
                            }
                          }
                        }
                    }
                    parallel builds
                    echo sh(script: &apos;env&apos;, returnStdout:true)
                }
            }
        }
        stage (&apos;SYNC 2: BaseImages&apos;) {
            steps {
                echo &quot;All Base Images up to this point built successfully&quot;
                sleep(5)
                script {
                    build_environment_list()
                }
            }
        }
        stage (&apos;Building more Base Images&apos;) {
            steps{
                script{
                    def builds = [:]
                    for (def proj in MOREBASEIMAGES_PROJECT_LIST) {
                        def morebaseimages_build = &quot;${proj}&quot;
                        builds[&quot;${morebaseimages_build}&quot;] = {
                            stage(&quot;Build ${morebaseimages_build}&quot;){
                                retry(3) {
                                    def image_tag_name = (morebaseimages_build.replaceAll(&quot;-&quot;, &quot;_&quot;) + &quot;_IMAGE_TAG&quot;).toUpperCase()
                                    def build = build(job: &quot;${morebaseimages_build}&quot;, propagate: true, wait: true, parameters: environment_list)
                                    env.&quot;$image_tag_name&quot; = &quot;$build.buildVariables.IMAGE_TAG&quot;
                                    echo &quot;IMAGE TAG: $image_tag_name&quot;
                                }
                            }
                        }
                    }
                    parallel builds
                    echo sh(script: &apos;env&apos;, returnStdout:true)
                }
            }
        }
        stage (&apos;SYNC 3: More BaseImages&apos;) {
            steps {
                echo &quot;All Base Images built successfully&quot;
                sleep(5)
                script {
                    build_environment_list()
                }
            }
        }
        stage(&apos;Building Service Groups Images and Helm Charts&apos;) {
            steps{
                script{
                    def builds = [:]
                    for (def proj in SG_PROJECT_LIST) {
                        def service_group_build = &quot;${proj}&quot;
                        builds[&quot;${service_group_build}&quot;] = {
                            stage(&quot;Build ${service_group_build}&quot;){
                                retry(6) {
                                    def image_tag_name = (service_group_build.replaceAll(&quot;-&quot;, &quot;_&quot;) + &quot;_IMAGE_TAG&quot;).toUpperCase()
                                    def build = build(job: &quot;${service_group_build}&quot;, propagate: true, wait: true, parameters: environment_list)
                                    env.&quot;$image_tag_name&quot; = &quot;$build.buildVariables.IMAGE_TAG&quot;
                                    echo &quot;IMAGE TAG: $image_tag_name&quot;
                                }
                            }
                        }
                    }
                    parallel builds
                    echo sh(script: &apos;env&apos;, returnStdout:true)
                }
            }
        }
        stage (&apos;SYNC 4: Service Groups Images and Helms Charts&apos;) {
            steps {
                echo &quot;All Service Groups Images and Helms charts built successfully&quot;
                sleep(5)
                script {
                    build_environment_list()
                }
            }
        }
        stage (&apos;Generate Requirements File&apos;) {
            steps {
                script {
                    init_requirements()
                    build_requirements_file()
                    store_requirements_file()
                }
            }
        }
        stage (&apos;Trigger Integration Build&apos;) {
            steps {
                script {
                    sh &apos;echo &quot;ISO_VERSION=$ISO_VERSION&quot; &gt; artifact.properties&apos;
                    sh &apos;echo &quot;PRODUCT_SET=$PRODUCT_SET&quot; &gt;&gt; artifact.properties&apos;
                    sh &apos;echo &quot;SPRINT_TAG=$SPRINT_TAG&quot; &gt;&gt; artifact.properties&apos;
                    sh &apos;echo &quot;REQUIREMENTS_FILE_URL=$REQUIREMENTS_FILE_URL&quot; &gt;&gt; artifact.properties&apos;
                    archiveArtifacts &apos;artifact.properties,requirements.yaml&apos;
                }
                sleep(5)
            }
        }
    }
    post {
        success {
            script {
                sh(script: &apos;wget -q -O - --no-check-certificate --post-data=&quot;&quot; https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/manageCNProductSet/${PRODUCT_SET}/cENM-Build-Images/passed/&apos;, returnStdout: true).trim()
                currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
            }
        }
        failure {
            script {
                sh(script: &apos;wget -q -O - --no-check-certificate --post-data=&quot;&quot; https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/manageCNProductSet/${PRODUCT_SET}/cENM-Build-Images/failed/&apos;, returnStdout: true).trim()
                currentBuild.rawBuild.@result = hudson.model.Result.FAILURE
            }
        }
    }
}
def build_environment_list(){
    env.getEnvironment().each { key, value -&gt;
        if (&quot;${key}&quot;.startsWith(&quot;ERIC_&quot;)){
            echo &quot;${key}=${value}&quot;
            environment_list &lt;&lt; [$class:&apos;StringParameterValue&apos;, name:&quot;${key}&quot;, value:String.valueOf(&quot;${value}&quot;)]
        }
    }
    build(job: &quot;sync-build-trigger&quot;, propagate: true, wait: true, parameters: environment_list)
}

def init_requirements() {
    outString = &apos;dependencies:\r\n&apos;
    writeFile file: &apos;requirements.yaml&apos;, text: outString
}

def build_requirements_file(){
    env.getEnvironment().each { key, value -&gt;
        if (key.startsWith(&quot;ERIC_ENM&quot;) || key.startsWith(&quot;ERIC_PM&quot;)){
            if (key.endsWith(&quot;_REPOSITORY_TAG&quot;)){
                return
            }
            else{
                key=key.replace(&quot;_IMAGE_TAG&quot;,&quot;&quot;)
                env.repoKey = &apos;${&apos;+key+&apos;_REPOSITORY_TAG}&apos;
                repository=sh(returnStdout: true, script: &quot;echo $repoKey&quot;).trim()
            if (repository == &quot;&quot;){
                repoString = &apos;  repository: https://arm.epk.ericsson.se/artifactory/proj-enm-helm/&apos;
            } else {
                repoString = &apos;  repository: &apos; + repository
            }
                key = key.replace(&quot;_POINTFIX&quot;,&quot;&quot;)
                key=key.toLowerCase().replace(&quot;_&quot;,&quot;-&quot;)
                nameString = &apos;- name: &apos;+ key
                versionString = &apos;  version: &apos; + value
            }
        readContent = readFile &apos;requirements.yaml&apos;
        outString = readContent + nameString + &quot;\r\n&quot; + repoString + &quot;\r\n&quot; + versionString + &quot;\r\n&quot;
        writeFile file: &apos;requirements.yaml&apos;, text: outString
        }
    }
}

def store_requirements_file() {
    env.REQUIREMENTS_FILE_URL=&apos;https://arm.seli.gic.ericsson.se/artifactory/proj-enm-e2e-ci-generic-local/requirements-file/requirements-file-&apos;+PRODUCT_SET+&apos;.yaml&apos;
    sh &apos;curl -u ${CENMBUILD_ARM_TOKEN} -X PUT -T requirements.yaml ${REQUIREMENTS_FILE_URL}&apos;
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>true</disabled>
</flow-definition>