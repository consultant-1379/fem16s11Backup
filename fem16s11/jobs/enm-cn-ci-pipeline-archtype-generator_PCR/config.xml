<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>&lt;b&gt;&lt;font color="red"&gt;    WARNING!  This PCR job requires to run against a Jenkins slave with docker and yamllint. &lt;/font&gt;&lt;/b&gt;&lt;br&gt;&#13;
&lt;b&gt;&lt;font color="red"&gt;    Temporary configured to run on a fixed Openstack slave. &lt;/font&gt;&lt;/b&gt;&lt;br&gt;&#13;
&lt;br&gt;&#13;
Confluence page:&lt;a href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/DCN/Archtype+generator"&gt;Archtype+generator&lt;/a&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <EnvInjectJobProperty plugin="envinject@2.4.0">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.containerisation/enm-cn-ci-pipeline-archtype-generator</propertiesContent>
        <secureGroovyScript plugin="script-security@1138.v8e727069a_025">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.35.2">
          <spec/>
          <gerritProjects>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
              <compareType>PLAIN</compareType>
              <pattern>OSS/com.ericsson.oss.containerisation/enm-cn-ci-pipeline-archtype-generator</pattern>
              <branches>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>PLAIN</compareType>
                  <pattern>master</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              </branches>
              <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          </gerritProjects>
          <dynamicGerritProjects class="empty-list"/>
          <skipVote>
            <onSuccessful>false</onSuccessful>
            <onFailed>false</onFailed>
            <onUnstable>false</onUnstable>
            <onNotBuilt>false</onNotBuilt>
            <onAborted>false</onAborted>
          </skipVote>
          <silentMode>false</silentMode>
          <enableTopicAssociation>false</enableTopicAssociation>
          <notificationLevel/>
          <silentStartMode>false</silentStartMode>
          <escapeQuotes>true</escapeQuotes>
          <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
          <dependencyJobsNames/>
          <commitMessageParameterMode>BASE64</commitMessageParameterMode>
          <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
          <commentTextParameterMode>BASE64</commentTextParameterMode>
          <buildStartMessage/>
          <buildFailureMessage/>
          <buildSuccessfulMessage/>
          <buildUnstableMessage/>
          <buildNotBuiltMessage/>
          <buildAbortedMessage/>
          <buildUnsuccessfulFilepath/>
          <customUrl/>
          <serverName>Gerrit Central</serverName>
          <triggerOnEvents>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
              <excludeDrafts>false</excludeDrafts>
              <excludeTrivialRebase>false</excludeTrivialRebase>
              <excludeNoCodeChange>false</excludeNoCodeChange>
              <excludePrivateState>false</excludePrivateState>
              <excludeWipState>false</excludeWipState>
              <commitMessageContainsRegEx/>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          </triggerOnEvents>
          <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
          <triggerConfigURL/>
          <triggerInformationAction/>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

pipeline {
    agent {
        label 'enm_cn_pf_ci_openstack-08022021-11'
        //label 'Docker-POC-e2e'
        //label 'POC-Cloud-Native'
    }
    stages {
        stage('Checkout Archetype generator tool Git Repository') {
            steps {
                sh "sudo rm -rf ${WORKSPACE}/*" // clean workspace
                //sh "rm -rf ${WORKSPACE}/*" // clean workspace
                script {
                    if (env.GERRIT_CHANGE_NUMBER) {
                        checkout changelog: true, \
                        scm: [$class: 'GitSCM', \
                        branches: [[name: "$GERRIT_REFSPEC"]], \
                        doGenerateSubmoduleConfigurations: false, \
                        extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]], \
                        submoduleCfg: [], \
                        userRemoteConfigs: [[refspec: "${GERRIT_REFSPEC}", \
                        url: "${GERRIT_MIRROR}/${GERRIT_PROJECT}"]]]
                    } else {
                        println "No GERRIT_CHANGE_NUMBER"
                        git changelog: true, poll: false, url: '${GERRIT_MIRROR}/${REPO}'
                    }
                }
            }
        }
        stage('Linting Helm') {
            steps {
                sh '''
                docker run --init --rm --user $(id -u):$(id -g) --env ENABLE_HELM_V3=true --volume ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:latest helm lint templates/enm-service-grouph/_chart-template
                '''
            }
        }
        stage('Linting Dockerfile') {
            steps {
                sh "docker run --rm -i hadolint/hadolint &lt; Dockerfile | tee ./dockerfilelint.log"
                archiveArtifacts '*dockerfilelint.log'
            }
        }
        stage('Linting Yaml file') {
            steps {
                sh "yamllint -f parsable ."
            }
        }
        stage('Run Archetype generator') {
            steps {
                sh '''
                docker build . -t archgen_pcr
                docker run --entrypoint "sh" -v ${WORKSPACE}:/data/output archgen_pcr -c "python run.py --service_name test_sg --service_type 0 --service_description TestSG --path_of_archtype /data/output --product_number 123456 --is_depend_on_jboss_base_image n"
                docker run --entrypoint "sh" -v ${WORKSPACE}:/data/output archgen_pcr -c "python run.py --service_name test_base_image --service_type 2 --service_description TestBaseImage --path_of_archtype /data/output --product_number 123456 --is_depend_on_jboss_base_image n"
                '''
            }
        }
    }
    post {
        always {
            sh '''
            docker ps -a | awk '{ print $1,$2 }' | grep archgen_pcr | awk '{print $1 }' | xargs -I {} docker rm {}
            docker rmi archgen_pcr
            '''
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>