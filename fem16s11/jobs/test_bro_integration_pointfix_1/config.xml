<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline bro-integration-pointfix - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.lmera.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.lmera.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description/>
          <defaultValue>dPS_20.14.5</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def NEW_GIT_COMMIT = "false"
def INTEGRATION_CHART_VERSION = ""
def failedStage = ''

pipeline {
    agent {
        label 'Cloud-Native'
    }
    stages {
        stage('Inject Credential Files') {
          steps {
              println('Inject Credential Files stage..')
             /* withCredentials( [file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                     sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
            } */
          }
        } 
        stage('Checkout Cloud-Native eric-enm-bro-integration Git Repository'){
         steps {
             git branch: env.BRANCH,
                     url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.ci/eric-oss-central-service'
         }
        }
        stage('Check the git commit'){
            steps {
                script {
                    try {
                        getLastCommitHasTag = sh(script: 'git describe --tags --exact-match refs/heads/\$BRANCH | wc -l', returnStdout: true) as Integer
                        if (getLastCommitHasTag){
                            println("Tag exists on head")
                            env.NEW_GIT_COMMIT = "false"
                        }
                        else {
                            println("Tag doesn't exists on head")
                            env.NEW_GIT_COMMIT = "true"
                        }
                    }
                    catch(Exception e){
                        echo "WARN: something unexpected occured. "
                        echo "${e}"
                    }

                }
            }
        }
        stage('Lint Helm'){
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
                }
            steps {
                println("Lint helm chart stage..")
                //sh "${bob} lint-helm"
            }
        }
        stage('ADP Helm Design Rule Check') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
                }
            steps {
                println("ADP Helm Design Rule Check stage..")
                /* sh "${bob} test-helm || true"
                archiveArtifacts 'design-rule-check-report.*' */
            }
        }
        stage('Generate New Version') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
            }
            steps {
                println("Generate New Version stage..")
                // sh "${bob} generate-new-version"
            }
            post {
                    failure {
                        script {
                            failedStage = env.STAGE_NAME
                        }
                    }
                }
         }
        stage('Build Chart') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
            }
            steps {
                  script{
                      println("Build Chart stage..")
                   /* withCredentials([
                      usernamePassword(credentialsId: 'cenmbuild', usernameVariable: 'HELM_USER', passwordVariable: 'HELM_TOKEN')]) {
                       def bobwithbuild = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['HELM_USER': env.HELM_USER,
                                      'HELM_TOKEN': env.HELM_TOKEN,
                            ])
                            .toString()
                       sh "${bobwithbuild} build-helm"
                   } */
                 }
               }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
        }
        stage('Publish Helm Chart') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
            }
            steps {
               script {
                        println("Publish helm chart stage..")
                        /* def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['HELM_REPO_TOKEN': env.HELM_REPO_TOKEN])
                                .toString()
                        sh "${bobWithHelmToken} helm-push" */
                }
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
        } 
        stage('Setting last sucessful helm version'){
            when {
                expression { env.NEW_GIT_COMMIT == "false" }
            }
            steps {
                script {
                    try {
                        env.INTEGRATION_CHART_VERSION = sh(script: 'git tag -l --contains refs/heads/\$BRANCH | grep -', returnStdout: true)
                        sh(script: 'git log -1 --format=format:%H &gt; commit-hash', returnStdout: true)
                        def bobWithAdpParameters = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['INTEGRATION_CHART_VERSION': env.INTEGRATION_CHART_VERSION,
                                ])
                                .toString()
                        sh "${bobWithAdpParameters} generate-adp-parameters"
                        archiveArtifacts 'artifact.properties'
                        archiveArtifacts 'commit-hash'
                    }
                    catch(Exception e){
                        echo "WARN: something unexpected occured. "
                        echo "${e}"
                    }
                }
            }
        }
        stage('Generate INT Parameters') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
            }
            steps {
                println("Generate INT parameters stage..")
            /*         sh "${bob} generate-output-parameters"
                    archiveArtifacts 'artifact.properties'
                    archiveArtifacts '.bob/var.commit-hash' */
            }
            post {
                        failure {
                            script {
                                failedStage = env.STAGE_NAME
                            }
                        }
                    }
        }
        stage('Tag Cloud-Native eric-enm-bro-integration Repository') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
            }
            steps {
                wrap([$class: 'BuildUser']) {
                    script {
                        println("Tag Cloud-Native eric-enm-bro-integration Repository stage..")
                        /* def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        'AUTHOR_NAME'        : "${GIT_COMMITTER_NAME}",
                                        'AUTHOR_EMAIL'       : "${GIT_COMMITTER_EMAIL}",
                                        'GIT_COMMITTER_NAME' : "${GIT_COMMITTER_NAME}",
                                        'GIT_COMMITTER_EMAIL': "${GIT_COMMITTER_EMAIL}"
                                ])
                                .toString()
                        sh "${bobWithCommitterInfo} create-git-tag"
                        sh """
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        """ */
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                /* always {
                    script {
                        sh "${bob} remove-git-tag"
                    }
                } */
            }
        }
        stage('Bump Version') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
            }
            steps {
                script {
                    println("Bump version stage..")
                    /* sh 'hostname'
                    Version = readFile "VERSION_PREFIX"
                    sh 'docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch'
                    newVersion = readFile "VERSION_PREFIX"
                    env.BRO_VERSION = newVersion
                    currentBuild.displayName = "${BUILD_NUMBER} - Version - " + Version
                    sh '''
                        git add VERSION_PREFIX
                        git commit -m "Version $BRO_VERSION"
                        git push origin HEAD:${BRANCH}
                    ''' */
                }
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
        } 
        stage('CLEAN') {
            when {
                    expression { env.NEW_GIT_COMMIT == "true" }
                }
            steps {
                    println("Clean stage..")
                	/* sh "${bob} clean" */
                }
                post {
                    failure {
                        script {
                            failedStage = env.STAGE_NAME
                        }
                    }
                }
        }
        }
        post {
            failure {
                // mail to: 'EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com',
                // mail only evormax for debug
                mail to: '',
                        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                        body: "Failure on ${env.BUILD_URL}"
            }
            cleanup{
                deleteDir()
            }
        }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>