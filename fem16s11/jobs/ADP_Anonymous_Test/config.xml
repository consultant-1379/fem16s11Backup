<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties>
        <string>org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty</string>
      </jobProperties>
      <triggers/>
      <parameters>
        <string>CHART_NAME</string>
        <string>INT_ENM_CHART</string>
        <string>GERRIT_REFSPEC</string>
        <string>CHART_REPO</string>
        <string>CHART_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>CHART_NAME</name>
          <description>Chart name e.g.: eric-log-transformer</description>
          <defaultValue>eric-log-transformer</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHART_REPO</name>
          <description>Chart repo e.g.: https://arm.sero.gic.ericsson.se/artifactory/proj-adp-gs-all-helm/</description>
          <defaultValue>https://arm.sero.gic.ericsson.se/artifactory/proj-adp-gs-all-helm/</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHART_VERSION</name>
          <description>Chart version e.g.: 4.1.0-22</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INT_ENM_CHART</name>
          <description>eric-enm-int-log-transformer</description>
          <defaultValue>eric-enm-int-log-transformer</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REFSPEC</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>SLAVE</name>
          <defaultValue/>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.7.0-83'

def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent {
            node
            {
               label SLAVE
            }
        }
    parameters {
        string(name: 'CHART_NAME', defaultValue: 'eric-log-transformer', description: 'Chart name e.g.: eric-log-transformer')
        string(name: 'CHART_REPO', defaultValue: 'https://arm.sero.gic.ericsson.se/artifactory/proj-adp-gs-all-helm/', description: 'Chart repo e.g.: https://arm.sero.gic.ericsson.se/artifactory/proj-adp-gs-all-helm/')
        string(name: 'CHART_VERSION', defaultValue: '', description: 'Chart version e.g.: 4.1.0-22')
        string(name: 'INT_ENM_CHART', defaultValue: 'eric-enm-int-log-transformer', description: 'eric-enm-int-log-transformer')
        string(name: 'GERRIT_REFSPEC', defaultValue: '')
    }
    stages {
        stage('Clean') {
            steps {
                 sh "${bob} clean-prepare"
            }
        }
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage('Prepare Helm Chart') {
            steps {
               script{
                      withCredentials([usernamePassword(credentialsId: 'cenmbuild_gerrit_api_token', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                                       string(credentialsId: 'lciadm100', variable: 'ARM_API_TOKEN'), file(credentialsId: 'cenm_repo_credentials', variable: 'HELM_REPO_CREDENTIALS')]) {
                      def bobwithprepare = new BobCommand()
                         .bobImage(defaultBobImage)
                         .needDockerSocket(true)
                         .envVars(['CHART_NAME': env.CHART_NAME,
                                   'CHART_REPO': env.CHART_REPO,
                                   'CHART_VERSION': env.CHART_VERSION,
                                   'INT_ENM_CHART': env.INT_ENM_CHART,
                                   'ARM_API_TOKEN': env.ARM_API_TOKEN,
                                   'GERRIT_USERNAME': env.GERRIT_USERNAME,
                                   'GERRIT_PASSWORD': env.GERRIT_PASSWORD,
                                   'GERRIT_REFSPEC' : env.GERRIT_REFSPEC,
                                   'HELM_REPO_CREDENTIALS': env.HELM_REPO_CREDENTIALS
                         ])
                         .toString()
                    sh "chmod -R 777 ${WORKSPACE}@tmp"
                    sh "${bobwithprepare}  prepare"
                   }
                }
             }
            }
        stage('Archive artifact.properties') {
            steps {
                archiveArtifacts 'artifact.properties'
            }
          }
        }
    post {
         always {
           script{
             currentBuild.displayName = "${INT_ENM_CHART}"
           }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |\$(if [ -n "\$HELM_REPO_CREDENTIALS" ]; then echo -v \$HELM_REPO_CREDENTIALS:\$HELM_REPO_CREDENTIALS;fi)
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>