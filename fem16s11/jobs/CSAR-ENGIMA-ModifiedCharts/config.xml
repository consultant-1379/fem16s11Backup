<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Please dont use this job without informing team Misty.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>40</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>SLAVE</name>
          <description>Jenkins CSAR slave options</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Transformation_CSAR_Slave_4Node</string>
              <string>Cloud-Native</string>
              <string>enm_cn_ci_openstack-16102020-10</string>
              <string>Jenkins_CN_Design_Totoro_13</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_3</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_21</string>
              <string>Jenkins_cENM_Design_Teams_TAF1_Slave_4Node_8</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_28</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_4</string>
              <string>Jenkins_CN_Design_Totoro_18</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_31</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_39</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_6</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_7</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MONITORING_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILD_TYPE</name>
          <description>automatic picks the charts and values from internal area. Whearas manual picks the charts and values from chart directory of csar repo.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>automatic</string>
              <string>manual</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INTEGRATION_VALUE_FILE</name>
          <description>This parameter will work for the automatic BUILD_TYPE and whichever value is chosen that file will be written as production values and further process will continue.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-production-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Add the sprint tag for the product set version selected.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INFRA_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STATELESS_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.62.0-1'
def metadataImage = 'armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest'
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()
def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''

def overrideIntegrationValues(){
    try {
        filename = "scripts/${integration_values}"
        values = readYaml file: filename

        bro = "eric-enm-bro-integration"
        sh "tar -zxf charts/${bro}-${BRO_CHART_VERSION}.tgz"
        pre_deploy = "eric-enm-pre-deploy-integration"
        sh "tar -zxf charts/${pre_deploy}-${PRE_DEPLOY_CHART_VERSION}.tgz"
        infra = "eric-enm-infra-integration"
        sh "tar -zxf charts/${infra}-${INFRA_CHART_VERSION}.tgz"
        stateless = "eric-enm-stateless-integration"
        sh "tar -zxf charts/${stateless}-${STATELESS_CHART_VERSION}.tgz"
        monitoring = "eric-enm-monitoring-integration"
        sh "tar -zxf charts/${monitoring}-${MONITORING_CHART_VERSION}.tgz"

        if(values."eric-enm-version-configmap".containsKey("productVersion"))
            values."eric-enm-version-configmap".productVersion = "ENM ${SPRINT_TAG} (CSAR Version: ${VERSION}) ${ENM_RSTATE_NUMBER}"

        if(values."eric-enm-version-configmap".containsKey("packageVersion"))
            values."eric-enm-version-configmap".packageVersion = "CXP 904 1414 ${VERSION} ${RSTATE}"

        if(values."eric-enm-version-configmap".containsKey("productionDate"))
            values."eric-enm-version-configmap".productionDate = "${VNF_RELEASE_DATE_TIME}"

        if(values."eric-enm-version-configmap".containsKey("productSet"))
            values."eric-enm-version-configmap".productSet = "${PRODUCT_SET}"

        eric_log_shipper_values = readYaml file: "${infra}/charts/eric-log-shipper/eric-product-info.yaml"
        values."eric-log-shipper".imageCredentials = ["repoPath": "proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}"]

        eric_data_search_engine_curator_values = readYaml file: "${infra}/charts/eric-data-search-engine-curator/eric-product-info.yaml"
        values."eric-data-search-engine-curator".imageCredentials = ["repoPath": "proj-enm/${eric_data_search_engine_curator_values.images.curator.repoPath}", "logshipper": ["repoPath": "proj-enm/${eric_data_search_engine_curator_values.images.logshipper.repoPath}"]]

        eric_data_search_engine_values = readYaml file: "${infra}/charts/eric-data-search-engine/eric-product-info.yaml"
        values."eric-data-search-engine".imageCredentials = ["repoPath": "proj-enm/${eric_data_search_engine_values.images.searchengine.repoPath}", "logshipper": ["repoPath": "proj-enm/${eric_data_search_engine_values.images.logshipper.repoPath}"]]

        eric_data_eshistory_search_engine_values = readYaml file: "${infra}/charts/eric-data-search-engine/eric-product-info.yaml"
        values."eric-data-eshistory-search-engine".imageCredentials = ["repoPath": "proj-enm/${eric_data_eshistory_search_engine_values.images.searchengine.repoPath}", "logshipper": ["repoPath": "proj-enm/${eric_data_eshistory_search_engine_values.images.logshipper.repoPath}"]]

        eric_data_graph_database_nj_values = readYaml file: "${infra}/charts/eric-data-graph-database-nj/values.yaml"
        values."eric-data-graph-database-nj".imageCredentials = ["repoPath": "proj-enm/${eric_data_graph_database_nj_values.imageCredentials.repoPath}", "logshipper": ["repoPath": "proj-enm/proj-adp-log-released"]]

        eric_enm_int_document_database_pg_values = readYaml file: "${infra}/charts/eric-enm-int-document-database-pg/charts/eric-data-document-database-pg/eric-product-info.yaml"
        values."eric-enm-int-document-database-pg"."eric-data-document-database-pg".imageCredentials = ["repoPath": "proj-enm/${eric_enm_int_document_database_pg_values.images.pg13.repoPath}"]
        values."eric-enm-int-document-database-pg"."eric-data-document-database-pg".global = ["imageCredentials": ["logshipper": ["repoPath": "proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}"]]]

        eric_ctrl_bro_values = readYaml file: "${bro}/charts/eric-ctrl-bro/values.yaml"
        values."eric-ctrl-bro".imageCredentials = ["repoPath": "proj-enm/${eric_ctrl_bro_values.imageCredentials.repoPath}"]

        eric_pm_server_values = readYaml file: "${monitoring}/charts/eric-pm-server/eric-product-info.yaml"
        values."eric-pm-server".imageCredentials = ["repoPath": "proj-enm/${eric_pm_server_values.images.'eric-pm-server'.repoPath}"]
        values."eric-pm-server".global = ["imageCredentials": ["logshipper": ["repoPath": "proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}"]]]

        eric_pm_alert_manager_values = readYaml file: "${monitoring}/charts/eric-pm-alert-manager/eric-product-info.yaml"
        values."eric-pm-alert-manager".imageCredentials = ["repoPath": "proj-enm/${eric_pm_alert_manager_values.images.alertmanager.repoPath}", "logshipper": ["repoPath": "proj-enm/${eric_pm_alert_manager_values.images.logshipper.repoPath}"]]

        eric_pm_node_exporter_values = readYaml file: "${monitoring}/charts/eric-pm-node-exporter/values.yaml"
        values."eric-pm-node-exporter".imageCredentials = ["repoPath": "proj-enm/${eric_pm_node_exporter_values.imageCredentials.repoPath}"]

        eric_enm_int_log_transformer_values = readYaml file: "${infra}/charts/eric-enm-int-log-transformer/charts/eric-log-transformer/eric-product-info.yaml"
        values."eric-enm-int-log-transformer"."eric-log-transformer".imageCredentials = ["repoPath": "proj-enm/${eric_enm_int_log_transformer_values.images.logtransformer.repoPath}"]
        values."eric-enm-int-log-transformer"."eric-log-transformer".global = ["imageCredentials": ["logshipper": ["repoPath": "proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}"]]]
        
        eric_net_ingress_l4_values = readYaml file: "${infra}/charts/eric-net-ingress-l4/values.yaml"
        values."eric-net-ingress-l4".global = ["imageCredentials": ["logshipper": ["repoPath": "proj-enm/${eric_net_ingress_l4_values.imageCredentials.logshipper.repoPath}"]]]

        eric_data_key_value_database_rd_values = readYaml file: "${stateless}/charts/eric-enmsg-fmx-integration/charts/eric-data-key-value-database-rd/eric-product-info.yaml"
        values."eric-enmsg-fmx-integration"."eric-data-key-value-database-rd".imageCredentials = ["kvdbOperator": ["repoPath": "proj-enm/${eric_data_key_value_database_rd_values.images.kvdbOperator.repoPath}"], "logshipper": ["repoPath": "proj-enm/proj-adp-log-released"]]

        values."eric-enmsg-fmx-integration"."eric-data-key-value-database-rd"."imageCredentials"."kvdbOperator".registry = ["url": ""]

        eric_data_key_value_database_rd_operand_values = readYaml file: "${stateless}/charts/eric-enmsg-fmx-integration/charts/eric-data-key-value-database-rd-operand/values.yaml"
        values."eric-enmsg-fmx-integration"."eric-data-key-value-database-rd-operand".imageCredentials = ["node": ["repoPath": "proj-enm/${eric_data_key_value_database_rd_operand_values.imageCredentials.node.repoPath}", "registry": ["url": ""]], "metricsExporter": ["repoPath": "proj-enm/${eric_data_key_value_database_rd_operand_values.imageCredentials.metricsExporter.repoPath}", "registry": ["url": ""]], "logshipper": ["repoPath": "proj-enm/proj-adp-log-released"]]

        eric_eo_evnfm_mb_values = readYaml file: "${stateless}/charts/eric-enmsg-fmx-integration/charts/eric-eo-evnfm-mb/eric-product-info.yaml"
        values."eric-enmsg-fmx-integration"."eric-eo-evnfm-mb".imageCredentials = ["evnfmMB": ["repoPath": "proj-enm/${eric_eo_evnfm_mb_values.images.evnfmMB.repoPath}"], "logshipper": ["repoPath": "proj-enm/${eric_eo_evnfm_mb_values.images.logshipper.repoPath}"], "volumePermissions": ["repoPath": "proj-enm/${eric_eo_evnfm_mb_values.images.volumePermissions.repoPath}"]]

        eric_oss_ingress_controller_nx_values = readYaml file: "${pre_deploy}/charts/eric-oss-ingress-controller-nx/eric-product-info.yaml"
        values."eric-oss-ingress-controller-nx".imageCredentials = ["repoPath": "proj-enm/${eric_oss_ingress_controller_nx_values.images.ingresscontroller.repoPath}", "logshipper": ["repoPath": "proj-enm/${eric_oss_ingress_controller_nx_values.images.logshipper.repoPath}"]]

        eric_enm_kvstore_hc_values = readYaml file: "${infra}/charts/eric-enm-kvstore-hc/values.yaml"
        values."eric-enm-kvstore-hc".imageCredentials = ["logshipper": ["repoPath": "proj-enm/${eric_enm_kvstore_hc_values.imageCredentials.logshipper.repoPath}"]]

        eric_enm_fm_alert_parser_values = readYaml file: "${monitoring}/charts/eric-enm-fm-alert-parser/values.yaml"
        values."eric-enm-fm-alert-parser".imageCredentials = ["logshipper": ["repoPath": "proj-enm/${eric_enm_fm_alert_parser_values.imageCredentials.logshipper.repoPath}"]]

        eric_cnom_server_values = readYaml file: "${stateless}/charts/eric-cnom-server/eric-product-info.yaml"
        values."eric-cnom-server".imageCredentials = ["repoPath": "proj-enm/${eric_cnom_server_values.images.server.repoPath}", "logshipper": ["repoPath": "proj-enm/${eric_cnom_server_values.images.logshipper.repoPath}"]]

        values."eric-cnom-server"."imageCredentials".registry = ["url": ""]

        eric_cnom_document_database_mg_values = readYaml file: "${infra}/charts/eric-cnom-document-database-mg/values.yaml"
        values."eric-cnom-document-database-mg".imageCredentials = ["repoPath": "proj-enm/${eric_cnom_document_database_mg_values.imageCredentials.repoPath}"]

        values."eric-cnom-document-database-mg"."imageCredentials".registry = ["url": ""]

        values."eric-enmsg-opendj".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]

        values."eric-enm-rwxpvc".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]

        values."eric-ctrl-brocli".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]

        eric_oss_metrics_stager_values = readYaml file: "${monitoring}/charts/eric-oss-metrics-stager/eric-product-info.yaml"
        if (!values.containsKey("eric-oss-metrics-stager"))
            values["eric-oss-metrics-stager"] = [:]
        values."eric-oss-metrics-stager".imageCredentials = [
            "repoPath": "proj-enm/${eric_oss_metrics_stager_values.images.remotewriter.repoPath}",
            "logshipper": ["repoPath": "proj-enm/${eric_oss_metrics_stager_values.images.logshipper.repoPath}"]
        ]

        eric_oss_ddc_values = readYaml file: "${monitoring}/charts/eric-enm-ddc/charts/eric-oss-ddc/eric-product-info.yaml"
        values."eric-enm-ddc"."eric-oss-ddc".imageCredentials = [
            "logshipper": ["repoPath": "proj-enm/${eric_oss_ddc_values.images.logshipper.repoPath}"]
        ]

        sh "rm -r ${bro}"
        sh "rm -r ${pre_deploy}"
        sh "rm -r ${infra}"
        sh "rm -r ${stateless}"
        sh "rm -r ${monitoring}"

        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        error "$err"
    }
}

pipeline {
    agent {
            node
            {
            label SLAVE
            }
        }
    environment{
        repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        CSAR_PACKAGE_NAME = "enm-installation-package"
        OPENIDM = "eric-enm-openidm-change-password:latest"
        PASSKEY = "eric-enm-securestorage-regen-passkey:latest"
        OPENIDM_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
        PASSKEY_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
        PACKAGE_TYPE="csar"
        CENMBUILD_ARM_TOKEN = credentials('cenmbuild_ARM_token')
    }
    stages {
       stage ('Clean workspace') {
          steps {
                script {
                          sh "docker image prune -fa"
               }
            deleteDir()
         }
       }
       stage('Checkout Cloud-Native CSAR Git Repository') {
            steps {
                git branch: 'dTROF-predployCSAR',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package
                '''
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                        sh 'cp settings.xml ${HOME}/.m2/'
                        env.VNF_RELEASE_DATE_TIME = sh(script: "date +'%FT%T%:z'", returnStdout: true).trim()
                        echo "${VNF_RELEASE_DATE_TIME}"
                        env.ENM_RSTATE_NUMBER = sh(script: 'wget -q -O - --no-check-certificate "https://ci-portal.seli.wh.rnd.internal.ericsson.com/getAOMRstate/?product=ENM&amp;drop=${SPRINT_TAG}"', returnStdout: true).trim()
                        echo "${ENM_RSTATE_NUMBER}"
                 }
            }
        }
        stage('Get Integration Chart'){
	                steps{
	                   script {
	                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz -o charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz'
	                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz -o charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz'
	                     if("${PRODUCT_SET}" &gt; "21.03.57"){
	                          sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz -o charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz'
	                     }
	                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
	                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'
	                 }
	            }
	        }
	        stage('Copy Integration Chart'){
	            when {
	                allOf{
	                    environment name: 'BUILD_TYPE', value: 'manual'
	        }
	             }
	                steps{
	                   script {
	                     sh 'mkdir -p ${PWD}/charts'
	                     sh 'cp -rf chart/eric-enm-bro-integration-*.tgz charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz'
	                     sh 'cp -rf chart/eric-enm-pre-deploy-integration-*.tgz charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz'
	                     sh 'cp -rf chart/eric-enm-monitoring-integration-*.tgz charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz'
	                     sh 'cp -rf chart/eric-enm-infra-integration-*.tgz charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
	                     sh 'cp -rf chart/eric-enm-stateless-integration-*.tgz charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'
	                 }
	            }
	        }
	        stage('integration value version'){
	            steps{
	                script {
	                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
	                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
	                      }
	                }
	        }
			 stage('copy integration value version'){
	            when {
	                allOf{
	                    environment name: 'BUILD_TYPE', value: 'manual'
	                   }
	             }
	                steps{
	                    script {
	                         sh 'cp -rf chart/eric-enm-integration-production-values-*.yaml scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
	                         sh 'cp -rf chart/eric-enm-integration-extra-large-production-values*.yaml scripts/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml'						 
	                         }
	                }
        }
	stage('Packaging of Additional images') {
             steps {
                script {
                    sh 'docker pull ${OPENIDM_IMAGE_PATH}/${OPENIDM}'
                    sh 'docker pull ${PASSKEY_IMAGE_PATH}/${PASSKEY}'
                    sh 'docker tag ${OPENIDM_IMAGE_PATH}/${OPENIDM} ${OPENIDM}'
                    sh 'docker tag ${PASSKEY_IMAGE_PATH}/${PASSKEY} ${PASSKEY}'
                    sh 'docker save ${OPENIDM} -o scripts/eric-enm-openidm-change-password-docker.tar'
                    sh 'docker save ${PASSKEY} -o scripts/eric-enm-securestorage-regen-passkey-docker.tar'
                    sh 'gzip scripts/eric-enm-securestorage-regen-passkey-docker.tar'
                    sh 'gzip scripts/eric-enm-openidm-change-password-docker.tar'
                }
            }
            post {
                always {
                    sh 'docker image remove ${OPENIDM}'
                    sh 'docker image remove ${PASSKEY}'
                    sh 'docker image remove ${OPENIDM_IMAGE_PATH}/${OPENIDM}'
                    sh 'docker image remove ${PASSKEY_IMAGE_PATH}/${PASSKEY}'
                }
            }
        }
	 stage('Generate new version') {
            steps {
            sh "${bob} generate-new-version"
                script {
	            env.VERSION = "1.02.0-26-CSAR"
                    echo "${VERSION}"
                    env.RSTATE = sh(script: "cat .bob/var.rstate", returnStdout:true).trim()
                    echo "${RSTATE}"
                    env.VNF_PACKAGE_VERSION = sh(script: "echo CXP9041414_$VERSION", returnStdout:true).trim()
                    echo "$VNF_PACKAGE_VERSION"					
                }
            }
        }
	stage('Override integration-values file') {
            steps {
                script {
                    env.integration_values=sh (script: "ls scripts |grep eric-enm-integration-production-values*", returnStdout: true ).trim()
                    overrideIntegrationValues()
                    check_extra_large_values=sh (script: "ls scripts |grep eric-enm-integration-extra-large-production-values*", returnStatus: true )
                    if (check_extra_large_values == 0){
                        env.integration_values=sh (script: "ls scripts |grep eric-enm-integration-extra-large-production-values*", returnStdout: true ).trim()
                        overrideIntegrationValues()
                    }
                    sh "sed -i -z 's/tags:/tags: \\&amp;tags_reference/1' scripts/eric-enm-integration-*"
                    sh "sed -i -z 's/tags:/tags:\\n    *tags_reference/2' scripts/eric-enm-integration-*"
                    sh "sed -i '20,2000{/value_pack_/d}' scripts/eric-enm-integration-*"
                }
            }
        }
        stage('Update manifest details') {
            steps {
                script {
                    sh "sed -i -e '/^vnf_package_version:/s/.*/vnf_package_version: $VNF_PACKAGE_VERSION/' -e '/^vnf_release_date_time:/s/.*/vnf_release_date_time: $VNF_RELEASE_DATE_TIME/' manifest/enm_descriptor.mf"
                    sh("cat manifest/enm_descriptor.mf")
                }
            }
        }
        stage('Update VNFD details') {
            steps {
                script {
                    sh "mkdir -p vnfd_updated"
                    sh "cp vnfd/enm_descriptor.yaml vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;VERSION&gt;&gt;/$VERSION/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;DESCRIPTOR_ID&gt;&gt;/${UUID.randomUUID().toString()}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRODUCT_SET&gt;&gt;/${PRODUCT_SET}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;BRO_CHART_VERSION&gt;&gt;/${BRO_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRE_DEPLOY_CHART_VERSION&gt;&gt;/${PRE_DEPLOY_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    if("${PRODUCT_SET}" &gt; "21.03.57"){
                        sh "sed -i 's/&lt;&lt;MONITORING_CHART_VERSION&gt;&gt;/${MONITORING_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    }
                    sh "sed -i 's/&lt;&lt;INFRA_CHART_VERSION&gt;&gt;/${INFRA_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;STATELESS_CHART_VERSION&gt;&gt;/${STATELESS_CHART_VERSION}/g' vnfd_updated/enm_descriptor.yaml"
                }
            }
        }
        stage('Build CSAR Package') {
            steps {
                script {
                        def AMPackageWithCsar = new AMPackageCommand()
                                .AMPackageImage(defaultAMPackageImage)
                                .needDockerSocket(true)
                                .envVars(['ENM_INSTALLATION_CHART_VERSION': env.INFRA_CHART_VERSION,
                                          'INTEGRATION_VALUE_VERSION': env.INTEGRATION_VALUE_VERSION,
                                ])
                                .toString()
                        sh "${AMPackageWithCsar} generate -hd charts/ --name ${CSAR_PACKAGE_NAME}-${env.VERSION} -sc scripts --set global.restore.state=ongoing -mf manifest/enm_descriptor.mf --history history/ChangeLog.txt --vnfd vnfd_updated/enm_descriptor.yaml --definitions definitions/etsi_nfv_sol001_vnfd_2_5_1_types.yaml --helm3"
                }
            }
        }
        stage('Publish Csar Package to Nexus') {
            steps {
              script {
               env.filesize = sh(script: "du -h ${CSAR_PACKAGE_NAME}-${VERSION}.csar | cut -f1", returnStdout: true).trim()
               sh "bash Jenkins/scripts/upload_to_nexus.sh ${VERSION} ${CSAR_PACKAGE_NAME}-${VERSION}.csar ${repositoryUrl} ${CSAR_PACKAGE_NAME} ${PACKAGE_TYPE}"
               currentBuild.description ="&lt;a href=${repositoryUrl}/cENM/csar/${CSAR_PACKAGE_NAME}/${VERSION}/${CSAR_PACKAGE_NAME}-${VERSION}.csar&gt;${CSAR_PACKAGE_NAME}-${VERSION}.csar&lt;/a&gt; ($filesize)"
              currentBuild.displayName = "CSAR ON : ${ISO_VERSION}"
              }
            }
        }
    }
    post {
        success {
              script {
	              sh 'echo "Testing success"'
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class AMPackageCommand {
    def AMPackageImage = 'AMPackage.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${AMPackageImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}


@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:1.5.2-0'
    def envVars = [:]
    def needDockerSocket = false
    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' \$group; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>