<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This Jenkins Job triggers DSLs for:&lt;br&gt;&#13;
- Release&lt;br&gt;&#13;
- PreCommit&lt;br&gt;&#13;
- PointFix&lt;br&gt;&#13;
&lt;br&gt;&#13;
It can be triggered manually or automatically as part of the new repo creation process.&lt;br&gt;&#13;
&#13;
&lt;br&gt;&#13;
Confluence: &lt;a href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/cENMCICD/Automated+job+to+create+new+Gerrit+repositories+based+on+a+cENM+specific+archetype"&gt;Automated+job+to+create+new+Gerrit+repositories+based+on+a+cENM+specific+archetype&lt;/a&gt;&#13;
&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
          <spec/>
          <gerritProjects>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
              <compareType>PLAIN</compareType>
              <pattern>OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline</pattern>
              <branches>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>PLAIN</compareType>
                  <pattern>master</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              </branches>
              <topics>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Topic>
                  <compareType>PLAIN</compareType>
                  <pattern>VALIDATION</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Topic>
              </topics>
              <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          </gerritProjects>
          <dynamicGerritProjects class="empty-list"/>
          <skipVote>
            <onSuccessful>false</onSuccessful>
            <onFailed>false</onFailed>
            <onUnstable>false</onUnstable>
            <onNotBuilt>false</onNotBuilt>
          </skipVote>
          <silentMode>false</silentMode>
          <notificationLevel/>
          <silentStartMode>false</silentStartMode>
          <escapeQuotes>true</escapeQuotes>
          <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
          <dependencyJobsNames/>
          <commitMessageParameterMode>BASE64</commitMessageParameterMode>
          <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
          <commentTextParameterMode>BASE64</commentTextParameterMode>
          <buildStartMessage/>
          <buildFailureMessage/>
          <buildSuccessfulMessage/>
          <buildUnstableMessage/>
          <buildNotBuiltMessage/>
          <buildUnsuccessfulFilepath/>
          <customUrl/>
          <serverName>__ANY__</serverName>
          <triggerOnEvents>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginChangeMergedEvent/>
          </triggerOnEvents>
          <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
          <triggerConfigURL/>
          <triggerInformationAction/>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>pipeline {
    agent {
        label "Cloud_Native"
    }
    options {
        timestamps()
    }
    stages {
        stage('Checkout Cloud-Native SG Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerritmirror-ha.lmera.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline'
            }
        }
        stage ('pointfix Pipeline') {
            steps {
                build(job: "JobDSL_Generate_E2E_pipeline-pointfix", propagate: true, wait: true)
            }
        }
        stage ('HLC Build') {
            steps {
                script {
                    if ( GERRIT_CHANGE_SUBJECT.contains("repo is enabled in e2e flow and HLC flow") ) {
                        build(job: "Update_HLC_Build_DSL", propagate: true, wait: true)
                    }
                }
            }
        }
        stage ('HLC_pointfix_build') {
            steps {
                script {
                    if ( GERRIT_CHANGE_SUBJECT.contains("repo is enabled in e2e flow and HLC flow") ) {
                        build(job: "Update_HLC_Pointfix_Build_DSL", propagate: true, wait: true)
                    }
                }
            }
        }
        stage ('E2E_Generate_pipeline') {
            steps {
                script {
                    if ( GERRIT_CHANGE_SUBJECT.contains("repo is enabled in e2e flow") ) {
                        build(job: "JobDSL_Generate_E2E_pipeline", propagate: true, wait: true)
                    }
                }
            }
        }
        stage ('HLC_Generate_build') {
            steps {
                script {
                    if ( GERRIT_CHANGE_SUBJECT.contains("repo is enabled in e2e flow and HLC flow") ) {
                        build(job: "E2E_HLC_Build_DSL", propagate: true, wait: true)
                    }
                }
            }
        }
        stage ('HLC_Generate_build') {
            steps {
                script {
                    if ( GERRIT_CHANGE_SUBJECT.contains("repo is enabled in e2e flow and HLC flow") ) {
                        build(job: "E2E_HLC_Build_DSL-pointfix", propagate: true, wait: true)
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>