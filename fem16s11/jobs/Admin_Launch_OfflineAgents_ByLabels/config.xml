<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.1">
          <name>Select_Label</name>
          <randomName>choice-parameter-63761698933094686</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1138.v8e727069a_025">
              <script>import jenkins.model.*
def labelAndNodeList = []

Jenkins.instance.nodes.each { node -&gt;
  node.assignedLabels.each { label -&gt;
    if (label as String != node.name) {
        if(label as String == "TEMP-Cloud-Native" || label as String == "Cloud_Native_Dev" || label as String == "INT_Cloud_Native" || label as String == "Cloud-Native-Pointfix" || label as String == "INT_Cloud_Native_Pointfix" || label as String == "Cloud_Native_Dev-IPV6" || label as String == "TEST-NEW-Cloud13A" ||  label as String == "cENM-SUSE" || label as String == "GE-Docker" || label as String == "CENM_RHEL7_GE" || label as String == "Cloud-Native" || label as String == "Docker-POC" || label as String == "Cloud-Native-CSAR" || label as String == "GridEngine_RHEL7") {
            labelAndNodeList.add(label.toString().concat(":selected"))
        }
        else {
            labelAndNodeList.add(label)
        }
    }      
  }
}

return labelAndNodeList
</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1138.v8e727069a_025">
              <script/>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>Admin_Launch_OfflineAgents_ByLabels</projectName>
          <choiceType>PT_CHECKBOX</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>import hudson.model.*
import hudson.node_monitors.*
import hudson.slaves.*
import java.util.concurrent.*

jenkins = Hudson.instance

boolean offlineSlavesFound = false
def emailReport() {
    def mail_list = ["Admin_Launch_OfflineAgents_ByLabels":"shiva.muriki.ext@ericsson.com"]
        mail_list.each { each_repo,each_email -&gt;
                def Repo_Mail = each_email;
                try {
                    mail to: "${Repo_Mail}",
                    subject: "Slave Status: ${currentBuild.fullDisplayName}",
                    body: "Slave Status on ${env.BUILD_URL}console"
                } catch( err ){
                     echo "$err"
                }
        };
}


String labelsIWantServersOf = "${Select_Label}" 
List serverList = [];

ArrayList aList= new ArrayList(Arrays.asList(labelsIWantServersOf.split(",")));
echo "Selected Labels: " + "${Select_Label}"

//createCsv()

for (i = 0; i &lt; aList.size(); i++)
{
   echo "\n################################# Slaves of " + aList[i] + " #################################"
   echo "----Online Slaves----"
   for(aSlave in hudson.model.Hudson.instance.slaves) {          
        if(aSlave.getLabelString() == aList[i]) {
             if(aSlave.getComputer().isOnline() ){
                  echo aList[i] + "--&gt;" + aSlave.name;
                  serverList.add(aSlave.name);        
             }        
        }
    }
    
    echo "\n----Offline Slaves----"
    for (aSlave in hudson.model.Hudson.instance.slaves) {   
      def computer = aSlave.computer
      def slaveLabel = aSlave.getLabelString() 
      
        if(aSlave.getLabelString() == aList[i]) {
         if(aSlave.getComputer().isOffline() ){
              offlineSlavesFound = true
              echo aList[i] + "--&gt;" + aSlave.name;
              if(aSlave.getComputer().isTemporarilyOffline()) {
                println "The Slave ${computer.name} is " + aSlave.getComputer().getOfflineCause() + "\nThis cannot be auto connected, please connect with user for the reason/relaunch";
              }
              
              if(!aSlave.getComputer().isTemporarilyOffline()) {
                println "The Slave ${computer.name} is " + aSlave.getComputer().getOfflineCause() + " and this was not TemporarilyOffline \nSo, we are trying to relaunch...!";
                computer.connect(true)
              }
              serverList.add(aSlave.name);        
         }
      }    
    }
}
if(offlineSlavesFound == true) {
    emailReport()
}

def createCsv() {
    outString = 'Slave,Status\r\n'
    writeFile file: 'report.csv', text: outString
}

return serverList;




</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>