<?xml version="1.0" encoding="UTF-8"?><flow-definition>
    <actions/>
    <description>ENM Cloud Native Build pipeline eric-enmsg-dpmediation-pull-jfrog - autogenerated using JobDSL - all manual changes will be overwritten!</description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty plugin="workflow-job@1145.v7f2433caa07f">
            <abortPrevious>false</abortPrevious>
        </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                <hudson.model.StringParameterDefinition>
                    <name>REQUIREMENT_FILE</name>
                    <defaultValue/>
                </hudson.model.StringParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <EnvInjectJobProperty>
            <info>
                <propertiesContent>REPO=OSS/com.ericsson.oss.containerisation/eric-enmsg-dpmediation
CHART_DIR=eric-enmsg-dpmediation</propertiesContent>
                <loadFilesFromMaster>false</loadFilesFromMaster>
            </info>
            <on>true</on>
            <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
            <keepBuildVariables>true</keepBuildVariables>
            <overrideBuildParameters>false</overrideBuildParameters>
            <contributors/>
        </EnvInjectJobProperty>
    </properties>
    <triggers/>
    <logRotator>
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
    </logRotator>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition">
        <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *  + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()
def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = 'enmadm100@ericsson.com'
def failedStage = ''

pipeline {
    agent {
        label 'Cloud-Native'
    }
    parameters {
           string(name: 'REQUIREMENT_FILE', description: 'Requirement file')
    }
     environment {
        HOME_DIR = "${WORKSPACE}"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        helm = "docker run --rm -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} helm"
    }
    stages {
        stage('Clean') {
            steps {
                deleteDir()
            }
        }
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage('Download Requirements file') {
            steps {
                sh  "wget ${REQUIREMENT_FILE}"
            script{
                env.version= sh(script: 'grep -A2 "${CHART_DIR}" requirements-file* | grep version | sed "s/version://g" | sed "s/ //g "',returnStdout: true).trim()
                echo "${version}"
                sh "wget https://arm.epk.ericsson.se/artifactory/proj-enm-helm/${CHART_DIR}/${CHART_DIR}-${version}.tgz"               
              }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('pull images') {
            steps {
              script{
                echo "${version}"
                def images=sh(script: '${helm} template ${CHART_DIR}-${version}.tgz | grep -i "image:" | sed "s/image://g" | sed "s/ //g" | sed  "s,armdocker.rnd.ericsson.se,ieatjfrepo1.athtem.eei.ericsson.se/hub,g"',returnStdout: true).trim()
                echo "${images}"
                echo "*******"
                def list_images = images.split('\n')
                for (img in list_images) {
                      sh "docker pull ${img}"
                }
              }
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
	    |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}



</script>
        <sandbox>true</sandbox>
    </definition>
</flow-definition>