<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Artifact_type</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either csar or csar-lite.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>csar_lite</string>
              <string>csar</string>
              <string>snapshot_csar_lite</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Provide clould native product set version</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_size</name>
          <description>Select the type of integration values type to be used.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>small-production</string>
              <string>extra-large-production</string>
              <string>single-instance</string>
              <string>multi-instance</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>snapshot_csar_lite_location</name>
          <description>Provide the location of the snapshot_csar_lite</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>slave</name>
          <defaultValue/>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env python3
import argparse
//from subprocess import call, Popen, PIPE
import sys
import os
import logging

PWD = os.getcwd()
sys.path.append(PWD)

from keyvalues import config

logging.basicConfig(level=logging.INFO,format='%(message)s')
val_file_dic = {
        'single-instance':'eric-enm-single-instance-production-integration-values',
        'multi-instance':'eric-enm-multi-instance-functional-integration-values',
        'small-production':'eric-enm-integration-production-values',
        'extra-large-production':'eric-enm-integration-extra-large-production-values'
    }

val_file_types = ['eric-enm-single-instance-production-integration-values','eric-enm-multi-instance-functional-integration-values']

lite_package_name = "enm-lite-installation-package"
package_name = "enm-installation-package"

def execute_call_command(cmd):
    logging.info('+ '+cmd)
    rc = call(cmd,shell=True)
    sys.exit(1) if rc!=0 else 'continue'

def execute_popen_command(cmd):
    logging.info('+ '+cmd)
    output = Popen(cmd, shell = True, stdout=PIPE)
    output.wait()
    rc = output.returncode
    op = output.communicate()[0].decode("utf-8").strip()
    sys.exit(1) if rc!=0 else 'continue'
    logging.info(op)
    return op

def get_productset_content(drop,args):
    cmd = "curl -4 --location --request GET '{0}/api/cloudnative/getCloudNativeProductSetContent/{1}/{2}/'&gt;cn_confidence_level_response.json".format(args.ci_portal,drop,args.product_set_version)
    execute_call_command(cmd)

def download_n_extract_csar():
    cmd = "jq '.[0].csar_data|.[]|select(.csar_name==\"{}\")|.csar_version' cn_confidence_level_response.json|sed 's/\"//g'".format(package_name)
    csar_package_version= execute_popen_command(cmd)
    cmd = "jq '.[0].csar_data|.[]|select(.csar_name==\"{}\")|.csar_dev_url' cn_confidence_level_response.json|sed 's/\"//g'".format(package_name)
    csar_dev_url = execute_popen_command(cmd)
    cmd = "jq '.[0].csar_data|.[]|select(.csar_name==\"{}\")|.csar_name' cn_confidence_level_response.json|sed 's/\"//g'".format(package_name)
    csar_package_name = execute_popen_command(cmd)
    cmd = 'curl -4 --noproxy \"*\" -sL "{0}" -o cENM/{1}-{2}.csar'.format(csar_dev_url,csar_package_name,csar_package_version)
    execute_call_command(cmd)
    cmd = "unzip -o cENM/{0}-{1}.csar -d cENM/".format(csar_package_name,csar_package_version)
    execute_call_command(cmd)


def download_n_extract_csar_lite():
    cmd = "jq '.[0].csar_data|.[]|select(.csar_name==\"{}\")|.csar_version' cn_confidence_level_response.json|sed 's/\"//g'".format(lite_package_name)
    csar_lite_package_version= execute_popen_command(cmd)
    cmd = "jq '.[0].csar_data|.[]|select(.csar_name==\"{}\")|.csar_dev_url' cn_confidence_level_response.json|sed 's/\"//g'".format(lite_package_name)
    csar_lite_dev_url = execute_popen_command(cmd)
    cmd = "jq '.[0].csar_data|.[]|select(.csar_name==\"{}\")|.csar_name' cn_confidence_level_response.json|sed 's/\"//g'".format(lite_package_name)
    csar_lite_package_name = execute_popen_command(cmd)
    cmd = 'curl -4 --noproxy \"*\" -sL "{0}" -o cENM_lite/{1}-{2}.csar'.format(csar_lite_dev_url,csar_lite_package_name,csar_lite_package_version)
    execute_call_command(cmd)
    cmd = "unzip -o cENM_lite/{0}-{1}.csar -d cENM_lite/".format(csar_lite_package_name,csar_lite_package_version)
    execute_call_command(cmd)
	
def download_n_extract_snapshot_csar_lite(snapshot_artifact_location):
    snapshot_csar_lite_package_version =  snapshot_artifact_location.split('enm-lite-installation-package-kgb')[1].split('/')[1]
	cmd = 'curl -4 --noproxy \"*\" -sL "{0}" -o cENM_lite/{1}-{2}.csar'.format(snapshot_artifact_location,'enm-lite-installation-package-kgb',snapshot_csar_lite_package_version)
    execute_call_command(cmd)
    cmd = "unzip -o cENM_lite/{0}-{1}.csar -d cENM_lite/".format('enm-lite-installation-package-kgb',snapshot_csar_lite_package_version)
    execute_call_command(cmd)

def download_artifacts(args):
    if args.artifact_type == 'snapshot_csar_lite' and args.snapshot_artifact_location != '':
	    download_n_snapshot_csar_lite(args.snapshot_artifact_location)
    else:
        drop = '.'.join(args.product_set_version.split('.')[:2])
        get_productset_content(drop,args)
        if args.artifact_type == 'csar' and val_file_dic[args.deployment_size] in val_file_types:
            download_n_extract_csar()
            download_n_extract_csar_lite()
        elif args.artifact_type == 'csar':
            download_n_extract_csar()
        else:
            download_n_extract_csar_lite()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--product_set_version",
                        dest="product_set_version",
                        nargs='?',
                        const='',
                        required = False)
    parser.add_argument("--artifact_type",
                        dest="artifact_type",
                        required = True)
    parser.add_argument("--ci_portal",
                        dest="ci_portal",
                        required = True)
    parser.add_argument("--snapshot_artifact_location",
                        dest="snapshot_artifact_location",
                        nargs='?',
                        const='',
                        required = False)
    parser.add_argument("--deployment_size",
                        dest="deployment_size",
                        nargs='?',
                        const='',
                        help="Type of the top level values file.",
                        required = False)

    args = parser.parse_args()
    download_artifacts(args)

#Execute
main()
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>