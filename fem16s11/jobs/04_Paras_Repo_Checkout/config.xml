<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>//def cENMImageRepos = [&apos;OSS/com.ericsson.oss.containerisation/eric-enmsg-vault-service&apos;]
def cENMImageRepos = [&apos;OSS/com.ericsson.oss.containerisation/eric-enmsg-elasticsearch&apos;,&apos;OSS/com.ericsson.oss.containerisation/eric-enmsg-gossiprouter-cache&apos;,&apos;OSS/com.ericsson.oss.containerisation/eric-enmsg-gossiprouter-eap7&apos;,&apos;OSS/com.ericsson.oss.containerisation/eric-enmsg-gossiprouter-remoting&apos;,&apos;OSS/com.ericsson.oss.containerisation/eric-enmsg-nb-alarm-irp-agent-corba&apos;]

pipeline {
    agent {
        label &apos;paraslabel&apos;
    }
    stages {
    stage(&apos;Update&apos;) {
            steps {
                script {
                    deleteDir()
                    cENMImageRepos.each {
                        cloneRepo(it)
                        updateRuleset(it)
                    }
                }
            }
        }
    }
}

def cloneRepo(repo) {
    print repo
    // try {
    
   sh &quot;git clone ${GERRIT_CENTRAL}/${repo}&quot;
    // } catch (err) {
    //     echo &apos;Error cloning repo &lt;&apos; + repo + &apos;&gt; :&apos; + err.toString()
    //     currentBuild.result = &quot;UNSTABLE&quot;
    // }
}

def updateRuleset(repo) {

workingDir = repo.split(&apos;/&apos;).last()
    dir(workingDir) {
        sh &apos;pwd&apos;
                script {
                    sh (script: &quot;echo&quot;)
                }
}
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>