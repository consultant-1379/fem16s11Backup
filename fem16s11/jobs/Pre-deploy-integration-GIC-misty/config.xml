<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SPRINT_TAG</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enmsg-mssnmpfm - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Tag for GIT tagging the repository after build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REQUIREMENTS_FILE</name>
          <defaultValue>https://arm.seli.gic.ericsson.se/artifactory/proj-enm-e2e-ci-generic-local/requirements-file/requirements-file-20.13.43.yaml</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>/* IMPORTANT:
*
* In order to make this pipeline work, the following configuration on Jenkins is required:
* - slave with a specific label (see pipeline.agent.label below)
* - credentials plugin should be installed and have the secrets with the following names:
*   + lciadm100credentials (token to access Artifactory)
*/

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:1.7.0-54&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;, PRODUCT_SET: &apos;${PRODUCT_SET}&apos;, SPRINT_TAG: &apos;${SPRINT_TAG}&apos;])
        .needDockerSocket(true)
        .toString()

def bobInCA = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .envVars([
        ARM_API_TOKEN     : &apos;${ARM_CREDENTIALS_PSW}&apos;,
        REQUIREMENTS_FILE : &apos;${REQUIREMENTS_FILE}&apos;,
        CHART_PATH        : &apos;${CHART_PATH}&apos;,
        GIT_REPO_URL      : &apos;${GIT_REPO_URL}&apos;,
        HELM_INTERNAL_REPO: &apos;${HELM_INTERNAL_REPO}&apos;,
        HELM_DROP_REPO    : &apos;${HELM_DROP_REPO}&apos;,
        HELM_RELEASED_REPO: &apos;${HELM_RELEASED_REPO}&apos;,
        GERRIT_USERNAME   : &apos;${GERRIT_CREDENTIALS_USR}&apos;,
        GERRIT_PASSWORD   : &apos;${GERRIT_CREDENTIALS_PSW}&apos;,
])
        .toString()


def GIT_COMMITTER_NAME = &apos;enmadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;enmadm100@ericsson.com&apos;


pipeline {
    agent {
        label &apos;Docker-POC-e2e&apos;
    }
    parameters {
        string(name: &apos;SPRINT_TAG&apos;, description: &apos;Tag for GIT tagging the repository after build&apos;)
    }
    environment {
        GERRIT_CREDENTIALS = credentials(&apos;cenmbuild_gerrit_api_token&apos;)
        ARM_CREDENTIALS = credentials(&apos;cenmbuild_ARM_token&apos;)
        CHART_PATH = &quot;chart/eric-enm-pre-deploy-integration&quot;
        REPO = &quot;OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration&quot;
        GIT_REPO_URL = &quot;${GERRIT_CENTRAL_HTTP}/a/${REPO}&quot;
        HELM_INTERNAL_REPO = &quot;https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/&quot;
        HELM_DROP_REPO = &quot;https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/&quot;
        HELM_RELEASED_REPO = &quot;https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/&quot;
    }
    stages {
        stage(&apos;Clean workspace&apos;) {
            steps {
                deleteDir()
            }
        }
        stage(&apos;Checkout Cloud-Native Git Repository&apos;) {
            steps {
                git branch: &apos;master&apos;,
                        url: &apos;${GERRIT_MIRROR}/OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration&apos;
                sh &apos;&apos;&apos;
                 echo ${GERRIT_CENTRAL}
                 git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                   &apos;&apos;&apos;
            }
        }

        stage(&apos;Lint Helm&apos;) {
            steps {
                sh &quot;${bob} lint-only-helm&quot;
            }
        }
        stage(&apos;ADP Helm Design Rule Check&apos;) {
            steps {
                sh &quot;${bob} test-helm || true&quot;
                archiveArtifacts &apos;design-rule-check-report.*&apos;
            }
        }
        stage(&apos;Update versions in values.yaml file&apos;) {
            steps {
                echo sh(script: &apos;env&apos;, returnStdout: true)
                step([$class: &apos;CopyArtifact&apos;, projectName: &apos;sync-build-trigger-tst&apos;, filter: &quot;*&quot;]);
                sh &quot;${bob} swap-latest-versions-with-numbers&quot;
                sh &apos;&apos;&apos;
                    if git status | grep &apos;values.yaml&apos; &gt; /dev/null; then
                        git commit -m &quot;NO JIRA - Updating Values.yaml files with version&quot;
                        git push origin HEAD:master
                    fi
                &apos;&apos;&apos;
                //wait for gerrit sync
                checkGerritSync()
            }
        }
	/*
        stage(&apos;Publish Helm Chart&apos;) {
            steps {
                script {
                    sh &quot;${bobInCA} publishwithreq&quot;
                    archiveArtifacts &apos;artifact.properties&apos;
                }
            }
        }
	*/
        stage(&apos;Update Version prefix&apos;) {
            steps {
                script {
                    //temp until VERSION_PREFIX is deprecated in pointfix
                    sh &apos;&apos;&apos;
                            echo ${INT_CHART_VERSION} | sed &apos;s/-.*$//&apos; &gt;VERSION_PREFIX
                            if git status | grep &apos;VERSION_PREFIX&apos; &gt; /dev/null; then
                                git add VERSION_PREFIX
                                git commit -m &quot;Version prefix update&quot;
                                echo &quot;VERSION PREFIX UPDATE&quot;
                            git push origin HEAD:master
                            fi
                        &apos;&apos;&apos;
                    //wait for gerrit sync
                    checkGerritSync()
                }
            }
        }
        stage(&apos;Generate pre-deploy Parameters&apos;) {
            steps {
                script {
                     sh &apos;&apos;&apos;
                            echo ${INT_CHART_VERSION} &gt; ./.bob/var.version
                            git rev-parse --verify HEAD &gt; .bob/var.commit-hash
                        &apos;&apos;&apos;
        //            env.PRE_DEPLOY_CHART_VERSION = readFile(&apos;.bob/var.version&apos;).trim()
        //          sh &apos;cp .bob/eric-enm-pre-deploy-integration-$PRE_DEPLOY_CHART_VERSION.tgz .&apos;
        //            env.PRE_DEPLOY_CHART_FILE_SIZE = sh(script: &apos;du -b eric-enm-pre-deploy-integration-$PRE_DEPLOY_CHART_VERSION.tgz | cut -f1&apos;, returnStdout: true).trim()
        //            def bobWithPreDeployInfo = new BobCommand()
        //                                .bobImage(defaultBobImage)
        //                                .needDockerSocket(true)
        //                                .envVars([
        //                                        &apos;PRODUCT_SET&apos;        : env.PRODUCT_SET,
        //                                        &apos;ISO_VERSION&apos;       : env.ISO_VERSION,
        //                                        &apos;PRE_DEPLOY_CHART_FILE_SIZE&apos; : env.PRE_DEPLOY_CHART_FILE_SIZE
        //                                ])
        //                                .toString()
        //            sh &quot;${bobWithPreDeployInfo} generate-pre-deploy-int-metadata-parameters&quot;
        //            archiveArtifacts &apos;pre-deploy-int-metadata-artifact.json&apos;
                }
            }
        }
    }
    post {
        success {
            script {
                echo &quot;pushed successfully&quot;
                sh &apos;&apos;&apos;
                            set +x
                            #ADD tag Cloud-Native to Repository
                            #git tag --annotate --message &quot;Tagging Version&quot; --force ${INT_CHART_VERSION}
                            #git push --force origin ${INT_CHART_VERSION}
                            git tag --annotate --message &quot;Tagging latest in sprint&quot; --force $SPRINT_TAG HEAD
                            git push --force origin $SPRINT_TAG
                            git tag --annotate --message &quot;Tagging latest in sprint with ISO version&quot; --force ${SPRINT_TAG}_iso_${ISO_VERSION} HEAD
                            git push --force origin ${SPRINT_TAG}_iso_${ISO_VERSION}
                            git tag --annotate --message &quot;Tagging latest in sprint with Product Set version&quot; --force ps_${PRODUCT_SET} HEAD
                            git push --force origin ps_${PRODUCT_SET}
                        &apos;&apos;&apos;
            }
        }
        failure {
            mail to: &apos;rakesh.thummala1-external@tcs.com&apos;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}

def checkGerritSync() {
    sh &apos;&apos;&apos;
                RETRY=6
                SLEEP=10

                # check if branch was passed as arg, else use Jenkins working branch
                [ -n &quot;$1&quot; ] &amp;&amp; branch=$1 || branch=${GIT_BRANCH##*/}

                # get the commit ID&apos;s on GC master and mirror
                echo &quot;INFO: Checking commit ID&apos;s for &apos;$branch&apos; branch on Gerrit Central.&quot;
                gcr=$(git ls-remote -h ${GERRIT_CENTRAL}/${REPO} ${branch} | awk &apos;{print $1}&apos;)
                gmr=$(git ls-remote -h ${GERRIT_MIRROR}/${REPO} ${branch} | awk &apos;{print $1}&apos;)
                echo &quot;INFO: central: ${gcr}&quot;
                echo &quot;INFO: mirror:  ${gmr}&quot;

                # compare master and mirror
                if [[ &quot;${gcr}&quot; != &quot;${gmr}&quot; ]]; then
                echo &quot;INFO: Gerrit central and mirror are out of sync.&quot;
                echo &quot;INFO: Waiting a maximum of $((RETRY*SLEEP)) seconds for sync.&quot;

                retry=0
                # retry a number of times
                while (( retry &lt; RETRY )); do
                    echo &quot;INFO: Attempting retry #$((retry+1)) of $RETRY in $SLEEP seconds.&quot;
                    sleep $SLEEP

                    gcr=$(git ls-remote -h ${gcu} ${branch} | awk &apos;{print $1}&apos;)
                    gmr=$(git ls-remote -h ${gmu} ${branch} | awk &apos;{print $1}&apos;)
                    echo &quot;INFO: central: $gcr, mirror: $gmr&quot;

                    # compare master and mirror, again
                    if [ &quot;${gcr}&quot; = &quot;${gmr}&quot; ]; then
                        echo &quot;INFO: fetching latest changes on branch $branch.&quot;
                        git fetch
                        break
                    fi

                    ((retry++))
                done
                fi

                # if still out of sync, fail the job
                [ &quot;${gcr}&quot; != &quot;${gmr}&quot; ] &amp;&amp; echo &quot;ERROR: Gerrit central and mirror out of sync.&quot; &amp;&amp; exit 1
                # Check we&apos;re on the correct (synced) revision
                [ &quot;${GIT_COMMIT}&quot; != &quot;${gmr}&quot; ] &amp;&amp; echo -e &quot;*** WARNING: Not using latest revision.\nFetching upstream changes again from $gmu. ***&quot; &amp;&amp; git fetch
                echo &quot;INFO: Branch in sync between Gerrit central and mirror.&quot;
            &apos;&apos;&apos;
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
                    |docker run
                    |--init
                    |--rm
                    |--workdir \${PWD}
                    |--user \$(id -u):\$(id -g)
                    |-v \${PWD}:\${PWD}
                    |-v /etc/group:/etc/group:ro
                    |-v /etc/passwd:/etc/passwd:ro
                    |-v \${HOME}/.m2:\${HOME}/.m2
                    |-v \${HOME}/.docker:\${HOME}/.docker
                    |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
                    |${env}
                    |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
                    |--group-add \$(stat -c &apos;%g&apos; /var/run/docker.sock)
                    |${bobImage}
                    |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>