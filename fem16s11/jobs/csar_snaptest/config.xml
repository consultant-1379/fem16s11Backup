<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INTEGRATION_VALUE_FILE</name>
          <description>This parameter will work for the automatic BUILD_TYPE and whichever value is chosen that file will be written as production values and further process will continue.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-extra-large-production-values</string>
              <string>eric-enm-integration-kaas-core-values</string>
              <string>eric-enm-integration-openstack-core-values</string>
              <string>eric-enm-integration-functional-kaas-values</string>
              <string>eric-enm-integration-functional-test-values</string>
              <string>eric-enm-integration-production-values</string>
              <string>eric-enm-single-instance-production-integration-values</string>
              <string>eric-enm-multi-instance-functional-integration-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Add the sprint tag for the product set version selected.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SLAVE</name>
          <description>Please provide slave details
</description>
          <defaultValue>CENM_RHEL7_GE_csar_1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>snapshot_artifacts</name>
          <description>example: eric-enm-stateless-integration::https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm//eric-enm-stateless-integration/eric-enm-stateless-integration-1.19.0-24-h6d746e6.tgz</description>
          <defaultValue>eric-enm-stateless-integration::https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm//eric-enm-stateless-integration/eric-enm-stateless-integration-1.19.0-24-h6d746e6.tgz</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.28'
def metadataImage = 'test:1.0.1'
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()
def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''
def check_version_a_newer_than_version_b(latest_productset_version,old_productset_version) {
    if(latest_productset_version &gt; old_productset_version){
        return true
    } else{
        return false
    }
}


pipeline {
    agent {
            node
            {
            label SLAVE
            }
        }
    environment{
        repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        CSAR_PACKAGE_NAME = "enm-installation-package"
        OPENIDM = "eric-enm-openidm-change-password:latest"
	    PASSKEY =  "eric-enm-securestorage-regen-passkey"
        OPENIDM_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
	    PASSKEY_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
        PACKAGE_TYPE="csar"
        VERSION="1.18.0-16-h987f80d"
        filesize="19G"
        INFRA_CHART_VERSION="1.27.0-23"
        STATELESS_CHART_VERSION="1.27.0-23"
        ISO_VERSION="2.4.7"
    }
    stages {
        stage ('Clean workspace') {
          steps {
                script {
                          echo "deleting images"
               }
            /*deleteDir()*/
         }
        }

       stage('Generate CSAR metadata') {
            steps {
                script {
                        //sh 'git rev-parse --verify HEAD &gt; commit-hash'
                        def AMPackageWithCsarMetadata = new AMPackageCommand()
                                .AMPackageImage(metadataImage)
                                .needDockerSocket(true)
                                .envVars(['INFRA_CHART_VERSION': env.INFRA_CHART_VERSION,
                                          'STATELESS_CHART_VERSION': env.STATELESS_CHART_VERSION,
                                ])
                                .toString()
                        sh "${AMPackageWithCsarMetadata} generate-csar-metadata-artifacts --int-chart-repo https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/ --iso-version ${ISO_VERSION} --int-chart-location charts --int-values-file-repo https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/ --int-values-file-location scripts --csar-package-version ${VERSION} --file_size ${filesize} --base-csar-repo https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/cENM/csar/enm-installation-package/ --product-set ${PRODUCT_SET} --name enm-installation-package"
                        archiveArtifacts 'csar-metadata-artifacts.json'
                        /*env.CSAR_CONTENTS_FILE_URL='https://arm.seli.gic.ericsson.se/artifactory/proj-enm-e2e-ci-generic-local/csar-contents/csar-metadata-artifacts-'+PRODUCT_SET+'.json'
                        sh 'curl -4 -u ${CENMBUILD_ARM_TOKEN} -X PUT -T csar-metadata-artifacts.json ${CSAR_CONTENTS_FILE_URL}||true'*/
                }
            }
        }
    }    
    post {
        success {
              script {
	              sh 'echo "Testing success"'
            }
        }
    }
}

def remove_yaml_with_artifacts(){
     try{
        snapshot_string="${SNAPSHOT_ARTIFACTS}"
     }
     catch(Exception ex){
        snapshot_string=""
     }

     if(snapshot_string != ""){
          echo "${snapshot_string}"
          def snapshot_artifacts_list=snapshot_string.split("@@")
          for (item in snapshot_artifacts_list){
                 println(item)
                 def integration_value_file_name=item.split("::")[0]
                 println(integration_value_file_name)
                 def values_file_URL=item.split("::")[1]
                 println(values_file_URL)
                 if ("${integration_value_file_name}" == "eric-enm-integration-functional-kaas-values"){
		     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
                     env.integration_value_version=version
	             sh "rm -rf  scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-functional-test-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-production-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
			 
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-kaas-core-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-openstack-core-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
	         if ("${integration_value_file_name}" == "eric-enm-single-instance-production-integration-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
		 }
		 if ("${integration_value_file_name}" == "eric-enm-multi-instance-functional-integration-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
		 }
		 if ("${integration_value_file_name}" == "eric-enm-integration-extra-large-production-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
		 }
			                
              }
     }
     else{
        echo "no snapshot string is provided"
     }
}

def remove_tgz_with_artifacts(){
     try{
        snapshot_string="${SNAPSHOT_ARTIFACTS}"
     }
     catch(Exception ex){
        snapshot_string=""
     }

     if(snapshot_string != ""){
          echo "${snapshot_string}"
          def snapshot_artifacts_list=snapshot_string.split("@@")
          for (item in snapshot_artifacts_list){
                 println(item)
                 def chart_name=item.split("::")[0]
                 println(chart_name)
                 def chart_URL=item.split("::")[1]
                 println(chart_URL)
                 version=chart_URL.split("-integration-")[1].split(".tgz")[0]
                 println(version)
                 if ("${chart_name}" == "eric-enm-bro-integration"){
                     env.bro_chart_version=version
		     env.bro_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-monitoring-integration"){
                     env.monitoring_chart_version=version
		     env.monitoring_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-pre-deploy-integration"){
                     env.pre_deploy_chart_version=version
		     env.pre_deploy_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-infra-integration"){
                     env.infra_chart_version=version
		     env.infra_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-stateless-integration"){
                     env.stateless_chart_version=version
		     env.stateless_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 } 
              }
     }
     else{
        echo "no snapshot string is provided"
     }             
}

def get_cn_build_version_info(){
       echo "Product Set Version: ${PRODUCT_SET}"
       sh "curl -4 --location --request GET 'https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudnative/getCloudNativeProductSetContent/${SPRINT_TAG}/${PRODUCT_SET}/'&gt;cn_confidence_level_response.json"
            env.infra_chart_version= sh (script : "./jq '.[1] .integration_charts_data|.[] | select(.chart_name==\"eric-enm-infra-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.infra_chart_version==''){
               error("Invalid Infra Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.bro_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-bro-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.bro_chart_version==''){
               error("Invalid Bro Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.pre_deploy_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-pre-deploy-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.pre_deploy_chart_version==''){
               error("Invalid Predeploy Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.stateless_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-stateless-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.stateless_chart_version==''){
               error("Invalid Stateless Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            if (check_version_a_newer_than_version_b("${PRODUCT_SET}","21.03.57")){
                env.monitoring_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-monitoring-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                if(env.monitoring_chart_version==''){
                    error("Invalid Monitoring Integration chart provided. There is no Cloud native content for the given Product Set Version.")
                    }
                  }
            else {
                env.monitoring_chart_version = ''
             }
            env.integration_value_version= sh (script : "./jq -r '.[2].integration_values_file_data[0].values_file_version' cn_confidence_level_response.json", returnStdout: true).trim()
            if(env.integration_value_version==''){
               error("Invalid Integration values provided. There is no Cloud native content for the given Product Set Version.")
            }
            println("bro integration chart version":env.bro_chart_version)
            println("pre deploy integration chart version":env.pre_deploy_chart_version)
            println("infra integration chart version":env.infra_chart_version)
            println("stateless integration chart version":env.stateless_chart_version)
            println("integration values version":env.integration_value_version)
			println ("monitoring integration chart version":env.monitoring_chart_version)
            env.INTEGRATION_VALUE_VERSION= integration_value_version
}

def download_charts_ci_internal(){
        try{
          if(env.bro_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${bro_chart_version}.tgz -o charts/eric-enm-bro-integration-${bro_chart_version}.tgz"
          }
          if (check_version_a_newer_than_version_b("${PRODUCT_SET}","21.03.57")){
              if(env.monitoring_chart_version != ''){
                   sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${monitoring_chart_version}.tgz -o charts/eric-enm-monitoring-integration-${monitoring_chart_version}.tgz"
              }
          }
          if(env.pre_deploy_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${pre_deploy_chart_version}.tgz -o charts/eric-enm-pre-deploy-integration-${pre_deploy_chart_version}.tgz"
          }
          if(env.infra_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${infra_chart_version}.tgz -o charts/eric-enm-infra-integration-${infra_chart_version}.tgz"
          }
          if(env.stateless_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${stateless_chart_version}.tgz -o charts/eric-enm-stateless-integration-${stateless_chart_version}.tgz"
          }
     }catch( err ) {
        echo "$err"
        sh "exit 1"
      }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class AMPackageCommand {
    def AMPackageImage = 'AMPackage.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${AMPackageImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:1.5.2-0'
    def envVars = [:]
    def needDockerSocket = false
    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' \$group; done)
		    |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>