<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline MTE_cENM_Initial_Install - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Job Type</name>
          <description>Select Install for rollout of cENM.this selection will first teardown your project i.e delete all existing helm chart, pvc and jobs</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Install</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>Deployment name of cENM Cloud Deployment to be Install</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>SLAVE</name>
          <description>The minimum required softwares and its versions needed for Slave are Kubernetes Client Version v1.17.3, Docker client version 17.04.0-ce, Helm version 3.2.0 or higher </description>
          <defaultValue>Cloud-Native-Template-version-002</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

import groovy.json.JsonSlurper

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 */



			  

def integration_values_file_keys_exists(element, keys,value){
     def str = keys.tokenize(".");
	 def update
    _element = element
	update = element
     for (i = 0; i &lt; str.size(); i++) {
        try{
            _element = _element[str[i]]
           } catch( err ) {
              println "mot present" 
              return false;
            }
    	}
      println "present"
      println "________________"
	  println "${value}"
	  println "value"
      update= "value"
	  println update
	 return true
}	
def updateIntegrationValues() {
    try {
	def integration_value_map = {
  global.persistentVolumeClaim.storageClass:'${STORAGE_CLASS}',
  eric-ctrl-bro.persistence.persistentVolumeClaim.storageClassName:'${STORAGE_CLASS}'
	}
          filename = "${HOME_DIR}/${INTEGRATION_VALUE_FILE}"
                values = readYaml file: filename

                for (Repo in integration_value_map){
                def value = Repo.value
                def key = Repo.key
				println "${value}"
				println "${env.value}"
				println Repo.value
				println Repo.key
				 integration_values_file_keys_exists( values, key, value)
				}

        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        sh "exit 1"
    }
}



pipeline{
    agent {
            node
            {
            label SLAVE
            }
        }
    environment {
        HOME_DIR = "${WORKSPACE}"
        https_proxy = "http://www-proxy.lmera.ericsson.se:8080/"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage( 'Site Config Properties' ) {
            steps {
                 script{
                         def site_config_properties = readProperties  (file:"Site-Config-File/${environment_name}")
                         env.KUBE_CRED = site_config_properties['KUBE_CRED']
                         env.NAMESPACE = site_config_properties['NAMESPACE']
                         env.RWX_STORAGE_CLASS =site_config_properties['RWX_STORAGE_CLASS']
                         env.STORAGE_CLASS =site_config_properties['STORAGE_CLASS']
                         env.TIME_ZONE=site_config_properties['TIME_ZONE']
                         env.HOST_SYSTEM_IDENTIFIER = site_config_properties['HOST_SYSTEM_IDENTIFIER']
                         env.ENM_LAUNCHER_HOSTNAME=site_config_properties['ENM_LAUNCHER_HOSTNAME']
                         env.EMAIL_LIST=site_config_properties['EMAIL_LIST']
                         env.COM_INF_LDAP_ROOT_SUFFIX= site_config_properties['COM_INF_LDAP_ROOT_SUFFIX']
                         env.COM_INF_LDAP_ADMIN_CN=site_config_properties['COM_INF_LDAP_ADMIN_CN']
                         env.ENVIRONMENT_TYPE=site_config_properties['ENVIRONMENT_TYPE']
                         echo "${ENVIRONMENT_TYPE}"
                          if (ENVIRONMENT_TYPE.equals("kaas")) {
                             env.LB_EXTERNAL_PORT=site_config_properties['LB_EXTERNAL_PORT']
                             env.INTEGRATION_VALUE_FILE="eric-enm-integration-functional-kaas-values-${INTEGRATION_VALUE_VERSION}.yaml"
                         } else if (ENVIRONMENT_TYPE.equals("openstack")){
                                env.INTEGRATION_VALUE_FILE="eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml"
                               env.FM_VIP_ADDRESS = site_config_properties['FM_VIP_ADDRESS']
                               env.CM_VIP_ADDRESS = site_config_properties['CM_VIP_ADDRESS']
                               env.PM_VIP_ADDRESS = site_config_properties['PM_VIP_ADDRESS']
                               env.AMOS_VIP_ADDRESS = site_config_properties['AMOS_VIP_ADDRESS']
                               env.ELEMENT_MANAGER_VIP = site_config_properties['ELEMENT_MANAGER_VIP']
                               env.SCRIPT_VIP_ADDRESS = site_config_properties['SCRIPT_VIP_ADDRESS']
                               env.UI_VIP_ADDRESS = site_config_properties['UI_VIP_ADDRESS']
                               env.VISINAMINGSB_VIP_ADDRESS = site_config_properties['CM_VIP_ADDRESS']
                         } else {
                           echo "Please provide correct Environment Type In site-config file of the Job"
                           exit 1
                         }
                         env.kubeConfig = "${workspace}/.kube/${KUBE_CRED}"
                         env.helm = "docker run --rm -v ${kubeConfig}:/root/.kube/config -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} helm3"
                         env.kubectl = "docker run --rm  -v ${kubeConfig}:/root/.kube/config -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} kubectl"
                      }
              }
        }
         stage('integration value version'){
            steps{
                  script {
                     sh "wget https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-integration-values/${INTEGRATION_VALUE_FILE}"
                     echo "Updating Integration values files"
                     updateIntegrationValues()
                 }
            }
        }
       
        
    }
    post{
        failure {
            script{
                echo "Failure"
              
            }
        }
        aborted{
            script{
                echo "Aborted"
             
            }
        }
        success{
            script{
                echo "Success"
                
            }
        }
        always {
            script{
                currentBuild.displayName = "initial_install on : ${environment_name}"
                
                archiveArtifacts "${INTEGRATION_VALUE_FILE}"
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>