<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>ENM Cloud Native precommit pipeline eric-enmsg-test - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO_NAME=eric-enmsg-test
CHART_DIR=eric-enmsg-test</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
      <contributors/>
    </EnvInjectJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
          <spec></spec>
          <gerritProjects>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
              <compareType>PLAIN</compareType>
              <pattern>eric-enmsg-test</pattern>
              <branches>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>PLAIN</compareType>
                  <pattern>master</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              </branches>
              <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          </gerritProjects>
          <silentMode>false</silentMode>
          <silentStartMode>false</silentStartMode>
          <escapeQuotes>true</escapeQuotes>
          <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
          <commitMessageParameterMode>BASE64</commitMessageParameterMode>
          <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
          <commentTextParameterMode>PLAIN</commentTextParameterMode>
          <buildStartMessage></buildStartMessage>
          <buildFailureMessage></buildFailureMessage>
          <buildSuccessfulMessage></buildSuccessfulMessage>
          <buildUnstableMessage></buildUnstableMessage>
          <buildNotBuiltMessage></buildNotBuiltMessage>
          <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
          <customUrl></customUrl>
          <serverName>__ANY__</serverName>
          <triggerOnEvents>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
              <excludeDrafts>false</excludeDrafts>
              <excludeTrivialRebase>false</excludeTrivialRebase>
              <excludeNoCodeChange>false</excludeNoCodeChange>
              <excludePrivateState>false</excludePrivateState>
              <excludeWipState>false</excludeWipState>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          </triggerOnEvents>
          <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
          <triggerConfigURL></triggerConfigURL>
          <triggerInformationAction/>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)&quot;,
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
        .needDockerSocket(true)
        .toString()
def failedStage = &apos;&apos;
def emailReport() {
    def mail_list = [&quot;eric-enmsg-access-control&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-amos&quot;:&quot;PDLENMOUTS@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-cellserv&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-autoprovisioning&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-cmevents&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-cmutilities&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-com-ecim-mscm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-comecimpolicy&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-dc-history&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-domain-proxy-coordinator&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enm-dps-schemamgt&quot;:&quot;PDLENIGMAE@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-dlms&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-dpmediation&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-eventbasedclient&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-element-manager&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-flowautomation&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-fm-alarm-processing&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-fm-history&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-fm-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-general-scripting&quot;:&quot;PDLENMOUTS@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-gossiprouter-cache&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-gossiprouter-remoting&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-identity-mgmt-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-import-export-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-ip-service-management&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-jmsserver&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-kpi-calc-serv&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-kpi-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-lcmservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-medrouter&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msap&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msapgfm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mscm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mscmapg&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mscmip&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msfm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mskpirt&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msnetlog&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mspm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mspmip&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mssnmpfm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mssnmpcm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nbi-bnsi-fm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nb-alarm-irp-agent-corba&quot;:&quot;EricssonHyderabad.ENMGalaxy@tcs.com&quot;,&quot;eric-enmsg-nb-fm-snmp&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nodecli&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nedo-serv&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-networkexplorer&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-node-plugins&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-openidm&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-pmservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-pki-ra-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-pmic-router-policy&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-sso&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-openidm&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-sps-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-supervisionclient&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-sa-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-security-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-sentinel&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-shm-core-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-shmservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-smrs-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-uiservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-visinaming-nb&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-visinaming-sb&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-vault-service&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-web-push-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;]
        mail_list.each { each_repo,each_email -&gt;
            def Repo_Mail = &quot;&quot;
            if (each_repo == env.REPO.split(&apos;/&apos;).last()) {
                def Repo_Mail = each_email;
                try {
                    mail to: &quot;${GERRIT_CHANGE_OWNER_EMAIL},${GERRIT_PATCHSET_UPLOADER_EMAIL},${Repo_Mail}&quot;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
                } catch( err ){
                     echo &quot;$err&quot;
                }
            }
        };
}

pipeline {
    agent {
        label &apos;Cloud-Native&apos;
    }
    parameters {
        string(name: &apos;ISO_VERSION&apos;, defaultValue: &apos;0.0.0&apos;, description: &apos;The ENM ISO version (e.g. 1.65.77)&apos;)
    }
    stages {
        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
        stage(&apos;Checkout Cloud-Native SG Git Repository&apos;) {
            steps {
                script {
                    if (env.GERRIT_CHANGE_NUMBER) {
                        checkout changelog: true, \
                        scm: [$class: &apos;GitSCM&apos;, \
                        branches: [[name: &quot;$GERRIT_REFSPEC&quot;]], \
                        doGenerateSubmoduleConfigurations: false, \
                        extensions: [[$class: &apos;BuildChooserSetting&apos;, buildChooser: [$class: &apos;GerritTriggerBuildChooser&apos;]]], \
                        submoduleCfg: [], \
                        userRemoteConfigs: [[refspec: &quot;${GERRIT_REFSPEC}&quot;, \
                        url: &quot;${GERRIT_MIRROR}/${GERRIT_PROJECT}&quot;]]]
                    } else {
                        println &quot;No GERRIT_CHANGE_NUMBER&quot;
                        git changelog: true, poll: false, url: &apos;${GERRIT_MIRROR}/${REPO}&apos;
                    }
                }
            }
        }
        stage(&apos;Checkout SG RPM Git Repository&apos;) {
            steps {
                script {
                    if (env.REPO.split(&apos;/&apos;).last() == &quot;eric-enmsg-auto-id-solr&quot; || env.REPO.split(&apos;/&apos;).last() == &quot;eric-enmsg-amos&quot; || env.REPO.split(&apos;/&apos;).last() == &quot;eric-enmsg-general-scripting&quot;) {
                        sgcontainer_repo = &quot;${REPO}&quot;.split(&apos;enmsg-&apos;).last()
                        dir(&quot;${sgcontainer_repo}&quot;) {
                            git branch: &apos;master&apos;,
                                credentialsId: &apos;lciadm100_private_key&apos;,
                                url: &apos;${GERRIT_MIRROR}/&apos;+&apos;OSS/com.ericsson.oss.servicegroupcontainers/&apos;+&quot;${sgcontainer_repo}&quot;
                        }
                     }
                }
            }
        }
        stage(&apos;Python unit tests for k8shealthcheck.py&apos;) {
            steps {
                script{
                    if ( env.REPO.split(&apos;/&apos;).last() == &quot;eric-enm-troubleshooting-utils&quot; ) {
                     sh &quot;echo &apos;Preparing venv ...&apos; ; \
                         python3 -m pip install --user virtualenv &amp;&amp; python3 -m venv env;source env/bin/activate; \
                         python3 -m pip install --upgrade pip ; \
                         pip3 install -r ${WORKSPACE}/image_content/requirements.txt ; \
                         pip3 install -r ${WORKSPACE}/test/requirements-dev.txt ; &quot;

                     sh &quot;source env/bin/activate ; \
                         echo &apos;Starting the coding standard checking...&apos; ; \
                         python3 -m pylint -ry ${WORKSPACE}/image_content/k8shealthcheck/k8shealthcheck.py &gt; coding_standard_errors.txt; \
                         echo &apos;File coding_standard_errors.txt is created...&apos;&quot;

                     sh &quot;source env/bin/activate ; \
                         if [ -d coverage_result ]; then rm -rf coverage_result; fi; \
                         echo &apos;Starting the code coverage checking...&apos; ; \
                         python3 -m coverage run -m unittest ${WORKSPACE}/test/k8shealthcheck/testk8shealthcheck.py; \
                         python3 -m coverage html -d coverage_result ${WORKSPACE}/image_content/k8shealthcheck/k8shealthcheck.py ; \
                         python3 -m coverage report --fail-under=95 ${WORKSPACE}/image_content/k8shealthcheck/k8shealthcheck.py ; \
                         echo &apos;Coverage report was created&apos; ; \
                         deactivate;&quot;

                         archiveArtifacts &quot;coding_standard_errors.txt&quot;
                         archiveArtifacts &quot;coverage_result/*&quot;
                   }
               }
            }
            post {
                failure {
                    script {
                        ret_coding_std_err =  sh(script: &quot;if [ -f coding_standard_errors.txt ]; then echo &apos;coding_standard_errors was created&apos;; exit 0; else echo &apos;coding_standard_errors was not created&apos;; exit 1; fi&quot;, returnStatus: true )
                        if (ret_coding_std_err==0){
                            archiveArtifacts &quot;coding_standard_errors.txt&quot;
                        }
                        ret_coverage_result =sh(script: &quot;if [ -d coverage_result ]; then echo &apos;coverage_result was created. Please review the details from image_content_k8shealthcheck_k8shealthcheck_py.html&apos;; exit 0; else echo &apos;coverage_result was not created&apos;; exit 1; fi&quot;, returnStatus: true )
                        if (ret_coverage_result == 0 ){
                            archiveArtifacts &quot;coverage_result/*&quot;
                        }
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Helm Dep Up &apos;) {
            steps {
                sh &quot;${bob} helm-dep-up&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Merge values files&apos;) {
            steps{
                 script {
                     appconfig_values = sh (script: &quot;ls ${WORKSPACE}/chart/${CHART_DIR}/appconfig/ | grep values.yaml&quot;, returnStatus: true)
                     if (appconfig_values == 0) {
                          sh(&quot;${bob} merge-values-files-with-appconfig&quot;)
                     } else {
                          sh(&quot;${bob} merge-values-files&quot;)
                     }
                     sh &apos;&apos;&apos;
                         if git status | grep &apos;values.yaml&apos; &gt; /dev/null; then
                            git add chart/${CHART_DIR}/values.yaml
                            git commit -m &quot;NO JIRA - Merging Values.yaml file with common library values.yaml&quot;
                         fi
                     &apos;&apos;&apos;
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Helm Lint&apos;) {
            steps {
                sh &quot;${bob} lint-helm&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Linting Dockerfile&apos;) {
            steps {
                sh &quot;${bob} lint-dockerfile&quot;
                archiveArtifacts &apos;*dockerfilelint.log&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;ADP Helm Design Rule Check&apos;) {
            steps {
                sh &quot;${bob} test-helm || true&quot;
                archiveArtifacts &apos;design-rule-check-report.*&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Build Image and Chart&apos;) {
            steps {
                sh &quot;${bob} generate-new-version build-helm build-image-with-all-tags-internal&quot;
            }
            post {
                failure {
                    script {
                         failedStage = env.STAGE_NAME
                         sh &quot;${bob} remove-image-with-all-tags-internal&quot;
                     }
                 }
            }
        }
        stage(&apos;Publish Images to Artifactory&apos;) {
            steps {
                sh &quot;${bob} push-image-with-all-tags-internal&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags-internal&quot;
                    }
                }
                always {
                    sh &quot;${bob} remove-image-with-all-tags-internal&quot;
                }
            }
        }
        stage(&apos;Generate ADP Parameters&apos;) {
            steps {
                sh &quot;${bob} generate-output-parameters-internal-stage&quot;
                archiveArtifacts &apos;artifact.properties&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
    }
    post {
        failure {
            script {
                emailReport()
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>