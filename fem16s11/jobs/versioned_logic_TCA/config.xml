<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Artifact_type</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either csar or csar-lite.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>csar_lite</string>
              <string>csar</string>
              <string>snapshot_csar_lite</string>
              <string>charts</string>
              <string>TCA_csar</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>use_case</name>
          <description>Select the appropriate operation to be done.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Install</string>
              <string>Upgrade</string>
              <string>Backup</string>
              <string>Rollback</string>
              <string>Restore</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Provide clould native product set version</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_size</name>
          <description>Select the type of integration values type to be used.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>small-production</string>
              <string>extra-large-production</string>
              <string>single-instance</string>
              <string>multi-instance</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>orchestration_type</name>
          <description>Provide the orchestration type with which deployment should be happen</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>helm</string>
              <string>EVNFM</string>
              <string>TCA</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>container_registry_type</name>
          <description>Select docker registry which is to be used while the deployment time, when orchestration_type is EVNFM is selected. By default other docker registry will be used.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>other</string>
              <string>EVNFM</string>
              <string>TCA_HARBOUR_REGISTRY</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>snapshot_csar_lite_location</name>
          <description>Provide the location of the snapshot_csar_lite_location</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>snapshot_integration_key_value_pairs</name>
          <description>Provide the snapshot integration key value pairs to override</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>backup_name</name>
          <description>Provide the backup name only when use_case is selected as Backup/Rollback/Restore</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>scope</name>
          <description>This parameter needs to be passed when use_csae is selected as Backup</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ROLLBACK</string>
              <string>DEFAULT</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The cluster in which the deployment needs to be done</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>slave</name>
          <description>Provide the slave on which the jenkins job should run</description>
          <defaultValue>Jenkins_CSAR_Slave_4Node_Thunderbird_6</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 11, unit: 'HOURS')
    }
     environment {
        Client_HOME ="/home/cenmbuild"
        HOME_LCIADM100="/home/lciadm100"
        PRE_POST_DOCKER_IMAGE_NAME = "cenm-pre-post-deployment-utility"
        DEPLOYMENT_DOCKER_IMAGE_NAME = "cenm-deployment-utility"
    }
    stages{
        stage('Clean Up WorkSpace'){
            steps{
                echo "cleaning"
                deleteDir()
            }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dnodeexporter',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code
                '''
            }
        }
        stage('Delete, download, extract and load the utility images'){
            steps{
                script{
                    echo "deleting and downloading the utility images"
                    sh "tar -xvf Software/jq-1.0.1.tar ; chmod +x ./jq"
                    sh "curl -4 --location --request GET 'https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudnative/getCloudNativeProductSetContent/22.07/${product_set_version}/'&gt;cn_confidence_level_response.json"
                    env.pre_post_version = sh (script : "./jq '.[4].deployment_utilities_detail_data|.[]|select(.name==\"cenm-pre-post-deployment-utility\")|.version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                    env.deployment_version = sh (script : "./jq '.[4].deployment_utilities_detail_data|.[]|select(.name==\"cenm-deployment-utility\")|.version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                    env.pre_post_dev_url = sh (script : "./jq '.[4].deployment_utilities_detail_data|.[]|select(.name==\"cenm-pre-post-deployment-utility\")|.dev_url' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                    env.deployment_dev_url = sh (script : "./jq '.[4].deployment_utilities_detail_data|.[]|select(.name==\"cenm-deployment-utility\")|.dev_url' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                    sh "echo ${pre_post_version}"
                    sh "echo ${pre_post_dev_url}"
                    sh "echo ${deployment_version}"
                    sh "echo ${deployment_dev_url}"
                    sh "mkdir -p utilities"
                    sh "curl -4 ${pre_post_dev_url} -o utilities/cenm-pre-post-deployment-utility-${pre_post_version}.tgz"
                    sh "curl -4 ${deployment_dev_url} -o utilities/cenm-deployment-utility-${deployment_version}.tgz"
                    sh ''' for i in $(docker images | grep -E 'pre-post|cenm-deployment' | awk '{print $3}');do docker rmi -f $i;done '''
                    //env.pre_post_version = "1.4.0-5"
                    //env.deployment_version = "1.0.5-1"
                    sh "docker load -i utilities/cenm-pre-post-deployment-utility-${pre_post_version}.tgz"
                    sh "docker load -i utilities/cenm-deployment-utility-${deployment_version}.tgz"
                    env.PRE_POST_DOCKER_IMAGE="armdocker.rnd.ericsson.se/proj-enm/${PRE_POST_DOCKER_IMAGE_NAME}:${pre_post_version}"
                    env.DEPLOYMENT_DOCKER_IMAGE= "armdocker.rnd.ericsson.se/proj-enm/${DEPLOYMENT_DOCKER_IMAGE_NAME}:${deployment_version}"
                    env.CENM_PRE_POST_UTILITY="docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v ${HOME_LCIADM100}/.ssh:${HOME_LCIADM100}/.ssh -v ${HOME_LCIADM100}/.kube/:${HOME_LCIADM100}/.kube -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${PRE_POST_DOCKER_IMAGE}"
                    env.CENM_DEPLOYMENT_UTILITY="docker run --rm -v ${HOME_LCIADM100}/.ssh:${HOME_LCIADM100}/.ssh -v ${HOME_LCIADM100}/.kube/:${HOME_LCIADM100}/.kube -v ${WORKSPACE}:${WORKSPACE} -v ${WORKSPACE}/keyvalues:${HOME_LCIADM100}/cenm/playbooks/keyvalues ${DEPLOYMENT_DOCKER_IMAGE} python3"
                }
            }
        }
        /* stage('Updating DIT documents'){
            steps{
                script{
                    echo "updating DIT documents"
                    sh '''curl -O "https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/content/repositories/nss/com/ericsson/nss/scripts/jq/1.0.1/jq-1.0.1.tar"; tar -xvf jq-1.0.1.tar ; chmod +x ./jq'''
                    sh "${CENM_PRE_POST_UTILITY} UpdatingDITDocuments --DEPLOYMENT ${environment_name} --PRODUCTSET ${product_set_version}"
                }
            }
        } */ 
        stage('Fetching Documents'){
            steps{
                script{
                    echo "Fetching Documents"
                    sh "${CENM_PRE_POST_UTILITY} FetchingDITData --DEPLOYMENT ${environment_name}"
                }
            }
        }
        stage('Validation checks'){
            steps{
                script{
                    echo "checking Validations"
                    sh "${CENM_PRE_POST_UTILITY} validation_checks --environment_name ${environment_name} --product_set_version ${product_set_version} --artifact_type ${Artifact_type} --orchestration_type ${orchestration_type} --container_registry_type ${container_registry_type} --use_case ${use_case}"
                }
            }
        } 
        stage('Download Artifacts'){
            when {
                 expression{env.use_case != "Backup"}
            }
            steps{
                script{
                    echo "Downloading Artifacts"
                    sh "${CENM_PRE_POST_UTILITY} download --product_set_version ${product_set_version} --artifact_type ${Artifact_type} --snapshot_artifact_location ${snapshot_csar_lite_location} --deployment_size ${deployment_size}"
                }
            }
        }
        stage('Populate site values file'){
            when {
                 expression{env.use_case != "Backup"}
            }
            steps{
                script{
                    echo "populating site values file"
                    sh "${CENM_PRE_POST_UTILITY} populate --environment_name ${environment_name} --deployment_size ${deployment_size} --artifact_type ${Artifact_type} --snapshot_integration_key_value_pairs ${snapshot_integration_key_value_pairs}"
                }
            }
        }
        stage('Deploying charts using TCA'){
            when {
                allOf{
                    environment name: 'orchestration_type', value: 'TCA'
                    expression{env.TCA_CLIENT_MACHINE_TYPE  =='client_machine'}
                   }
             }
              steps{
                  script{
                        
                        }
                    }
             }
        // stage('Use Case'){
        //     steps{
        //         script{
        //             stage("${use_case} with ${orchestration_type}"){
        //                 echo "${use_case} with ${orchestration_type}"
        //                 sh "${CENM_DEPLOYMENT_UTILITY} select_use_case.py --artifact_type ${Artifact_type} --orchestration_type ${orchestration_type} --scope ${scope} --use_case ${use_case} --deployment_size ${deployment_size} --workspace ${WORKSPACE} --backup_name ${backup_name} --container_registry_type ${container_registry_type}"
        //             }
        //         }
        //     }
        //  } 
        stage('Post deployment checks'){
            when {
                 expression{env.use_case != "Backup"}
            }
            steps{
                script{
                    echo "post deployment checks"
                    sh "${CENM_PRE_POST_UTILITY} post"
                }
            }
        }
        stage('Archive artifacts'){
            when {
                 expression{env.use_case != "Backup"}
            }
            steps{
                script{
                    echo "Archiving the artifacts"
                    def version = readFile "${WORKSPACE}/keyvalues/config.py"
                    def version_list = version.split("\n")
                    for (item in version_list){
                        def key_val_pair = item.split("=")
                        if (key_val_pair[0] == "integrationvaluesfilepath"){
                            def filename = key_val_pair[1]
                            filename = filename[1..-2]
                            echo "${filename}"
                            archiveArtifacts filename
                        }
                    }
                }
            }
        }
    }
    post{
        failure {
            script{
                   echo "Failure"
            }
        }
        aborted{
            script{
                echo "Aborted"
            }
        }
        success{
            script{
                  echo "Success"
            }
        }
        always {
            script{
                currentBuild.displayName = "${use_case} with ${orchestration_type} on: ${environment_name}"
                echo "Archiving the artifacts"
                    def version = readFile "${WORKSPACE}/keyvalues/config.py"
                    def version_list = version.split("\n")
                    for (item in version_list){
                        def key_val_pair = item.split("=")
                        if (key_val_pair[0] == "integrationvaluesfilepath"){
                            def filename = key_val_pair[1]
                            filename = filename[1..-2]
                            echo "${filename}"
                            archiveArtifacts filename
                        }
                    }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>