<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>JENKINS_URL_INTEGRATION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Creation of eric-enm-int-sync- autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL_INTEGRATION</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>SLAVE</name>
          <description/>
          <defaultValue>Cloud-Native</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description/>
          <defaultValue>1.1.1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <description/>
          <defaultValue>1.1.1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: '${ISO_VERSION}',PRODUCT_SET:'${PRODUCT_SET}',BRO_CHART_VERSION:'${BRO_CHART_VERSION}',MONITORING_CHART_VERSION:'${MONITORING_CHART_VERSION}',PRE_DEPLOY_CHART_VERSION:'${PRE_DEPLOY_CHART_VERSION}',INFRA_CHART_VERSION:'${INFRA_CHART_VERSION}',STATELESS_CHART_VERSION:'${STATELESS_CHART_VERSION}',INTEGRATION_VALUE_VERSION:'${INTEGRATION_VALUE_VERSION}',BRO_CHART_FILE_SIZE:'${BRO_CHART_FILE_SIZE}',PRE_DEPLOY_CHART_FILE_SIZE:'${PRE_DEPLOY_CHART_FILE_SIZE}',PRE_DEPLOY_CHART_COMMIT_HASH:'${PRE_DEPLOY_CHART_COMMIT_HASH}',BRO_CHART_COMMIT_HASH:'${BRO_CHART_COMMIT_HASH}',SPRINT_TAG:'${SPRINT_TAG}'])
         .needDockerSocket(true)
         .toString()

pipeline{
    agent {
            node
            {
            label SLAVE
            }
        }
        parameters {
             string(name: 'JENKINS_URL_INTEGRATION', defaultValue: 'https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443', description: 'Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443')
        }
    stages{
        stage('Clean Up WorkSpace'){
           steps{
                   deleteDir()
                }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                    }
            }
        }
        /* stage('Download Integration Chart'){
                steps{
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz -o charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz -o charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz -o charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz'
                     sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz'
                    sh 'curl https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o charts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
            }
        }
        stage('FileSize Chart'){
                steps{
                   script {
                          env.PRE_DEPLOY_CHART_FILE_SIZE = sh(script: "du -b charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz | cut -f1", returnStdout: true).trim()
                          env.BRO_CHART_FILE_SIZE = sh(script: "du -b charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz | cut -f1", returnStdout: true).trim()
                  }
            }
        } */
      stage('Generate int-sync Parameters') {
            steps {
              sh "${bob} generate-int-sync-metadata-parameters"
              archiveArtifacts 'int-sync-metadata-artifact.json'
            }
        }
        stage('Generate Parameters') {
            steps {
                script {
                            sh 'echo "bro_chart_version=${BRO_CHART_VERSION}" &gt; artifact.properties'
                            sh 'echo "pre_deploy_chart_version=${PRE_DEPLOY_CHART_VERSION}" &gt;&gt; artifact.properties'
			                /* sh 'echo "infra_chart_version=${INFRA_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "stateless_chart_version=${STATELESS_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "monitoring_chart_version=${MONITORING_CHART_VERSION}" &gt;&gt; artifact.properties'
                            sh 'echo "integration_value_version=${INTEGRATION_VALUE_VERSION}" &gt;&gt; artifact.properties' */
			                sh 'echo "enm_iso_version=${ISO_VERSION}" &gt;&gt; artifact.properties'
			                sh 'echo "product_set_version=${PRODUCT_SET}" &gt;&gt; artifact.properties'
                           //sh 'echo "SPRINT_TAG=${SPRINT_TAG}" &gt;&gt; artifact.properties'
                            archiveArtifacts 'artifact.properties'
                             currentBuild.displayName = "PRODUCT SET ON: ${PRODUCT_SET}"
                }
            }
        }
    }
    /* post {
        success {
            script {
                sh(script: 'wget -q -O - --no-check-certificate --post-data="" https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/manageCNProductSet/\${PRODUCT_SET}/cENM-Build-Integration-Charts/passed/', returnStdout: true).trim()
                currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
            }
        }
        failure {
            script {
                sh(script: 'wget -q -O - --no-check-certificate --post-data="" https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/manageCNProductSet/\${PRODUCT_SET}/cENM-Build-Integration-Charts/failed/', returnStdout: true).trim()
                currentBuild.rawBuild.@result = hudson.model.Result.FAILURE
            }
        }
    } */
}


// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>