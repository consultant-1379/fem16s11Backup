<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>def commonMethods

pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 11, unit: 'HOURS')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
        Client_HOME ="/home/cenmbuild"
        OQS_URL="https://atvoqs.athtem.eei.ericsson.se/api/deployments"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-572580',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code
                '''
         }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage('Delete docker image') {
            steps {
                script {
                    commonMethods.delete_build_utilities_image()
                }
            }
        }
        stage('Pull docker image') {
            steps {
                script {
                    sh "docker pull ${cenm_utilities_docker_image}"
                }
            }
        }
        stage( 'setup_kubeconfig_file_for_cluster' ) {
            steps {
                script{
                      commonMethods.extract_jq()
                      commonMethods.download_kube_config_file_from_dit()
                      commonMethods.read_site_config_info_from_dit()
                      commonMethods.set_kube_config_file()
                      commonMethods.get_cn_build_version_info()
               }
            }
        }
        stage('Clean CSAR folder and delete and pull utilities image in client machine'){
            when {
                allOf{
                    environment name: 'deployment_mechanism', value: 'csar'
                    expression{env.CLIENT_MACHINE_TYPE  =='client_machine'}
                   }
             }
              steps{
                  script{
                        commonMethods.client_cleancsar()
                        commonMethods.delete_and_pull_utilitiesimage_clientmachine()
                        }
                    }
             }
        stage( 'Login docker registry' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     expression{env.CONTAINER_REGISTRY_USERNAME != ''}
                     expression{env.CONTAINER_REGISTRY_PASSWORD != ''}
                 }
            }
            steps {
               script{
                   commonMethods.create_docker_secret()
              }
            }
        }
        stage( 'Download CSAR PACKAGE from nexus area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
              script{
                retry(3){
                  commonMethods.download_csar_package_nexus()
                }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from release area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
               script{
                retry(3){
                    commonMethods.download_csar_package_release()
                }
               }
            }
        }
        stage('Extract csar package') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps {
                script {
                       commonMethods.extract_csar_package()
                       commonMethods.get_integration_charts_version()
                }
            }
        }
        stage('Perform Load/Retag/Push') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
             }
            steps {
                script {
                  commonMethods.csar_utils()
                }
            }
        }
        stage('Download Charts from CI Internal') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_ci_internal()
                   commonMethods.remove_tgz_with_artifacts()
                }
            }
        }
        stage('Download Charts from Release area') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_release_area()
                   commonMethods.remove_tgz_with_artifacts()
                }
            }
        }
        stage('Updating integration values'){
            steps{
                script{
                       if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                               commonMethods.client_integrationvaluepath()
                               commonMethods.updateIntegrationValues()
                               commonMethods.client_pushfile()
                          }
                       else{
                             commonMethods.remove_yaml_with_artifacts()
                             commonMethods.get_integration_charts_path()
                             commonMethods.updateIntegrationValues()
                             commonMethods.overriding_key_value_pairs()
                          }
                }
            }
        }
        stage('cENM CSAR Deployment Delete'){
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps{
                script{
                       commonMethods.csar_uninstall()
                }
            }
        }
        stage('cENM Install'){
             stages {
                   stage('Install cENM BRO chart'){
                    when {
                         expression{env.bro_chart_version != ''}
                    }
                    steps{
                      script{
                           commonMethods.start_time_deployment()
                           commonMethods.bro_integration_chart("install","600s")
                        }
                     }
                   }
                   stage('Install cENM Monitoring chart'){
                    when {
                         expression{env.monitoring_chart_version != ''}
                    }
                     steps{
                       script{
                          if (commonMethods.check_version_a_newer_than_version_b("${env.product_set_version}","21.03.57")){
                                 commonMethods.monitoring_integration_chart("install","1500s")
                           }
                          else {
                             echo "Stage-Install cENM Monitoring chart is skipped due to old cENM PS version"
                          }
                       }
                    }
                   }
                   stage('Start OQS'){
                     steps{
                       script{
                          commonMethods.start_queue("Install")
                           }
                       }
                   }

                   stage('Install cENM Pre Deploy chart'){
                    when {
                         expression{env.pre_deploy_chart_version != ''}
                    }
                    steps{
                       script{
                            commonMethods.pre_deploy_integration_chart("install","1500s")
                       }
                    }
                   }
                   stage('Install cENM Infra chart'){
                    when {
                           expression{env.infra_chart_version != ''}
                      }
                     steps{
                       script{
                             commonMethods.infra_integration_chart("install","6h")
                          }
                       }
                    }
                   stage('END OQS'){
                      steps{
                        script{
                            commonMethods.end_queue("Install")
                           }
                        }
                    }
                   stage('Install cENM Stateless chart'){
                     when {
                           expression{env.stateless_chart_version != ''}
                    }
                    steps{
                       script{
                             commonMethods.stateless_integration_chart("install","4h")
                             commonMethods.end_time_deployment()
                      }
                    }
                  }
                }
        }
        stage('Smoke test'){
            steps{
                script{
                       retry(5){
                                commonMethods.smokeTest()
                           }
                }
            }
        }
        stage('CheckPods Running'){
            steps{
                script{
                    retry(5){
                                 commonMethods.checkHealthyPods()
                            }
                }
            }
        }
        stage('Generate artifact file'){
             steps{
                  script{
                        commonMethods.generate_artifact_file()
                        }
                  }
                }
    }
    post{
        failure {
            script{
                   echo "Failure"
                      def report = commonMethods.reportHeading("Failed")
                      report += commonMethods.printPods()
                      commonMethods.emailReport(report)
            }
        }
        aborted{
            script{
                echo "Aborted"
                def report = commonMethods.reportHeading("Aborted")
                report += commonMethods.printPods()
                commonMethods.emailReport(report)
            }
        }
        success{
            script{
                  echo "Success"
                  def report = commonMethods.reportHeading("Success")
                  report +=commonMethods.printPods()
                  commonMethods.emailReport(report)
            }
        }
        always {
            script{
                currentBuild.displayName = "Install with ${deployment_mechanism} on: ${environment_name}"
                currentBuild.description = "&lt;b&gt;Bro Chart Version = ${bro_chart_version}&lt;br&gt;Monitoring chart version = ${monitoring_chart_version}&lt;br&gt;Pre Deploy Chart Version = ${pre_deploy_chart_version}&lt;br&gt;Infra Chart Version = ${infra_chart_version}&lt;br&gt;Stateless Chart Version = ${stateless_chart_version}&lt;br&gt;Integration Value Version = ${integration_value_version}&lt;/b&gt;"
                sh("cat ${HOME_DIR}/cENM/Scripts/${integration_values_file_path}")
                archiveArtifacts "cENM/Scripts/${integration_values_file_path}"
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>