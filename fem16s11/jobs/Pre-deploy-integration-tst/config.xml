<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SPRINT_TAG</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enmsg-mssnmpfm - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Tag for GIT tagging the repository after build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REQUIREMENTS_FILE</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>/* IMPORTANT:
*
* In order to make this pipeline work, the following configuration on Jenkins is required:
* - slave with a specific label (see pipeline.agent.label below)
* - credentials plugin should be installed and have the secrets with the following names:
*   + lciadm100credentials (token to access Artifactory)
*/

def defaultBobImage = 'armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob.2.0:1.7.0-54'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: '${ISO_VERSION}', PRODUCT_SET: '${PRODUCT_SET}', SPRINT_TAG: '${SPRINT_TAG}'])
        .needDockerSocket(true)
        .toString()

def bobInCA = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .envVars([
        ARM_API_TOKEN     : '${ARM_CREDENTIALS_PSW}',
        REQUIREMENTS_FILE : '${REQUIREMENTS_FILE}',
        CHART_PATH        : '${CHART_PATH}',
        GIT_REPO_URL      : '${GIT_REPO_URL}',
        HELM_INTERNAL_REPO: '${HELM_INTERNAL_REPO}',
        HELM_DROP_REPO    : '${HELM_DROP_REPO}',
        HELM_RELEASED_REPO: '${HELM_RELEASED_REPO}',
        GERRIT_USERNAME   : '${GERRIT_CREDENTIALS_USR}',
        GERRIT_PASSWORD   : '${GERRIT_CREDENTIALS_PSW}',
])
        .toString()


def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = 'enmadm100@ericsson.com'


pipeline {
    agent {
        label 'Docker-POC-e2e'
    }
    parameters {
        string(name: 'SPRINT_TAG', description: 'Tag for GIT tagging the repository after build')
    }
    environment {
        GERRIT_CREDENTIALS = credentials('cenmbuild_gerrit_api_token')
        ARM_CREDENTIALS = credentials('cenmbuild_ARM_token')
        CHART_PATH = "chart/eric-enm-pre-deploy-integration"
        REPO = "OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration"
        GIT_REPO_URL = "${GERRIT_CENTRAL_HTTP}/a/${REPO}"
        HELM_INTERNAL_REPO = "https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        HELM_DROP_REPO = "https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        HELM_RELEASED_REPO = "https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
    }
    stages {
        stage('Clean workspace') {
            steps {
                deleteDir()
            }
        }
        stage('Checkout Cloud-Native Git Repository') {
            steps {
                git branch: 'master',
                        url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration'
                sh '''
                 echo ${GERRIT_CENTRAL}
                 git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                   '''
            }
        }

        stage('Lint Helm') {
            steps {
                sh "${bob} lint-only-helm"
            }
        }
        stage('ADP Helm Design Rule Check') {
            steps {
                sh "${bob} test-helm || true"
                archiveArtifacts 'design-rule-check-report.*'
            }
        }
        stage('Update versions in values.yaml file') {
            steps {
                echo sh(script: 'env', returnStdout: true)
                step([$class: 'CopyArtifact', projectName: 'sync-build-trigger-tst', filter: "*"]);
                sh "${bob} swap-latest-versions-with-numbers"
                sh '''
                    if git status | grep 'values.yaml' &gt; /dev/null; then
                        git commit -m "NO JIRA - Updating Values.yaml files with version"
                        git push origin HEAD:master
                    fi
                '''
                //wait for gerrit sync
                checkGerritSync()
            }
        }
	/*
        stage('Publish Helm Chart') {
            steps {
                script {
                    sh "${bobInCA} publishwithreq"
                    archiveArtifacts 'artifact.properties'
                }
            }
        }
	*/
        stage('Update Version prefix') {
            steps {
                script {
                    //temp until VERSION_PREFIX is deprecated in pointfix
                    sh '''
                            echo ${INT_CHART_VERSION} | sed 's/-.*$//' &gt;VERSION_PREFIX
                            if git status | grep 'VERSION_PREFIX' &gt; /dev/null; then
                                git add VERSION_PREFIX
                                git commit -m "Version prefix update"
                                echo "VERSION PREFIX UPDATE"
                            git push origin HEAD:master
                            fi
                        '''
                    //wait for gerrit sync
                    checkGerritSync()
                }
            }
        }
        stage('Generate pre-deploy Parameters') {
            steps {
                script {
                     sh '''
                            echo ${INT_CHART_VERSION} &gt; ./.bob/var.version
                            git rev-parse --verify HEAD &gt; .bob/var.commit-hash
                        '''
        //            env.PRE_DEPLOY_CHART_VERSION = readFile('.bob/var.version').trim()
        //          sh 'cp .bob/eric-enm-pre-deploy-integration-$PRE_DEPLOY_CHART_VERSION.tgz .'
        //            env.PRE_DEPLOY_CHART_FILE_SIZE = sh(script: 'du -b eric-enm-pre-deploy-integration-$PRE_DEPLOY_CHART_VERSION.tgz | cut -f1', returnStdout: true).trim()
        //            def bobWithPreDeployInfo = new BobCommand()
        //                                .bobImage(defaultBobImage)
        //                                .needDockerSocket(true)
        //                                .envVars([
        //                                        'PRODUCT_SET'        : env.PRODUCT_SET,
        //                                        'ISO_VERSION'       : env.ISO_VERSION,
        //                                        'PRE_DEPLOY_CHART_FILE_SIZE' : env.PRE_DEPLOY_CHART_FILE_SIZE
        //                                ])
        //                                .toString()
        //            sh "${bobWithPreDeployInfo} generate-pre-deploy-int-metadata-parameters"
        //            archiveArtifacts 'pre-deploy-int-metadata-artifact.json'
                }
            }
        }
    }
    post {
        success {
            script {
                echo "pushed successfully"
                sh '''
                            set +x
                            #ADD tag Cloud-Native to Repository
                            #git tag --annotate --message "Tagging Version" --force ${INT_CHART_VERSION}
                            #git push --force origin ${INT_CHART_VERSION}
                            git tag --annotate --message "Tagging latest in sprint" --force $SPRINT_TAG HEAD
                            git push --force origin $SPRINT_TAG
                            git tag --annotate --message "Tagging latest in sprint with ISO version" --force ${SPRINT_TAG}_iso_${ISO_VERSION} HEAD
                            git push --force origin ${SPRINT_TAG}_iso_${ISO_VERSION}
                            git tag --annotate --message "Tagging latest in sprint with Product Set version" --force ps_${PRODUCT_SET} HEAD
                            git push --force origin ps_${PRODUCT_SET}
                        '''
            }
        }
        failure {
            mail to: 'vinay.kumar.chapram.ext@ericsson.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
    }
}

def checkGerritSync() {
    sh '''
                RETRY=6
                SLEEP=10

                # check if branch was passed as arg, else use Jenkins working branch
                [ -n "$1" ] &amp;&amp; branch=$1 || branch=${GIT_BRANCH##*/}

                # get the commit ID's on GC master and mirror
                echo "INFO: Checking commit ID's for '$branch' branch on Gerrit Central."
                gcr=$(git ls-remote -h ${GERRIT_CENTRAL}/${REPO} ${branch} | awk '{print $1}')
                gmr=$(git ls-remote -h ${GERRIT_MIRROR}/${REPO} ${branch} | awk '{print $1}')
                echo "INFO: central: ${gcr}"
                echo "INFO: mirror:  ${gmr}"

                # compare master and mirror
                if [[ "${gcr}" != "${gmr}" ]]; then
                echo "INFO: Gerrit central and mirror are out of sync."
                echo "INFO: Waiting a maximum of $((RETRY*SLEEP)) seconds for sync."

                retry=0
                # retry a number of times
                while (( retry &lt; RETRY )); do
                    echo "INFO: Attempting retry #$((retry+1)) of $RETRY in $SLEEP seconds."
                    sleep $SLEEP

                    gcr=$(git ls-remote -h ${gcu} ${branch} | awk '{print $1}')
                    gmr=$(git ls-remote -h ${gmu} ${branch} | awk '{print $1}')
                    echo "INFO: central: $gcr, mirror: $gmr"

                    # compare master and mirror, again
                    if [ "${gcr}" = "${gmr}" ]; then
                        echo "INFO: fetching latest changes on branch $branch."
                        git fetch
                        break
                    fi

                    ((retry++))
                done
                fi

                # if still out of sync, fail the job
                [ "${gcr}" != "${gmr}" ] &amp;&amp; echo "ERROR: Gerrit central and mirror out of sync." &amp;&amp; exit 1
                # Check we're on the correct (synced) revision
                [ "${GIT_COMMIT}" != "${gmr}" ] &amp;&amp; echo -e "*** WARNING: Not using latest revision.\nFetching upstream changes again from $gmu. ***" &amp;&amp; git fetch
                echo "INFO: Branch in sync between Gerrit central and mirror."
            '''
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
                    |docker run
                    |--init
                    |--rm
                    |--workdir \${PWD}
                    |--user \$(id -u):\$(id -g)
                    |-v \${PWD}:\${PWD}
                    |-v /etc/group:/etc/group:ro
                    |-v /etc/passwd:/etc/passwd:ro
                    |-v \${HOME}/.m2:\${HOME}/.m2
                    |-v \${HOME}/.docker:\${HOME}/.docker
                    |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
                    |${env}
                    |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
                    |--group-add \$(stat -c '%g' /var/run/docker.sock)
                    |${bobImage}
                    |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>