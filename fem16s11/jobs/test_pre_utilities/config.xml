<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */
def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: '${ISO_VERSION}'])
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''
pipeline {
    agent {
        node {
        label Slave
    }
    environment{
        DOCKER_IMAGE_NAME = "pre-post-utilities"
	    DOCKER_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
    }
    stages {
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
    stage('Checkout Cloud-Native SG Git Repository') {
            steps {
                git branch: 'dtestdeployment',
                        url: 'ssh://lciadm100@gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/enm-containerisation-artifacts.git'
            }
        }
        stage('Generate new version') {
            steps {
                sh "${bob} -r utilities/cenm-build-utilities/ruleset2.0.yaml generate-new-version"
                script {
		            env.VERSION = sh(script: "cat .bob/var.version", returnStdout:true).trim()
                    echo "${VERSION}"
                }
            }
        }
        stage('Build Image') {
            steps {
                sh "${bob} -r utilities/cenm-build-utilities/ruleset2.0.yaml  build-image"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bob} -r ruleset2.0.yaml remove-image"
                    }
                }
            }
        }
		stage('retag to new build image')
		     steps {
			     script {
				 sh "${bob} -r utilities/cenm-build-utilities/ruleset2.0.yaml retag-base-image-to-new-build-docker-image"
			}
			post {
        		failure{
		            script {
			            failedStage = env.STAGE_NAME
		            }
		        }
	        }
	    }
		stage('generate docker tgz file') {
	        steps {
	            sh "${bob} -r utilities/cenm-build-utilities/ruleset2.0.yaml generate-tgz-file"
	        }
	        post {
        		failure{
		            script {
			            failedStage = env.STAGE_NAME
		            }
		        }
	        }
	    }
        stage('Publish Images to Artifactory') {
            steps {
                script {
                    echo "pushing ..." 
                }
            }
        }
	    
	    stage('Generate INT Parameters') {
            steps {
                script {
                        sh 'echo "INT_DOCKER_IMAGE_NAME=${DOCKER_IMAGE_NAME}" &gt;&gt; artifact.properties'
                        sh 'echo "INT_DOCKER_IMAGE_VERSION=${VERSION}" &gt;&gt; artifact.properties'
			            sh 'echo "INT_DOCKER_IMAGE_PATH=${DOCKER_IMAGE_PATH}" &gt;&gt; artifact.properties'
                        archiveArtifacts 'artifact.properties'
                }
            }
        }
	    stage('Publish docker package to Nexus') {
            steps {
		        script {
		            echo "publishing ot nexus"
                }
            }
        }
        stage('Bump Version') {
          steps {
              script {
                  sh 'hostname'
                  Version = readFile "VERSION_PREFIX"
                  sh 'docker run --rm -v $PWD/utilities/cenm-build-utilities/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch'
                  newVersion = readFile "VERSION_PREFIX"
                  env.VERSION_PREFIX = newVersion
                  currentBuild.displayName = "${BUILD_NUMBER} - Version - " + Version
                  sh '''
                       git add VERSION_PREFIX
                       git commit -m "Version $VERSION_PREFIX"
                       git push origin HEAD:dtestdeployment
                   '''
               }
           }
       }
   }
}
       
// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}


	</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>