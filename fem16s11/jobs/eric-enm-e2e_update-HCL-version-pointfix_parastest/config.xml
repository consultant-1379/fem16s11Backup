<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>ENM Cloud Native Build pipeline eric-enm-e2e-hlc-build - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>ALL</scanQueueFor>
      <blockingJobs>eric-enm-e2e-build</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>CHART_VERSION</name>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>SG_PROJECT_LIST = [&quot;eric-enmsg-auto-id-solr_update-HLC-version_parastest&quot;, &quot;eric-enmsg-amos_update-HLC-version_parastest&quot;, &quot;eric-enmsg-general-scripting_update-HLC-version_parastest&quot;, &quot;eric-enmsg-solr-service_update-HLC-version_parastest&quot;]
pipeline {
    agent { node { label &apos;Cloud-Native&apos; } }
    environment {
        PIPELINE_LAST_STAGE_STATUS = &apos;UNKNOWN&apos;
    }
    stages {
        stage(&apos;Updating HLC version in SG&apos;) {
            steps{
                script{
                    sh &quot;touch hlc_failed_service_group_builds_pointfix&quot;
                    for (def service_group_build in SG_PROJECT_LIST) {
                        def service_group_build_pointfix = service_group_build + &quot;-pointfix&quot;
                        try{
                            stage(&quot;Build ${service_group_build_pointfix}&quot;){
                                retry(3) {
                                    def build = build(job: &quot;${service_group_build_pointfix}&quot;, propagate: false, wait: true, parameters: [string(name:&quot;CHART_VERSION&quot;, value:String.valueOf(&quot;${CHART_VERSION}&quot;)), string(name:&quot;BRANCH&quot;, value:String.valueOf(&quot;${BRANCH}&quot;))])
                                    def BuildResult = build.getResult()
                                    if (BuildResult != &quot;SUCCESS&quot;) {
                                        error &apos;FAIL&apos;
                                    }
                                }
                            }
                        }catch (e) {
                            sh &quot;echo ${service_group_build_pointfix} &gt;&gt; hlc_failed_service_group_builds_pointfix&quot;
                            currentBuild.result = &apos;FAILURE&apos;
                        }
                    }
                }
            }
        }
        stage(&apos;Generate Failed HLC Job File&apos;) {
            steps {
                script {
                    archiveArtifacts &apos;hlc_failed_service_group_builds_pointfix&apos;
                    sh &quot;rm -rf hlc_failed_service_group_builds_pointfix&quot;
                }
            }
        }
    }
    post {
        failure {
            script {
                if (PIPELINE_LAST_STAGE_STATUS==&apos;SUCCESS&apos;) {
                    currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
                }
            }
        }
    }
}

</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>