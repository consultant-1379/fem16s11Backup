<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enmsg-mssnmpfm - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description>Tag for GIT tagging the repository after build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_REPO_TOKEN</name>
          <defaultValue>AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1&apos;
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = &apos;enmadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;enmadm100@ericsson.com&apos;
def failedStage = &apos;&apos;

pipeline {
    agent {
        label &apos;Docker-POC&apos;
    }
    stages {
       stage (&apos;Clean workspace&apos;) {
          steps {
            deleteDir()
         }
       }
        stage(&apos;Inject Credential Files&apos;) {
          steps {
             withCredentials( [file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                     sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
            }
          }
        }
        stage(&apos;Checkout Cloud-Native test-eric-enm-pre-deploy-integration Git Repository&apos;){
         steps {
             git branch: env.BRANCH,
                     url: &apos;${GERRIT_MIRROR}/OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration&apos;
             sh &apos;&apos;&apos;
                 git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration
             &apos;&apos;&apos;
         }
        }
         stage(&apos;GET-Chart-Versions&apos;) {
              steps {
                  script{
                  withCredentials([
                      usernamePassword(credentialsId: &apos;cenmbuild_api_token&apos;, usernameVariable: &apos;JENKINS_USER_NAME&apos;, passwordVariable: &apos;JENKINS_API_TOKEN&apos;)]) {
                      def bobwithpublish = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars([&apos;JENKINS_USER_NAME&apos;: env.JENKINS_USER_NAME,
                                      &apos;JENKINS_API_TOKEN&apos;: env.JENKINS_API_TOKEN,
                                      &apos;JENKINS_URL&apos;: env.JENKINS_URL,
                                      &apos;POINTFIX&apos;: &quot;True&quot;,
                            ])
                            .toString()
                      sh &quot;${bobwithpublish} get-chart-versions&quot;
                  }
                }
              }
          }
         stage(&apos;Remove unwanted chart updates&apos;){
              steps {
                 sh &apos;&apos;&apos;
                   sed -i &apos;/^eric-enm-globalproperties=/d&apos; chart_versions_file
                   sed -i &apos;/^eric-enm-rwxpvc=/d&apos; chart_versions_file
                   sed -i &apos;/^eric-enm-serviceroles=/d&apos; chart_versions_file
                   sed -i &apos;/^eric-net-ingress-l4-crd=/d&apos; chart_versions_file
                 &apos;&apos;&apos;
               }
        }
      /*
      stage(&apos;Update Charts&apos;){
         steps {
              sh &apos;&apos;&apos;
                    while read line;
                    do
                      CHART_NAME=$(echo $line | cut -d&quot;=&quot; -f1); CHART_VERSION=$(echo $line | cut -d&quot;=&quot; -f2);
                      docker run --init --rm --workdir $(pwd) -v $(pwd):$(pwd) -v /var/run/docker.sock:/var/run/docker.sock armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-int-helm-chart-auto ihc-update -f chart/eric-enm-pre-deploy-integration/ -n $CHART_NAME -v $CHART_VERSION;
                    done &lt; chart_versions_file
                 &apos;&apos;&apos;
         }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
      }
      */
        stage(&apos;Lint Helm&apos;){
         steps {
             sh &quot;${bob} lint-helm&quot;
         }
        }
        stage(&apos;ADP Helm Design Rule Check&apos;) {
          steps {
             sh &quot;${bob} test-helm || true&quot;
             archiveArtifacts &apos;design-rule-check-report.*&apos;
          }
        }
        stage(&apos;Update versions in Chart.yaml and values.yaml file&apos;){
            steps{
                echo sh(script: &apos;env&apos;, returnStdout:true)
         //       step ([$class: &apos;CopyArtifact&apos;, projectName: &apos;sync-build-trigger-pointfix-tst&apos;, filter: &quot;*&quot;]);
        //        #sh &quot;${bob} swap-latest-versions-with-numbers&quot;
                sh &apos;&apos;&apos;
                    if git status | grep &apos;Chart.yaml\\|values.yaml&apos; &gt; /dev/null; then
                        git commit -m &quot;NO JIRA - Updating Values.yaml and Chart.yaml files with version&quot;
                    fi
                &apos;&apos;&apos;
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
        }
        stage(&apos;Generate New Version&apos;) {
         steps {
             echo&quot; generating new versions&quot;
        //     sh &quot;${bob} generate-new-version&quot;
          }
          post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
         }
         stage(&apos;Build Chart&apos;) {
               steps {
                  script{
                   withCredentials([
                      usernamePassword(credentialsId: &apos;cenmbuild_api_token&apos;, usernameVariable: &apos;HELM_USER&apos;, passwordVariable: &apos;HELM_TOKEN&apos;)]) {
                       def bobwithbuild = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars([&apos;HELM_USER&apos;: env.HELM_USER,
                                      &apos;HELM_TOKEN&apos;: env.HELM_TOKEN,
                            ])
                            .toString()
                //       #sh &quot;${bobwithbuild} build-helm&quot;
                   }
                 }
               }
             post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
     }
     /*
     stage(&apos;Publish Helm Chart&apos;) {
         steps {
               script {
                        def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([&apos;HELM_REPO_TOKEN&apos;: env.HELM_REPO_TOKEN])
                                .toString()
                        sh &quot;${bobWithHelmToken} helm-push&quot;
                }
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
     }
      stage(&apos;Generate INT Parameters&apos;) {
         steps {
          sh &quot;${bob} generate-output-parameters&quot;
          archiveArtifacts &apos;artifact.properties&apos;
    //      archiveArtifacts &apos;.bob/var.commit-hash&apos;
       }
       post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
      }
      stage(&apos;Generate pre-deploy Parameters&apos;) {
            steps {
                script {
                    env.PRE_DEPLOY_CHART_VERSION = readFile(&apos;.bob/var.version&apos;).trim()
                    sh &apos;cp .bob/eric-enm-pre-deploy-integration-$PRE_DEPLOY_CHART_VERSION.tgz .&apos;
                    env.PRE_DEPLOY_CHART_FILE_SIZE = sh(script: &apos;du -b eric-enm-pre-deploy-integration-$PRE_DEPLOY_CHART_VERSION.tgz | cut -f1&apos;, returnStdout: true).trim()
                    def bobWithPreDeployInfo = new BobCommand()
                                        .bobImage(defaultBobImage)
                                        .needDockerSocket(true)
                                        .envVars([
                                                &apos;PRODUCT_SET&apos;        : env.PRODUCT_SET,
                                                &apos;ISO_VERSION&apos;       : env.ISO_VERSION,
                                                &apos;PRE_DEPLOY_CHART_FILE_SIZE&apos; : env.PRE_DEPLOY_CHART_FILE_SIZE
                                        ])
                                        .toString()
                    sh &quot;${bobWithPreDeployInfo} generate-pre-deploy-int-metadata-parameters&quot;
                    archiveArtifacts &apos;pre-deploy-int-metadata-artifact.json&apos;
                }
            }
        }
      stage(&apos;Tag Cloud-Native eric-enm-pre-deploy-integration Repository&apos;) {
            steps {
                wrap([$class: &apos;BuildUser&apos;]) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        &apos;AUTHOR_NAME&apos;        : &quot;${GIT_COMMITTER_NAME}&quot;,
                                        &apos;AUTHOR_EMAIL&apos;       : &quot;${GIT_COMMITTER_EMAIL}&quot;,
                                        &apos;GIT_COMMITTER_NAME&apos; : &quot;${GIT_COMMITTER_NAME}&quot;,
                                        &apos;GIT_COMMITTER_EMAIL&apos;: &quot;${GIT_COMMITTER_EMAIL}&quot;
                                ])
                                .toString()
                        sh &quot;${bobWithCommitterInfo} create-git-tag&quot;
                    //    sh &quot;&quot;&quot;
                    //        tag_id=\$(cat .bob/var.version)
                    //        git push origin \${tag_id}
                    //    &quot;&quot;&quot;
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                always {
                    script {
                        sh &quot;${bob} remove-git-tag&quot;
                    }
                }
            }
      }

      stage(&apos;Bump Version&apos;) {
          steps {
              script {
                  sh &apos;hostname&apos;
                  Version = readFile &quot;VERSION_PREFIX&quot;
                  sh &apos;docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch&apos;
                  newVersion = readFile &quot;VERSION_PREFIX&quot;
                  env.PRE_DEPLOY_VERSION = newVersion
                  currentBuild.displayName = &quot;${BUILD_NUMBER} - Version - &quot; + Version
                  sh &apos;&apos;&apos;
                       git add VERSION_PREFIX
                       git commit -m &quot;Version $PRE_DEPLOY_VERSION&quot;
                       git push origin HEAD:${BRANCH}
                   &apos;&apos;&apos;
               }
           }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
       */
     stage(&apos;CLEAN&apos;) {
         steps {
          sh &quot;${bob} clean&quot;
        }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
            }
       }
     }
     post {
        failure {
            mail to: &apos;vinay.kumar.chapram.ext@ericsson.com&apos;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |--group-add \$(stat -c &apos;%g&apos; /var/run/docker.sock)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>