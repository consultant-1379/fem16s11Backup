<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Rollback Build pipeline cENM_Rollback - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_mechanism</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either charts or csar.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>charts</string>
              <string>csar</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The deployment name to run the job against</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>stage_area</name>
          <description>This parameter acts as the flow controller to download charts from internal area or release area</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci_internal</string>
              <string>drop</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Provide clould native product set version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>drop</name>
          <description>provide the drop version</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>backup_name</name>
          <description>Provide BackupName</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.1">
          <name>integration_value_type</name>
          <description>Select the integration values file for Rollbacking cENM. NOTE: Integration values file should be selected same as the file that was used by the environment when taking backup</description>
          <randomName>choice-parameter-23166086623265279</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.75">
              <script>List production_files = ["eric-enm-integration-production-values", "eric-enm-integration-extra-large-production-values"]
List all_integration_files = ["eric-enm-integration-production-values", "eric-enm-integration-extra-large-production-values", "eric-enm-multi-instance-functional-integration-values", "eric-enm-single-instance-production-integration-values" , "eric-enm-integration-functional-test-values", "eric-enm-integration-openstack-core-values"]

if (deployment_mechanism == "csar") { return production_files }
else if (deployment_mechanism == "charts") { return all_integration_files }</script>
              <sandbox>true</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.75">
              <script/>
              <sandbox>true</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>cENM_ROLLBACK_NonProd</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>deployment_mechanism</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description/>
          <defaultValue>Upgrade_CSAR_Slave_4Node_MISTY</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>def commonMethods

pipeline{
    agent {
            node
            {
               label slave
            }
        }
    environment {
        HOME_DIR = "${WORKSPACE}"
        https_proxy = "http://www-proxy.lmera.ericsson.se:8080/"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
        backup_restore_cli = "armdocker.rnd.ericsson.se/proj-enm/backup-restore-cli:latest"
        backup_restore_cli_docker_image = "docker run --rm --network=host -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${backup_restore_cli} brocli"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-514064',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage('Delete docker image') {
            steps {
                script {
                    commonMethods.delete_build_utilities_image()
                }
            }
        }
        stage('Pull docker image') {
            steps {
                script {
                    sh "docker pull ${cenm_utilities_docker_image}"
                }
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                script{
                      commonMethods.extract_jq()
                      commonMethods.download_kube_config_file_from_dit()
                      commonMethods.read_site_config_info_from_dit()
                      commonMethods.get_cn_build_version_info()
                      commonMethods.set_kube_config_file()
                      sh "docker pull armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
               }
            }
        }
        stage( 'Login docker registry' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     expression{env.CONTAINER_REGISTRY_USERNAME != ''}
                     expression{env.CONTAINER_REGISTRY_PASSWORD != ''}
                 }
            }
            steps {
               script{
                 commonMethods.create_docker_secret()
              }
            }
        }
        stage( 'Download CSAR PACKAGE from nexus area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
              script{
                retry(3){
                  commonMethods.download_csar_package_nexus()
                }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from release area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
               script{
                retry(3){
                  commonMethods.download_csar_package_release()
                }
               }
            }
        }
        stage('Extract csar package') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps {
                script {
                       commonMethods.extract_csar_package()
                       commonMethods.get_integration_charts_version()
                }
            }
        }
        stage('Perform Load/Retag/Push') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
             }
            steps {
                script {
                        commonMethods.csar_utils()
                }
            }
        }
        stage('Download Charts from CI Internal') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_ci_internal()
                }
            }
        }
        stage('Download Charts from Release area') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_release_area()
                }
            }
        }
        stage('Updating integration values'){
            steps{
                script{
                    commonMethods.get_integration_charts_path()
                    commonMethods.updateIntegrationValues()
                }
            }
        }
        stage('cENM Rollback Uninstall'){
             steps{
                  script{
                         commonMethods.cenm_rollback_uninstall()
                         commonMethods.cenm_rollback_pvc_delete()
                         }
                    }
          }
       stage('Rollback PreDeploy Chart'){
            steps{
                 script{
                        env.revision = sh (script : "${helm} list -n ${NAMESPACE} | grep eric-enm-pre-deploy-integration-${NAMESPACE} | awk \'{print \$(NF-7)}\'", returnStdout: true).trim()
                        if(env.revision &gt; "1")
                        {
                          echo "Rollback can be done"
                          sh "${helm} rollback eric-enm-pre-deploy-integration-${NAMESPACE}  -n ${NAMESPACE}"
                        }
                       else
                       {
                        echo "rollback cannot be done"
                        sh "exit 0"
                        }
                     }
                   }
              }
       stage('Rollback Monitoring Chart'){
              steps{
                 script{
                        env.revision = sh (script : "${helm} list -n ${NAMESPACE} | grep eric-enm-monitoring-integration-${NAMESPACE} | awk \'{print \$(NF-7)}\'", returnStdout: true).trim()
                        if(env.revision &gt; "1")
                        {
                          echo "Rollback can be done"
                          sh "${helm} rollback eric-enm-monitoring-integration-${NAMESPACE}  -n ${NAMESPACE}"
                        }
                        else
                        {
                        echo "rollback cannot be done"
                        sh "exit 0"
                        }
                     }
                  }
               }
       stage('Rollback Bro Chart'){
              steps{
                script{
                        env.revision = sh (script : "${helm} list -n ${NAMESPACE} | grep eric-enm-bro-integration-${NAMESPACE} | awk \'{print \$(NF-7)}\'", returnStdout: true).trim()
                        if(env.revision &gt; "1")
                        {
                        echo "Rollback can be done"
                        sh "${helm} rollback eric-enm-bro-integration-${NAMESPACE}  -n ${NAMESPACE}"
                        }
                        else
                        {
                        echo "rollback cannot be done"
                        sh "exit 0"
                        } 
                        sh "${kubectl} get configmap/eric-ctrl-bro-serviceproperties -n ${NAMESPACE}  -o yaml| sed 's/^\\(\\s*timeout.data.channel\\s*:\\s*\\).*/\\1600/' | ${kubectl} replace -n ${NAMESPACE}  -f -"
                        sh "${kubectl} delete pod eric-ctrl-bro-0 -n ${NAMESPACE}"
                        sh "sleep 60s"
                        sh '''
                          while [[ "$(${kubectl} get pod eric-ctrl-bro-0 -n ${NAMESPACE})" != *"Running"* ]];
                          do
                              logger "Waiting for eric-ctrl-bro-0 pod to running ...";
                              sleep 10 ;
                          done
                        '''
                        env.Productnumber= sh (script : "${kubectl} get cm product-version-configmap -o yaml -n $NAMESPACE | grep ericsson.com/product-number|sort -V | head -n 1|awk -F ':' '{print \$2}'|awk '\$1=\$1'", returnStdout: true).trim()
                        echo "${Productnumber}"
                       }
              }
        }
    stage('Verify Rollback Backup exists') {
            parallel {
                stage('bro port forwarding') {
                    steps {
                        script{
                              sh  "${kubectl_backup} port-forward svc/eric-ctrl-bro 7001 -n ${NAMESPACE}|| true"
                        }
                    }
                }
                stage('Verify Rollback exists') {
                    steps {
                          script{
                                  sh "sleep 120s"
                                  sh "${backup_restore_cli_docker_image} show $backup_name --scope=ROLLBACK ||true"
                                  env.Backup_Info=sh(script: "${backup_restore_cli_docker_image} show $backup_name --scope=ROLLBACK", returnStdout: true).trim()
                                  if ( Backup_Info.contains(Productnumber) ){
                                  echo "Product numbers are equal"
                                  }
                                  else {
                                        echo "Failed!! Product number of the backup for rollback doesnot match with the product number BRO"
                                        sh "exit 1"
                                 }
                               }
                           }
                          post {
                               always {
                                       sh "${backup_restore_cli_docker_image} list"
                                       sh "docker stop backup_port_forward"
                              }
                         }
                    }
             }
        }
        stage('Verify Install cENM Infra chart') {
            parallel {
               stage('Bro port forwarding for infra chart') {
                    steps {
                        script{
                              sh  "${kubectl_backup} port-forward svc/eric-ctrl-bro 7001 -n ${NAMESPACE}|| true"
                        }
                    }
                }
                stage('Install cENM Infra chart') {
                   when {
                          expression{env.infra_chart_version != ''}
                    }
                    steps {
                        script{
                              sh "${helm} install eric-enm-infra-integration-${NAMESPACE} --values cENM/Scripts/${integration_values_file_path}  cENM/Definitions/OtherTemplates/${infra_integration_chart_path} --set global.restore.state=ongoing --set global.restore.scope=ROLLBACK --set global.restore.backupName=$backup_name -n ${NAMESPACE} --wait --timeout 8h"
                        }
                    }
                }
                stage('Verify  the values in the configmap and perform restore') {
                    steps {
                          script{
                                 sh "sleep 300"
                                 restorestatevalue= sh(script: "\${kubectl}  get configmap/backup-restore-configmap -o yaml -n \${NAMESPACE}|grep RESTORE_STATE|sort -V | head -n 1|awk -F ':' '{print \$2}'", returnStdout: true).trim() 
                                 if (restorestatevalue.contains("ongoing")){
                                     commonMethods.bro_agent_registered()
                                       sh "${backup_restore_cli_docker_image} restore $backup_name --scope ROLLBACK"
                                   }
                                 else{
                                      echo "Failure in restoring"
                                      sh "exit 1"
                                  }
                               }
                           }
                        post {
                          always {
                                sh "${backup_restore_cli_docker_image} list"
                                sh "docker stop backup_port_forward"
                              }
                         }
                       }
                    }
                 post {
                      always {
                          script{
                              env.infra_status=sh(script: "\${helm} list -n \${NAMESPACE} | grep eric-enm-infra-integration-${NAMESPACE} | awk \'{print \$(NF-2)}\'",returnStdout: true).trim()
                              if (infra_status.contains("deployed")){
                                 sh '''${kubectl} patch configmap/backup-restore-configmap --patch '{"data": {"RESTORE_STATE": "finished"}}' -n ${NAMESPACE} '''
                              }else{
                                echo "Infra chart is not deployed"
                                sh "exit 1"
                              }
                            }
                          }
                         }
        }
         stage('Install cENM Stateless chart'){
               when {
                  expression{env.stateless_chart_version != ''}
               }
              steps{
                  script{
                        commonMethods.stateless_integration_chart("install","2h")
                        sh '''${kubectl} patch configmap/backup-restore-configmap --patch '{"data": {"RESTORE_STATE": "","RESTORE_SCOPE": "","RESTORE_BACKUP_NAME": ""}}' -n ${NAMESPACE} '''							 
                       commonMethods.end_time_deployment()
                      }
                 }
         }

        stage('CheckPods Running'){
            steps{
                script{
                    retry(5){
                        commonMethods.checkHealthyPods()
                    }
                }
            }
        }
        stage('Generate artifact file'){
             steps{
                  script{
                        commonMethods.generate_artifact_file()
                        }
                  }
                }
    }
    post{
        failure {
            script{
                def report = commonMethods.reportHeading("Failed")
                report += commonMethods.printPods()
                commonMethods.emailReport(report)
                echo "Failure"
            }
        }
        aborted{
            script{
                def report = commonMethods.reportHeading("Aborted")
                report += commonMethods.printPods()
                commonMethods.emailReport(report)
                echo "Aborted"
            }
        }
        success{
            script{
                def report = commonMethods.reportHeading("Success")
                report +=commonMethods.printPods()
                commonMethods.emailReport(report)
                echo "Success"
            }
        }
        always {
            script{
                currentBuild.displayName = "Rollback with ${deployment_mechanism} on: ${environment_name}"
                currentBuild.description = "&lt;b&gt;Bro Chart Version = ${bro_chart_version}&lt;br&gt;Monitoring chart version = ${monitoring_chart_version}&lt;br&gt;Pre Deploy Chart Version = ${pre_deploy_chart_version}&lt;br&gt;Infra Chart Version = ${infra_chart_version}&lt;br&gt;Stateless Chart Version = ${stateless_chart_version}&lt;br&gt;Integration Value Version = ${integration_value_version}&lt;/b&gt;"
                sh("cat ${HOME_DIR}/cENM/Scripts/${integration_values_file_path}")
                archiveArtifacts "cENM/Scripts/${integration_values_file_path}"
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>