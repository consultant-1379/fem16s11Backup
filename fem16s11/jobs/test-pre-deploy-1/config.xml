<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline pre-deploy-integration - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''

pipeline {
    agent {
        label 'Cloud-Native'
    }
    stages {
       stage ('Clean workspace') {
          steps {
            echo 'Clean workspace..'
            // deleteDir()
         }
       }
        stage('Inject Credential Files') {
          steps {
                echo 'Inject credential file..'
             withCredentials( [file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                     sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
            }
          }
        }
        stage('Checkout Cloud-Native eric-enm-pre-deploy-integration Git Repository'){
         steps {
             echo 'Checkout git repository..'
             git branch: 'master',
                     url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.ci/eric-oss-central-service'
         }
        }
        stage('Getting sprint tag') {
            steps {
                echo 'Getting sprint tag..'
               script {
                 env.SPRINT_TAG = sh(script: 'wget -q -O - --no-check-certificate https://ci-portal.seli.wh.rnd.internal.ericsson.com//api/product/ENM/latestdrop/|cut -d\':\' -f2|sed \'s/[},"]//g\'', returnStdout: true).trim()
               }
            }
        }
         stage('GET-Chart-Versions') {
               steps {
                   echo 'Get chart version..'
                  /* script{
                   withCredentials([
                      usernamePassword(credentialsId: 'cenmbuild_api_token', usernameVariable: 'JENKINS_USER_NAME', passwordVariable: 'JENKINS_API_TOKEN')]) {
                       def bobwithpublish = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['JENKINS_USER_NAME': env.JENKINS_USER_NAME,
                                      'JENKINS_API_TOKEN': env.JENKINS_API_TOKEN,
                                      'JENKINS_URL': env.JENKINS_URL,
                            ])
                            .toString()
                       sh "${bobwithpublish} get-chart-versions"
                   }
                } */
               }
           }
       stage('Update Charts'){
         steps {
              echo 'Update version..'
              /* sh '''
                    while read line;
                    do
                       CHART_NAME=$(echo $line | cut -d"=" -f1); CHART_VERSION=$(echo $line | cut -d"=" -f2);
                       docker run --init --rm --workdir $(pwd) -v $(pwd):$(pwd) -v /var/run/docker.sock:/var/run/docker.sock armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-int-helm-chart-auto ihc-update -f chart/eric-enm-pre-deploy-integration/ -n $CHART_NAME -v $CHART_VERSION;
                    done &lt; chart_versions_file
                 '''
         }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 } */
             }
       }
        stage('Lint Helm'){
         steps {
             echo 'Lint Helm Chart..'
            // sh "${bob} lint-helm"
         }
        }
        stage('ADP Helm Design Rule Check') {
          steps {
              echo 'ADP Helm Design Rule Check..'
             /* sh "${bob} test-helm || true"
             archiveArtifacts 'design-rule-check-report.*' */
          }
        }
        stage('Update Chart.yaml with chart version') {
         steps {
             echo 'Update Chart.yaml with chart version'
            /* script {
                  sh '''
                       if git status | grep 'chart/eric-enm-pre-deploy-integration/Chart.yaml' &gt; /dev/null; then
                           git add chart/eric-enm-pre-deploy-integration/Chart.yaml
                           git commit -m "Updating Chart.yaml with latest SG versions"
                           git push origin HEAD:master
                       else
                           echo `date` &gt; timestamp
                           git add timestamp
                           git commit -m "NO JIRA - Time Stamp "
                           git push origin HEAD:master
                       fi
                   '''
               }
           }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 } */
             }
       }
        stage('Generate New Version') {
         steps {
             echo 'Generate New Version..'
             /* sh "${bob} generate-new-version"
          }
          post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 } */
             }
         }
         stage('Build Chart') {
               steps {
                   echo 'Build chart..'
                  /* script{
                   withCredentials([
                      usernamePassword(credentialsId: 'cenmbuild', usernameVariable: 'HELM_USER', passwordVariable: 'HELM_TOKEN')]) {
                       def bobwithbuild = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['HELM_USER': env.HELM_USER,
                                      'HELM_TOKEN': env.HELM_TOKEN,
                            ])
                            .toString()
                       sh "${bobwithbuild} build-helm"
                   }
                 }
               }
             post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 } */
             }
     }
     stage('Publish Helm Chart') {
         steps {
               echo 'Publish helm chart..'
               /* script {
                        def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['HELM_REPO_TOKEN': env.HELM_REPO_TOKEN])
                                .toString()
                        sh "${bobWithHelmToken} helm-push"
                }
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 } */
             }
     }
      stage('Generate INT Parameters') {
         steps {
                script{
                    echo 'Generate INT Parameters..'
                    //sh "${bob} generate-output-parameters"
                    env.COMMIT_HASH = sh(script: 'git log -1 --format=format:%H', returnStdout: true)
                    sh 'echo "INT_COMMIT_HASH=${COMMIT_HASH}" &gt;&gt; artifact.properties'
                    sh 'echo "INT_CHART_VERSION=12.2.0-3" &gt;&gt; artifact.properties'
                    archiveArtifacts 'artifact.properties'
                    // archiveArtifacts '.bob/var.commit-hash'
             }
       }
       post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
      }
      stage('Tag Cloud-Native eric-enm-pre-deploy-integration Repository') {
            steps {
                echo 'Tag the repository..'
               /*  wrap([$class: 'BuildUser']) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        'AUTHOR_NAME'        : "${GIT_COMMITTER_NAME}",
                                        'AUTHOR_EMAIL'       : "${GIT_COMMITTER_EMAIL}",
                                        'GIT_COMMITTER_NAME' : "${GIT_COMMITTER_NAME}",
                                        'GIT_COMMITTER_EMAIL': "${GIT_COMMITTER_EMAIL}"
                                ])
                                .toString()
                        sh "${bobWithCommitterInfo} create-git-tag"
                        sh """
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        """
                    } */
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                /* always {
                    script {
                        sh "${bob} remove-git-tag"
                    }
                } */
            }
      }
      stage('CLEAN') {
         steps {
             echo 'Clean..'
            //sh "${bob} clean"
         }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
            }
       }
     }
     post {
        success {
            echo 'Success..'
            /* script {
                sh '''
                    set +x
                    git tag --annotate --message "Tagging latest in sprint" --force $SPRINT_TAG HEAD
                    git push --force origin $SPRINT_TAG
                '''
            } */
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>