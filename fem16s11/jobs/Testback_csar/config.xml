<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Backup Build pipeline cENM_Backup - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_mechanism</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either charts or csar.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>charts</string>
              <string>csar</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description/>
          <defaultValue>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_21</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>backup_scope</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ROLLBACK</string>
              <string>RESTORE</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>stage_area</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci_internal</string>
              <string>drop</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description/>
          <defaultValue>21.12.26</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>drop</name>
          <description/>
          <defaultValue>21.12</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>backup_name</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description/>
          <defaultValue>ieatenmvcd11</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>pipeline{
    agent {
            node
            {
               label slave
            }
        }
    environment {
            HOME_DIR = "${WORKSPACE}"
            cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
            nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
            helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
            helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
            csar_package_name = "enm-installation-package"
            Client_HOME ="/home/cenmbuild"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-520157',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods1.groovy")
                }
            }
        }
        stage('Delete docker image') {
            steps {
                script {
                    commonMethods.delete_build_utilities_image()
                }
            }
        }
        stage('Pull docker image') {
            steps {
                script {
                    sh "docker pull ${cenm_utilities_docker_image}"
                }
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                script{
                      commonMethods.extract_jq()
                      commonMethods.download_kube_config_file_from_dit()
                      commonMethods.read_site_config_info_from_dit()
                      commonMethods.set_kube_config_file()
                      commonMethods.get_cn_build_version_info()
               }
          }
        }
        stage( 'Login docker registry' ) {
            when {
                allOf {
                    environment name: 'deployment_mechanism', value: 'csar'
                    expression{env.CONTAINER_REGISTRY_USERNAME != ''}
                    expression{env.CONTAINER_REGISTRY_PASSWORD != ''}
                }
            }
            steps {
               script{
                commonMethods.create_docker_secret()
               }
            }
        }
        stage( 'Download CSAR PACKAGE from nexus area' ) {
            when {
                 allOf {
                    environment name: 'deployment_mechanism', value: 'csar'
                    environment name: 'stage_area', value: 'ci_internal'
                }
            }
            steps {
              script{
                retry(3){
                  commonMethods.download_csar_package_nexus()
                }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from release area' ) {
            when {
                allOf {
                    environment name: 'deployment_mechanism', value: 'csar'
                    environment name: 'stage_area', value: 'drop'
                }
            }
            steps {
               script{
                retry(3){
                  commonMethods.download_csar_package_release()
                }
               }
            }
        }
        stage('Extract csar package') {
            when {
                environment name: 'deployment_mechanism', value: 'csar'
            }
            steps {
                script {
                    commonMethods.extract_csar_package()
                }
            }
        }
        stage('Backuprestore cli image'){
            steps {
                script{
                    commonMethods.brocli_image()
				}
			}
		}
        stage('Running Backup') {
            parallel {
                stage('bro port forwarding') {
                    steps {
                        script{
                            sh "${kubectl_backup} port-forward svc/eric-ctrl-bro 7001 -n ${NAMESPACE}|| true"
                        }
                    }
                }
                stage('Backup with scope') {
                    steps {
                        script{
						    sh "sleep 10s"
                            sh "${backup_restore_cli_docker_image} status"
                            if(backup_scope.equals("ROLLBACK")){
                                commonMethods.backup_rollback()
                            }
                            else{
                                commonMethods.backup_restore() 
                                commonMethods.creation_folder_in_sftp_server()
                                commonMethods.export_backup()
                            }
                        }
                    }
                    post {
                        always {
                        script{
                                commonMethods.show_backup_list_and_stop_backup_port_forward()
		                    }
                        }
                    }
                }
            }
        }
    }

    post{
        failure {
            script{
                echo "Failure"
            }
        }
        aborted{
            script{
                echo "Aborted"
            }
        }
        success{
            script{
                echo "Success"
            }
        }
        always {
            script{
                currentBuild.displayName = "Backup with ${deployment_mechanism} on: ${environment_name} by ${backup_scope}"
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>