<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Upgrade Build pipeline cENM_Initial_Install - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_mechanism</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either charts or csar.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>charts</string>
              <string>csar</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The deployment name to run the job against</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>stage_area</name>
          <description>This parameter acts as the flow controller to download charts/csar from internal area or release area</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci_internal</string>
              <string>drop</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>drop</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>integration_value_type</name>
          <description>Select the type of integration values type to be used</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-production-values</string>
              <string>eric-enm-integration-extra-large-production-values</string>
              <string>eric-enm-multi-instance-functional-integration-values</string>
              <string>eric-enm-single-instance-production-integration-values</string>
              <string>eric-enm-integration-functional-test-values</string>
              <string>eric-enm-integration-openstack-core-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>backup_name</name>
          <description>Provide BackupName</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>backup_scope</name>
          <description>This parameter acts as the flow controller to select the scope of backup</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>DEFAULT</string>
              <string>ROLLBACK</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>eric_eo_evnfm_csar_version</name>
          <description>Provide the eric-eo-evnfm CSAR package version</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description></description>
          <defaultValue>Upgrade_CSAR_Slave_4Node_MISTY</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = &apos;armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.28&apos;
def metadataImage = &apos;armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest_ela&apos;
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()
def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()


pipeline {
    agent {
        node{
            label SLAVE
        }
    }
    environment{
        CSAR_PACKAGE_NAME = &quot;cenm-ela&quot;
        VERSION = &quot;1.0.0-15&quot;
    }
    stages {
        
       
        stage(&apos;Generate CSAR metadata&apos;) {
            steps {
                script {
                    env.filesize = sh(script: &quot;du -h ${CSAR_PACKAGE_NAME}-${VERSION}.csar | cut -f1&quot;, returnStdout: true).trim()
                    sh &apos;git rev-parse --verify HEAD &gt; commit-hash&apos;
                    def AMPackageWithCsarMetadata = new AMPackageCommand()
                             .AMPackageImage(metadataImage)
                             .needDockerSocket(true)
                             .toString()
                    sh &quot;${AMPackageWithCsarMetadata} ela-csar-metadata-artifacts --name cenm-ela --csar-package-version ${VERSION} --base-csar-repo https://test/cenm-ela/ --file_size ${filesize} --product-set ${product_set_version} --custom-file-name site_values&quot;
                    archiveArtifacts &apos;ela-csar-metadata-artifacts.json&apos;
                }
            }
        }
        

    }
    post {
        success {
            script {
                echo &quot;Success&quot;
            }
        }
        failure {
            script {
                echo &quot;Failed&quot;                
            }
        }
        aborted {
            script {
               echo &quot;Aborted&quot;                
            }
        }
        always {
            script{
                
                archiveArtifacts &apos;scripts/site_values*.yaml&apos;
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class AMPackageCommand {
    def AMPackageImage = &apos;AMPackage.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)
        def cmd = &quot;&quot;&quot;\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${AMPackageImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:1.5.2-0&apos;
    def envVars = [:]
    def needDockerSocket = false
    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)
        def cmd = &quot;&quot;&quot;\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; \$group; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>