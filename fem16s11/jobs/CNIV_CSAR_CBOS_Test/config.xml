<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties>
        <string>jenkins.model.BuildDiscarderProperty</string>
      </jobProperties>
      <triggers/>
      <parameters/>
      <options>
        <string>skipDefaultCheckout</string>
      </options>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This Jenkins Job runs Common Base OS age tool.&lt;br&gt;&#13;
It's triggered automatically by Spinnaker Pipeline (every CSAR build).&lt;br&gt;&#13;
&lt;br&gt;&#13;
&lt;h3 style="color:red"&gt;In case of issues with HTML visualization, please take a look at&lt;/h3&gt;&#13;
&#13;
&lt;a href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/Admin+Guide+-+Content+Security+Policy+-+HTML+Report+visualization"&gt;Admin+Guide+-+Content+Security+Policy+-+HTML+Report+visualization&lt;/a&gt;&#13;
&#13;
&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>40</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>40</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>CSAR_PACKAGE_VERSION</name>
          <description>CSAR version fetched by Spinnaker pipeline</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>@Library('ci-cn-pipeline-lib') _
defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'

env.bob = new BobCommand()
.bobImage(defaultBobImage)
.needDockerSocket(true)
.toString()

pipeline {
    agent {
        node {
            label 'Cloud-Native-Pointfix'
        }
    }
    options {
        skipDefaultCheckout true
        timestamps()
        timeout(time: 150, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '40', artifactNumToKeepStr: '40'))
    }
    stages {
        stage('Checkout OSS VA Git Repository') {
            steps {
                script {
                    git changelog: true, poll: false, url: '${GERRIT_MIRROR}/OSS/ENM-Parent/SQ-Gate/com.ericsson.va/oss_va'
                }
            }
        }
        stage('Init') {
            steps {
                script {
                    env.CSAR_REPO_URI =  "https://ci-portal.seli.wh.rnd.internal.ericsson.com/static/tmpUploadSnapshot//2022-09-29_16-37-32/enm-cniv-installation-package-0.0.1.csar"
                    println( "CSAR_REPO_URI + the CSAR Version --&gt; "+CSAR_REPO_URI)

                    echo 'Inject ADP CBO Age tool credentials file'
                    withCredentials([file(credentialsId: "cbos_repo_credentials" , variable: 'repocredentials')]) {
                        writeFile file: 'credentials.yaml', text: readFile(repocredentials)
                    }

                    sh 'cp cENM/ruleset/ruleset2.0.yaml .'
                    sh 'cp cENM/cbos/jsonToCSVConverter.py .'
                }
            }
        }
        stage('ADP CBO Age tool scanning - CSAR') {
            when { expression{env.CSAR_REPO_URI != ''} }
            steps {
                script {
                    sh """
                        set +x
                        mkdir -p .bob
                        echo Downloading CSAR to be scanned:

                        time wget  ${CSAR_REPO_URI} --progress=bar:noscroll -nv
                        ls *.csar &gt; .bob/var.CSARTOSCAN
                        ${bob} cbos-scan
                    """
                }
            }
        }
        stage('Consolidate reports into Large CSV'){
            steps{
                script{
                    sh """python jsonToCSVConverter.py
                    echo Converting JsON files to Large CSV
                    """
                    archiveArtifacts 'sorted_by_cbOsAge.csv'
                    archiveArtifacts'sorted_by_cbOsAge.html'
                }
            }
        }
        stage('Get CBO Release Data'){
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'cenmbuild_ARM_token', , usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                        curl -s -u ${USERNAME}:${PASSWORD} -X POST https://arm.epk.ericsson.se/artifactory/api/search/aql -H "content-type: text/plain" -d 'items.find({ "repo": {"\$eq":"docker-v2-global-local"}, "path": {"\$match" : "proj-ldc/common_base_os_release/*"}, "created": {"\$gt" : "2021-08-24"}}).sort({"\$desc": ["created"]})' &gt; release.json
                        """
                    }
                }
            }
        }
        stage('Create Dashboard'){
            steps {
                script {
                    sh '''
                        for chart in eric-cniv-enm-integration
                        do
                            rm -rf ${chart}
                            mkdir ${chart}
                            report_json=$(find . -type f -name "*${chart}*.json")

                            cd ${chart}
                            git clone ssh://gerritmirror.seli.gic.ericsson.se:29418/adp-cicd/adp-cbos-dashboard-baseline .

                            cp ../${report_json} .
                            cp ../release.json .

                            cd ..
                        done
                    '''
                    def chart_list = ['eric-cniv-enm-integration']
                    chart_list.each {
                        def buildResult = sh returnStatus: true, script: 'docker run --init --rm --workdir /va_summary -v $(pwd)/' + it + ':/va_summary armdocker.rnd.ericsson.se/proj-axis_test/va-summary:latest /usr/bin/python3.6 template.py .'
                    }
                    archiveArtifacts '**/*.html'
                }
            }
        }
    }
    post {
        always {
            script {
                deleteDir()
            }
        }
        success {
            script {
                echo "Placeholder for the Post Success"
            }
        }
        failure {
            script {
                echo "Something went wrong...\nPlease check Helm Chart/CSAR URL or Helm Repo credentials."
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>10</quietPeriod>
  <disabled>true</disabled>
</flow-definition>