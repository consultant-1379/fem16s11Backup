<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SLAVE</name>
          <defaultValue>Docker-POC-e2e</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CURRENT_SPRINT</name>
          <description>Enter current sprint number Eg: 21.04</description>
          <defaultValue>21.04</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHECKOUT_TAG</name>
          <description>This is the reference tag based on which pointfix branch would be created. Use refs/tags/[Current Sprint Number] to pick up the latest release. Eg:  refs/tags/21.04.</description>
          <defaultValue>refs/tags/21.04</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>def fmsdk = 'OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.mediation.sdk/eric-enm-fmsdk'
def csar = 'OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.mediation.sdk/sdk-csar-buildmanager'
def templates = 'OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.mediation.sdk/fm-sdk-templates'

parameters {
    string(name: 'SLAVE', defaultValue: "Docker-POC-e2e")
    string(name: 'CURRENT_SPRINT', description: 'Enter current sprint number Eg: 21.01',defaultValue: "21.01")
    string(name: 'CHECKOUT_TAG', description: 'This is the reference tag based on which pointfix branch would be created. Use refs/tags/SPRINT_[Current Sprint Number] to pick up the latest release. Eg:  refs/tags/SPRINT_20.14.', defaultValue: "*/master")
}
pipeline {
    agent { label SLAVE }
    stages {
        // stage('Init') {
        //     steps {
        //         script {
        //             sh '''
        //                 #Remove running containers
        //                 running=$(docker ps -a -q| wc -l)
        //                 if [ "$running" -gt "0" ];then
        //                     echo "Killing containers"
        //                     docker rm -f $(docker ps -a -q)
        //                 fi
        //             '''
        //             createCsv()
        //         }
        //     }
        // }
        // stage('Update FMSDK Versions') {
        //  steps {
        //         script {
        //               echo "Killing FMSDK"
        //         //    callCreatePointFixBranchfunction('eric-cenm-create-pointfix-branch', fmsdk, 'FMSDK')
        //         }
        //     }
        // }

        // stage('Update CSAR Versions') {
        //  steps {
        //         script {
        //               echo "Killing CSAR"
        //         //    callCreatePointFixBranchfunction('eric-cenm-create-pointfix-branch', csar, 'CSAR')
        //         }
        //     }
        // }

        // stage('Update FMSDK Templates Versions') {
        //  steps {
        //         script {
        //               echo "Killing Templates"
        //         //    callCreatePointFixBranchfunction('eric-cenm-create-pointfix-branch', templates, 'FMSDK Templates')
        //         }
        //     }
        // }
        
        stage('Execute Shell') {
         steps {
                script {

                    //   def SERVER_URL="https://jsonplaceholder.typicode.com/todos/1"
                    //   def RESPONSE= sh(returnStdout: true, script: "curl -X GET '${SERVER_URL}'")
                    //   echo "$RESPONSE"
                    
                    // def API_URL = "https://confluence-oss.seli.wh.rnd.internal.ericsson.com/rest/api/content/550398751"
                    // def HEADERS = ["Authorization: Basic LSBuIEVCQVJTRUE6S29vY2hAMTk2Ngo=",
                    //     "Content-Type: application/json"
                    // ]
                    // def RESPONSE = sh(returnStdout: true, script: "curl -X GET -H 'Authorization: Basic RUJBUlNFQTpLb29jaEAxOTY2' -H 'Content-Type: application/json' https://confluence-oss.seli.wh.rnd.internal.ericsson.com/rest/api/content/550398751")
                    // echo "$RESPONSE"
                    // sh '''
                    // curl -X PUT -H 'Authorization: Bearer OTU0OTcyNzAxMzc4Oii5heHk6n9SQTdGsfh5hsF7Phhz' -H 'Content-Type: application/json' -d '{
                    //   "id": "550398751",
                    //   "type": "page",
                    //   "title": "Success/Failure",
                    //   "space": {
                    //     "key": "TINH"
                    //   },
                    //   "version": {
                    //     "number": 6
                    //   },
                    //   "body": {
                    //     "storage": {
                    //       "value": "&lt;table&gt;&lt;tr&gt;&lt;td&gt;Column 1&lt;/td&gt;&lt;td&gt;Column 2&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;",
                    //       "representation": "storage"
                    //     }
                    //   }
                    // }' 'https://confluence-oss.seli.wh.rnd.internal.ericsson.com/rest/api/content/550398751'
                    // '''
                    
                    //Install the HTTP Request Plugin

                    // Retrieve the current content of the Confluence page using the Get Page API
                    // def pageContent
                    
                    // sh """
                    // curl -X GET -H "Authorization: Bearer OTU0OTcyNzAxMzc4Oii5heHk6n9SQTdGsfh5hsF7Phhz" https://confluence-oss.seli.wh.rnd.internal.ericsson.com/rest/api/content/550398751 &gt; response.html
                    // """
                    // pageContent = readFile 'response.html'
                    
                    def pageContent
                    pageContent = sh(returnStdout: true, script: """
                        curl -X GET -H "Authorization: Bearer OTU0OTcyNzAxMzc4Oii5heHk6n9SQTdGsfh5hsF7Phhz" https://confluence-oss.seli.wh.rnd.internal.ericsson.com/rest/api/content/550398751
                        """).trim()
                        
                    echo "${pageContent}"
                    echo "---------------------------"

                // Extract the information you need from the page content using regular expressions
                    def titleRegex = /&lt;title&gt;(.*)&lt;\/title&gt;/
                    def titleMatch = titleRegex.matcher(pageContent)
                    def title = ''
                    if (titleMatch.find()) {
                        title = titleMatch.group(1)
                    }
    
                    def bodyRegex = /&lt;body&gt;(.*)&lt;\/body&gt;/
                    def bodyMatch = bodyRegex.matcher(pageContent)
                    def body = ''
                    if (bodyMatch.find()) {
                        body = bodyMatch.group(1)
                    }
    
                    def versionRegex = /&lt;dd&gt;(\d+)&lt;\/dd&gt;/
                    def versionMatch = versionRegex.matcher(pageContent)
                    
                    def newTableData = "&lt;table&gt;&lt;tr&gt;&lt;td&gt;Column 1&lt;/td&gt;&lt;td&gt;Column 2&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Column 3&lt;/td&gt;&lt;td&gt;Column 4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;"
                    body += newTableData

                // Convert the modified page content to a JSON object
                    def pageBody = [:]
                    pageBody['id'] = "${PAGE_ID}"
                    pageBody['type'] = 'page'
                    pageBody['title'] = title
                    pageBody['body'] = [:]
                    pageBody['body']['storage'] = [:]
                    pageBody['body']['storage']['value'] = body
                    pageBody['body']['storage']['representation'] = 'storage'
                    pageBody['version'] = [:]
                    pageBody['version']['number'] = versionMatch.group(1).toInteger() + 1
                    pageBody['version']['minorEdit'] = false
                    sh """
                    curl -X PUT -H 'Content-Type: application/json' -H "Authorization: Bearer OTU0OTcyNzAxMzc4Oii5heHk6n9SQTdGsfh5hsF7Phhz" -d '${pageBody.toString().replaceAll('\\\\', '\\\\\\\\')}' https://confluence-oss.seli.wh.rnd.internal.ericsson.com/rest/api/content/550398751
                    """
                    
                    
                }
            }
        }
  
    }
    // post {
    //     always {
    //         archiveArtifacts artifacts: 'artifact.properties', allowEmptyArchive: true
    //         //emailext attachmentsPattern: 'report.csv', body: 'cENM Sprint Version Update Completed, See attached file for detailed results.', subject: 'cENM Sprint Version Update Completed', to: EMAIL
    //         sh '''
    //             #clean workspace
    //             echo Workspace ${WORKSPACE}
    //             rm -rf ${WORKSPACE}/*
    //         '''
    //     }
        
    // }
}

def createCsv() {
    outString = "buildmanger placeholder"
    outString2 = "buildmanger placeholder"

    
    writeFile file: 'artifact.properties', text: outString
    writeFile file: 'artifact.properties', text: outString2
}

def callCreatePointFixBranchfunction(pointfixjob, repo, repoType) {
    jobStatusSuccess = true
    status = "ERROR"
    updated = "FALSE"
    oldVersion = ""
    newVersion = ""
    def b = build(job: "${pointfixjob}", parameters: [[$class:'StringParameterValue', name:'REPO', value:String.valueOf("${repo}")],[$class:'StringParameterValue', name:'CURRENT_SPRINT', value:String.valueOf("${params.CURRENT_SPRINT}")],[$class:'StringParameterValue', name:'CHECKOUT_TAG', value:String.valueOf("${params.CHECKOUT_TAG}")],[$class:'StringParameterValue', name:'EMAIL', value:String.valueOf("${params.EMAIL}")],[$class:'BooleanParameterValue', name:'PUSH_COMMIT', value: "${params.PUSH_COMMIT}"]], propagate: false, wait: true)

        currentBuild.description = "Sprint Version Update Branch: $b.buildVariables.BRANCH_NAME&lt;BR&gt;"
        currentBuild.description += "Branch based on tag/branch: CHECKOUT_TAG"
        echo "Repo = ${repo}, Result = $b.result"

        if("$b.result" == 'SUCCESS') {
            status = "OK"
            jobStatusSuccess = jobStatusSuccess &amp;&amp; true
        } else {
            status = "ERROR"
            jobStatusSuccess = jobStatusSuccess &amp;&amp; false
        }

        readContent = readFile 'report.csv'
        outString = readContent + "${repo},$repoType,$b.buildVariables.oldMinorVersion,$b.buildVariables.newMinorVersion,$b.buildVariables.newVersion,$b.buildVariables.updated,$status\r\n"
        writeFile file: 'report.csv', text: outString
        if(!jobStatusSuccess) {
            currentBuild.result = "UNSTABLE"
            //unstable("Stage unstable")
            //     error("Error while updating the versions for the repo type: $repoType")
        }
}




</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>