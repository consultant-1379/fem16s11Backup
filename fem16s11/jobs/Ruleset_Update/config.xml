<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>//def cENMImageRepos = ['OSS/com.ericsson.oss.de.containerisation/test-eric-enmsg-kpi-service', 'OSS/com.ericsson.oss.de.containerisation/test-eric-enmsg-kpi-calc-serv']
def cENMImageRepos = ['OSS/com.ericsson.oss.containerisation/eric-enmsg-access-control','OSS/com.ericsson.oss.containerisation/eric-enmsg-amos','OSS/com.ericsson.oss.containerisation/eric-enmsg-auto-id-solr','OSS/com.ericsson.oss.containerisation/eric-enmsg-autoid-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-autoprovisioning','OSS/com.ericsson.oss.containerisation/eric-enmsg-cmevents','OSS/com.ericsson.oss.containerisation/eric-enmsg-cmservice','OSS/com.ericsson.oss.containerisation/eric-enmsg-cmutilities','OSS/com.ericsson.oss.containerisation/eric-enmsg-com-ecim-mscm','OSS/com.ericsson.oss.containerisation/eric-enmsg-comecimpolicy','OSS/com.ericsson.oss.containerisation/eric-enmsg-dc-history','OSS/com.ericsson.oss.containerisation/eric-enmsg-domain-proxy-coordinator','OSS/com.ericsson.oss.containerisation/eric-enmsg-dlms','OSS/com.ericsson.oss.containerisation/eric-enmsg-dpmediation','OSS/com.ericsson.oss.containerisation/eric-enmsg-elasticsearch','OSS/com.ericsson.oss.containerisation/eric-enmsg-eventbasedclient','OSS/com.ericsson.oss.containerisation/eric-enmsg-element-manager','OSS/com.ericsson.oss.containerisation/eric-enmsg-flowautomation','OSS/com.ericsson.oss.containerisation/eric-enmsg-fls','OSS/com.ericsson.oss.containerisation/eric-enm-flsdb-schemamgt','OSS/com.ericsson.oss.containerisation/eric-enmsg-fm-alarm-processing','OSS/com.ericsson.oss.containerisation/eric-enmsg-fm-history','OSS/com.ericsson.oss.containerisation/eric-enmsg-fm-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-general-scripting','OSS/com.ericsson.oss.containerisation/eric-enmsg-gossiprouter-cache','OSS/com.ericsson.oss.containerisation/eric-enmsg-gossiprouter-remoting','OSS/com.ericsson.oss.containerisation/eric-enmsg-gossiprouter-eap7','OSS/com.ericsson.oss.containerisation/eric-enmsg-ha-proxy','OSS/com.ericsson.oss.containerisation/eric-enmsg-import-export-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-ip-service-management','OSS/com.ericsson.oss.containerisation/eric-enmsg-jmsserver','OSS/com.ericsson.oss.containerisation/eric-enmsg-kpi-calc-serv','OSS/com.ericsson.oss.containerisation/eric-enmsg-kpi-service','OSS/com.ericsson.oss.containerisation/eric-enm-kvstore-hc','OSS/com.ericsson.oss.containerisation/eric-enmsg-lcmservice','OSS/com.ericsson.oss.containerisation/eric-enmsg-medrouter','OSS/com.ericsson.oss.containerisation/eric-enmsg-msap','OSS/com.ericsson.oss.containerisation/eric-enmsg-msapgfm','OSS/com.ericsson.oss.containerisation/eric-enmsg-mscm','OSS/com.ericsson.oss.containerisation/eric-enmsg-mscmapg','OSS/com.ericsson.oss.containerisation/eric-enmsg-mscmip','OSS/com.ericsson.oss.containerisation/eric-enmsg-msfm','OSS/com.ericsson.oss.containerisation/eric-enmsg-mskpirt','OSS/com.ericsson.oss.containerisation/eric-enmsg-msnetlog','OSS/com.ericsson.oss.containerisation/eric-enmsg-mspm','OSS/com.ericsson.oss.containerisation/eric-enmsg-mspmip','OSS/com.ericsson.oss.containerisation/eric-enmsg-mssnmpcm','OSS/com.ericsson.oss.containerisation/eric-enmsg-mssnmpfm','OSS/com.ericsson.oss.containerisation/eric-enmsg-nb-alarm-irp-agent-corba','OSS/com.ericsson.oss.containerisation/eric-enmsg-nb-fm-snmp','OSS/com.ericsson.oss.containerisation/eric-enmsg-nbi-bnsi-fm','OSS/com.ericsson.oss.containerisation/eric-enmsg-nedo-serv','OSS/com.ericsson.oss.containerisation/eric-enmsg-networkexplorer','OSS/com.ericsson.oss.containerisation/eric-enmsg-node-plugins','OSS/com.ericsson.oss.containerisation/eric-enmsg-nodecli','OSS/com.ericsson.oss.containerisation/eric-enm-omnidaemon','OSS/com.ericsson.oss.containerisation/eric-enmsg-opendj','OSS/com.ericsson.oss.containerisation/eric-enmsg-openidm','OSS/com.ericsson.oss.containerisation/eric-enmsg-pki-ra-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-pmic-router-policy','OSS/com.ericsson.oss.containerisation/eric-enmsg-pmservice','OSS/com.ericsson.oss.containerisation/eric-enmsg-postgres','OSS/com.ericsson.oss.containerisation/eric-enmsg-sa-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-security-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-sentinel','OSS/com.ericsson.oss.containerisation/eric-enm-sfwkdb-schemamgt','OSS/com.ericsson.oss.containerisation/eric-enmsg-shm-core-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-shmservice','OSS/com.ericsson.oss.containerisation/eric-enmsg-smrs-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-solr-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-sps-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-sso','OSS/com.ericsson.oss.containerisation/eric-enmsg-supervisionclient','OSS/com.ericsson.oss.containerisation/eric-enm-troubleshooting-utils','OSS/com.ericsson.oss.containerisation/eric-enmsg-uiservice','OSS/com.ericsson.oss.containerisation/eric-enmsg-visinaming-nb','OSS/com.ericsson.oss.containerisation/eric-enmsg-visinaming-sb','OSS/com.ericsson.oss.containerisation/eric-enmsg-vault-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-web-push-service','OSS/com.ericsson.oss.containerisation/eric-enmsg-elex']

pipeline {
    agent {
        label 'paraslabel'
    }
    stages {
    stage('Update') {
            steps {
                script {
                    deleteDir()
                    cENMImageRepos.each {
                        cloneRepo(it)
                        updateRuleset(it)
                    }
                }
            }
        }
    }
}

def cloneRepo(repo) {
    print repo
    // try {
    
   sh "git clone ${GERRIT_CENTRAL}/${repo}"
    // } catch (err) {
    //     echo 'Error cloning repo &lt;' + repo + '&gt; :' + err.toString()
    //     currentBuild.result = "UNSTABLE"
    // }
}

def updateRuleset(repo) {

workingDir = repo.split('/').last()
    dir(workingDir) {
        sh 'pwd'
        sidecar_exists = sh(returnStatus: true, script: 'grep "sidecar-docker-image-path" ruleset2.0.yaml')   
        ds_exists = sh(returnStatus: true, script: 'grep "docker-ds-image-path" ruleset2.0.yaml') 
		init_exists = sh(returnStatus: true, script: 'grep "docker-init-image-path" ruleset2.0.yaml')
		init2_exists = sh(returnStatus: true, script: 'grep "init-docker-image-path" ruleset2.0.yaml')
		bragent_exists = sh(returnStatus: true, script: 'grep "bragent-docker-image-path" ruleset2.0.yaml')
		vault_exists = sh(returnStatus: true, script: 'grep "vault-3pp-docker-image-path" ruleset2.0.yaml')
		neo4j_exists = sh(returnStatus: true, script: 'grep "neo4j-dps-init-docker-image-path" ruleset2.0.yaml')
		image_exists = sh(returnStatus: true, script: 'grep "docker-image-path" ruleset2.0.yaml')
		command_exists = sh(returnStatus: true, script: 'grep "push-image:" ruleset2.0.yaml')
	println(command_exists)
    if(command_exists != 0){
        echo "not found"	
        if(image_exists == 0 &amp; vault_exists == 0 ){
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml 
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${vault-3pp-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
			
            '''
        }
        else if(image_exists == 0 &amp; sidecar_exists == 0 &amp; neo4j_exists == 0 ){
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml 
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${sidecar-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${neo4j-dps-init-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
							
            '''
        }	
        else if(image_exists == 0 &amp; sidecar_exists == 0 &amp; init2_exists == 0 ){
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml 
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
			    echo '        - docker push ${sidecar-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${init-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
							
            '''
        }		
        else if(image_exists == 0 &amp; ds_exists == 0 &amp; init_exists == 0 ){
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml 
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${docker-ds-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${docker-init-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
							
            '''
        }	
        else if(image_exists == 0 &amp; sidecar_exists == 0 ){
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml 
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${sidecar-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
							
            '''
        }	
        else if(image_exists == 0 &amp; bragent_exists == 0 ){
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml
                echo '        - docker push ${bragent-docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
							
            '''
        }				
        else{
            sh '''
                echo '' &gt;&gt; ruleset2.0.yaml

                echo '  push-image:' &gt;&gt; ruleset2.0.yaml
                echo '    - task: push-docker-image' &gt;&gt; ruleset2.0.yaml
                echo '      cmd:' &gt;&gt; ruleset2.0.yaml 
				echo '        - docker push ${docker-image-path}:${var.version}' &gt;&gt; ruleset2.0.yaml

                git add ruleset2.0.yaml
                git commit -m '[CIP-36351] - Ruleset updates for point fix builds'
                git push origin master
							
            '''
        }	
    }	
}
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>