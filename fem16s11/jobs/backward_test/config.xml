<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Job Type</name>
          <description>Select Install for rollout of cENM.this selection will first teardown your project i.e delete all existing helm chart, pvc and jobs</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Install</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>SLAVE</name>
          <description>The minimum required softwares and its versions needed for Slave are Kubernetes Client Version v1.17.3, Docker client version 17.04.0-ce, Helm version 3.2.0 or higher </description>
          <defaultValue>Cloud-Native-Template-version-002</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 */



def updateIntegrationValues() {
    try {
          filename = "${HOME_DIR}/${INTEGRATION_VALUE_FILE}"
                values = readYaml file: filename
                values.global.registry.url = "armdocker.rnd.ericsson.se"
                values.global.persistentVolumeClaim.storageClass = "${STORAGE_CLASS}"
                values.global.ingress.enmHost = "${ENM_LAUNCHER_HOSTNAME}"
                values.global.enmProperties.COM_INF_LDAP_ROOT_SUFFIX = "${COM_INF_LDAP_ROOT_SUFFIX}"
                values.global.enmProperties.COM_INF_LDAP_ADMIN_CN = "${COM_INF_LDAP_ADMIN_CN}"
                values.global.rwx.storageClass = "${RWX_STORAGE_CLASS}"
                values.global.timezone= "${TIME_ZONE}"
                values.global.enmProperties.host_system_identifier = "${HOST_SYSTEM_IDENTIFIER}"
                values."eric-data-graph-database-nj".persistentVolumeClaim.storageClass = "${STORAGE_CLASS}"
                values."eric-data-graph-database-nj".persistentVolumeClaim.backup.storageClass = "${STORAGE_CLASS}"
                values."eric-data-graph-database-nj".persistentVolumeClaim.logging.storageClass = "${STORAGE_CLASS}"
                if (ENVIRONMENT_TYPE.equals("kaas")){
                     values.global.enmProperties.lb_external_port = "${LB_EXTERNAL_PORT}"
                } else {
                     values.global.vips.fm_vip_address = "${FM_VIP_ADDRESS}"
                     values.global.vips.cm_vip_address = "${CM_VIP_ADDRESS}"
                     values.global.vips.pm_vip_address = "${PM_VIP_ADDRESS}"
                     values.global.vips.amos_vip_address = "${AMOS_VIP_ADDRESS}"
                     values.global.vips.general_scripting_vip_address = "${SCRIPT_VIP_ADDRESS}"
                     values.global.vips.element_manager_vip_address = "${ELEMENT_MANAGER_VIP}"
                     values.global.vips.ui_vip_address = "${UI_VIP_ADDRESS}"
                     values.global.vips.visinamingsb_vip_address = "${CM_VIP_ADDRESS}"
                }

        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
    }
}




pipeline{
    agent {
            node
            {
            label SLAVE
            }
        }
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
        https_proxy = "http://www-proxy.lmera.ericsson.se:8080/"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'master',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage( 'Site Config Properties' ) {
            steps {
                 script{
                         def site_config_properties = readProperties  (file:"Site-Config-File/${environment_name}")
                         env.KUBE_CRED = site_config_properties['KUBE_CRED']
                         env.NAMESPACE = site_config_properties['NAMESPACE']
                         env.RWX_STORAGE_CLASS =site_config_properties['RWX_STORAGE_CLASS']
                         env.STORAGE_CLASS =site_config_properties['STORAGE_CLASS']
                         env.TIME_ZONE=site_config_properties['TIME_ZONE']
                         env.HOST_SYSTEM_IDENTIFIER = site_config_properties['HOST_SYSTEM_IDENTIFIER']
                         env.ENM_LAUNCHER_HOSTNAME=site_config_properties['ENM_LAUNCHER_HOSTNAME']
                         env.EMAIL_LIST=site_config_properties['EMAIL_LIST']
                         env.COM_INF_LDAP_ROOT_SUFFIX= site_config_properties['COM_INF_LDAP_ROOT_SUFFIX']
                         env.COM_INF_LDAP_ADMIN_CN=site_config_properties['COM_INF_LDAP_ADMIN_CN']
                         env.ENVIRONMENT_TYPE=site_config_properties['ENVIRONMENT_TYPE']
                         echo "${ENVIRONMENT_TYPE}"
                          if (ENVIRONMENT_TYPE.equals("kaas")) {
                             env.LB_EXTERNAL_PORT=site_config_properties['LB_EXTERNAL_PORT']
                             env.INTEGRATION_VALUE_FILE="eric-enm-integration-functional-kaas-values-${INTEGRATION_VALUE_VERSION}.yaml"
                         } else if (ENVIRONMENT_TYPE.equals("openstack")){
                                env.INTEGRATION_VALUE_FILE="eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml"
                               env.FM_VIP_ADDRESS = site_config_properties['FM_VIP_ADDRESS']
                               env.CM_VIP_ADDRESS = site_config_properties['CM_VIP_ADDRESS']
                               env.PM_VIP_ADDRESS = site_config_properties['PM_VIP_ADDRESS']
                               env.AMOS_VIP_ADDRESS = site_config_properties['AMOS_VIP_ADDRESS']
                               env.ELEMENT_MANAGER_VIP = site_config_properties['ELEMENT_MANAGER_VIP']
                               env.SCRIPT_VIP_ADDRESS = site_config_properties['SCRIPT_VIP_ADDRESS']
                               env.UI_VIP_ADDRESS = site_config_properties['UI_VIP_ADDRESS']
                               env.VISINAMINGSB_VIP_ADDRESS = site_config_properties['CM_VIP_ADDRESS']
                         } else {
                           echo "Please provide correct Environment Type In site-config file of the Job"
                           exit 1
                         }
                         env.kubeConfig = "${workspace}/.kube/${KUBE_CRED}"
                         env.helm = "docker run --rm -v ${kubeConfig}:/root/.kube/config -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} helm3"
                         env.kubectl = "docker run --rm  -v ${kubeConfig}:/root/.kube/config -v ${WORKSPACE}:${WORKSPACE} --workdir ${WORKSPACE} ${cenm_utilities_docker_image} kubectl"
                      }
              }
        }
         stage('integration value version'){
            steps{
                  script {				     
                      env.url="https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/${INTEGRATION_VALUE_FILE}"
                      check_status = sh (script: "curl -s -o /dev/null -w \"%{http_code}\" ${url}", returnStdout: true ).trim()
                      
                       					  
                            if ( check_status.contains("200") ){
                               sh "wget https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/${INTEGRATION_VALUE_FILE}"	
                             }
                            else {
					            sh "wget https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-integration-values/${INTEGRATION_VALUE_FILE}"	
                      } 
                     echo "Updating Integration values files"
                     updateIntegrationValues()
                 }
            }
        }

    }

}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>