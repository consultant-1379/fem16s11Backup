<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <description/>
          <defaultValue>0.0.0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>pipeline {
    agent { label 'pointfix_test' }
    stages {
        stage('Gathering Information - Step 1') {
            steps {
                script {
                    if ("${PRODUCT_SET}" == "") {
                        echo "Triggered without the PRODUCT_SET. Considering the latest PRODUCT_SET/ISO."
                        get_product_set()
                    } else {
                        echo "Triggered with the PRODUCT_SET: ${PRODUCT_SET}"
                        env.PRODUCT_SET = "${PRODUCT_SET}"
                    }
                }
                echo env.PRODUCT_SET
                get_iso_version()
                echo env.ISO_VERSION
            }
        }
          
       
        stage('Get Sprint Version - Step 5') {
            steps {
                script {
                    get_sprint_version()
                }
            }
        }
    }
}

def get_sprint_version(){
    echo "Running get sprint version REST API"
    env.SPRINT_TAG = sh(script: 'wget -q -O - --no-check-certificate https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudNative/getLinkedENMProductSetVersion/${PRODUCT_SET} | cut -d . -f1,2', returnStdout: true).trim()
    echo "SPRINT_TAG $SPRINT_TAG"
}

def get_product_set() {
    echo "Running product set function"
    env.PRODUCT_SET = sh(script: 'wget -q -O - --no-check-certificate https://ci-portal.seli.wh.rnd.internal.ericsson.com/getLastGoodProductSetVersion/?productSet=ENM', returnStdout: true).trim()
}

def get_iso_version() {
    echo "Running iso version function"
    def iso_version_json = $/eval "wget -q -O - --no-check-certificate 'https://ci-portal.seli.wh.rnd.internal.ericsson.com/getProductSetVersionContents/?productSet=ENM&amp;version=${PRODUCT_SET}&amp;pretty=true' | grep 'ERICenm_CXP9027091' -A4 | grep 'version' | sed -n -e 's/^.*\"version\": //p' | sed 's/\"//g'"/$
    env.ISO_VERSION = sh(script: "${iso_version_json}", returnStdout: true).trim()

    if (env.ISO_VERSION == "") {
        error("Invalid Product Set provided. There is no ENM ISO content for the given Product Set Version.")
    }
}


</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>