<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline stateless-integration - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.eiffel.gic.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_REPO_TOKEN</name>
          <description>Authentication token of the repo</description>
          <defaultValue>AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REQUIREMENTS_FILE</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHART_NAME</name>
          <description>Chart Name of dependency  to be updated</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHART_VERSION</name>
          <description>Chart Version of dependency  to be updated</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>ALLOW_DOWNGRADE</name>
          <description>Allow Downgrade of chart dependency</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: '${ISO_VERSION}',PRODUCT_SET:'${PRODUCT_SET}'])
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = 'enmadm100@ericsson.com'
def failedStage = ''

pipeline {
    agent {
        label 'Docker-POC'
    }
    stages {
       stage ('Clean workspace') {
          steps {
            deleteDir()
         }
       }
        stage('Checkout Cloud-Native eric-enm-stateless-integration Git Repository'){
         steps {
             git branch: 'GE_test_stateless',
                     url: '${GERRIT_MIRROR}/OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration'
             sh '''
                 git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.de.containerisation/test-eric-enm-pre-deploy-integration
             '''
         }
        }
        stage('Get Chart Versions') {
               steps {
                  script{
                   withCredentials([
                      usernamePassword(credentialsId: 'cenmbuild_api_token', usernameVariable: 'JENKINS_USER_NAME', passwordVariable: 'JENKINS_API_TOKEN')]) {
                       def bobwithpublish = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['JENKINS_USER_NAME': env.JENKINS_USER_NAME,
                                      'JENKINS_API_TOKEN': env.JENKINS_API_TOKEN,
                                      'JENKINS_URL': env.JENKINS_URL,
                                      'POINTFIX': "True",
                            ])
                            .toString()
                       sh "${bobwithpublish} get-chart-versions"
                   }
                }
               }
           }
       /*
       stage('Update Charts'){
         steps {
              sh '''
                    while read line;
                    do
                       CHART_NAME=$(echo $line | cut -d"=" -f1); CHART_VERSION=$(echo $line | cut -d"=" -f2); 
                       docker run --init --rm --workdir $(pwd) -v $(pwd):$(pwd) -v /var/run/docker.sock:/var/run/docker.sock armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-int-helm-chart-auto ihc-update -f chart/eric-enm-stateless-integration/ -n $CHART_NAME -v $CHART_VERSION; 
                    done &lt; chart_versions_file
                 '''
         }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
       */
        stage('Lint Helm'){
         steps {
             sh "${bob} lint-helm"
         }
        }
        stage('Update versions in Chart.yaml and values.yaml file'){
            steps{
                echo sh(script: 'env', returnStdout:true)
            //    step ([$class: 'CopyArtifact', projectName: 'sync-build-trigger-pointfix', filter: "*"]);
            //    sh "${bob} swap-latest-versions-with-numbers"
                sh '''
                    if git status | grep 'values.yaml\\|Chart.yaml' &gt; /dev/null; then
                        git commit -m "NO JIRA - Updating Values.yaml and Chart.yaml files with version"
                    fi
                '''
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
        stage('Generate New Version') {
         steps {
             echo "generating new version"
            // sh "${bob} generate-new-version"
          }
          post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
         }
       stage('Build Chart') {
         steps {
             echo "Building helm charts"
        //  sh "${bob} build-helm"
        }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
      }
      /*
     stage('Publish Helm Chart') {
         steps {
               script {
                        def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['HELM_REPO_TOKEN': env.HELM_REPO_TOKEN])
                                .toString()
                        sh "${bobWithHelmToken} helm-push"
                }
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
     }
      stage('Generate INT Parameters') {
         steps {
          sh "${bob} generate-output-parameters"
          archiveArtifacts 'artifact.properties'
       }
       post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
      }
      stage('Tag Cloud-Native eric-enm-stateless-integration Repository') {
            steps {
                wrap([$class: 'BuildUser']) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        'AUTHOR_NAME'        : "${GIT_COMMITTER_NAME}",
                                        'AUTHOR_EMAIL'       : "${GIT_COMMITTER_EMAIL}",
                                        'GIT_COMMITTER_NAME' : "${GIT_COMMITTER_NAME}",
                                        'GIT_COMMITTER_EMAIL': "${GIT_COMMITTER_EMAIL}"
                                ])
                                .toString()
                        sh "${bobWithCommitterInfo} create-git-tag"
                        sh """
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        """
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                always {
                    script {
                        sh "${bob} remove-git-tag"
                    }
                }
            }
      }
      stage('Bump Version') {
          steps {
              script {
                  sh 'hostname'
                  Version = readFile "VERSION_PREFIX"
                  sh 'docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch'
                  newVersion = readFile "VERSION_PREFIX"
                  env.STATELESS_VERSION = newVersion
                  currentBuild.displayName = "${BUILD_NUMBER} - Version - " + Version
                  sh '''
                       git add VERSION_PREFIX
                       git commit -m "Version $STATELESS_VERSION"
                       git push origin HEAD:${BRANCH}
                   '''
               }
           }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
        stage('Generate Metadata Parameters') {
            steps {
              script{
                sh "${bob} generate-int-metadata-parameters"
                archiveArtifacts 'int-metadata-artifact.json'
                currentBuild.displayName = "PRODUCT SET ON: ${PRODUCT_SET}"
               } 
            }
        }
        */
   }
   post {
        failure {
            mail to: 'vinay.kumar.chapram.ext@ericsson.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>