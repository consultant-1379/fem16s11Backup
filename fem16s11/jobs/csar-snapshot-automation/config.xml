<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MONITORING_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STATELESS_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INFRA_CHART_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILD_TYPE</name>
          <description>automatic picks the charts and values from internal area. Whearas manual picks the charts and values from chart directory of csar repo.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>automatic</string>
              <string>manual</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INTEGRATION_VALUE_FILE</name>
          <description>This parameter will work for the automatic BUILD_TYPE and whichever value is chosen that file will be written as production values and further process will continue.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-extra-large-production-values</string>
              <string>eric-enm-integration-kaas-core-values</string>
              <string>eric-enm-integration-openstack-core-values</string>
              <string>eric-enm-integration-functional-kaas-values</string>
              <string>eric-enm-integration-functional-test-values</string>
              <string>eric-enm-integration-production-values</string>
              <string>eric-enm-single-instance-production-integration-values</string>
              <string>eric-enm-multi-instance-functional-integration-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Add the sprint tag for the product set version selected.</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SLAVE</name>
          <description>Please provide slave details
</description>
          <defaultValue>Jenkins_CSAR_Slave_4Node_Thunderbird_4</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>snapshot_artifacts</name>
          <description>example: eric-enm-stateless-integration::https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm//eric-enm-stateless-integration/eric-enm-stateless-integration-1.19.0-24-h6d746e6.tgz</description>
          <defaultValue>eric-enm-stateless-integration::https://arm.epk.ericsson.se/artifactory/proj-enm-kgb-dev-helm//eric-enm-stateless-integration/eric-enm-stateless-integration-1.19.0-24-h6d746e6.tgz</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GERRIT_REVIEW_URL</name>
          <description>e.g. https://gerrit.ericsson.se/#/c/3298909/</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = 'armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.0.28'
def metadataImage = 'armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest'
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()
def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''

def check_version_a_newer_than_version_b(latest_productset_version,old_productset_version) {
    if(latest_productset_version &gt; old_productset_version){
        return true
    } else{
        return false
    }
}

def overrideIntegrationValues(){
    try {
        filename = "scripts/${integration_values}"
        values = readYaml file: filename

        if(values."eric-enm-version-configmap".containsKey("productVersion"))
            values."eric-enm-version-configmap".productVersion = "ENM ${SPRINT_TAG} (CSAR Version: ${VERSION}) ${ENM_RSTATE_NUMBER}"

        if(values."eric-enm-version-configmap".containsKey("packageVersion"))
            values."eric-enm-version-configmap".packageVersion = "CXP 904 1414 ${VERSION} ${RSTATE}"

        if(values."eric-enm-version-configmap".containsKey("productionDate"))
            values."eric-enm-version-configmap".productionDate = "${VNF_RELEASE_DATE_TIME}"

        if(values."eric-enm-version-configmap".containsKey("productSet"))
            values."eric-enm-version-configmap".productSet = "${PRODUCT_SET}"

        if (values."eric-data-search-engine-curator".containsKey("imageCredentials")){
            values."eric-data-search-engine-curator".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
            values."eric-data-search-engine-curator".imageCredentials.logshipper.repoPath = "proj-enm/proj-adp-log-released"
        }
        else
            values."eric-data-search-engine-curator".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released","logshipper":["repoPath":"proj-enm/proj-adp-log-released"]]

        if (values."eric-data-search-engine".containsKey("imageCredentials")) {
            values."eric-data-search-engine".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
            values."eric-data-search-engine".imageCredentials.logshipper.repoPath = "proj-enm/proj-adp-log-released"
        }
        else {
            values."eric-data-search-engine".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released","logshipper":["repoPath":"proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-data-eshistory-search-engine".containsKey("imageCredentials"))
            values."eric-data-eshistory-search-engine".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
        else
            values."eric-data-eshistory-search-engine".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released"]

        if (values."eric-data-graph-database-nj".containsKey("imageCredentials"))
            values."eric-data-graph-database-nj".imageCredentials.repoPath = "proj-enm/aia_releases"
        else
            values."eric-data-graph-database-nj".imageCredentials = ["repoPath": "proj-enm/aia_releases"]

        if (values."eric-data-document-database-pg".containsKey("imageCredentials")) {
            values."eric-data-document-database-pg".imageCredentials.repoPath = "proj-enm/proj-document-database-pg-release/data"
            values."eric-data-document-database-pg".imageCredentials.logshipper.repoPath = ["proj-enm/proj-adp-log-released"]
        }
        else {
            values."eric-data-document-database-pg".imageCredentials = ["repoPath": "proj-enm/proj-document-database-pg-release/data","logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-ctrl-bro".containsKey("imageCredentials"))
            values."eric-ctrl-bro".imageCredentials.repoPath = "proj-enm/proj-adp-eric-ctrl-bro-drop"
        else
            values."eric-ctrl-bro".imageCredentials = ["repoPath": "proj-enm/proj-adp-eric-ctrl-bro-drop"]

        if (values."eric-pm-server".containsKey("imageCredentials")) {
            values."eric-pm-server".imageCredentials.repoPath = "proj-enm/proj-common-assets-cd/monitoring/pm"
            values."eric-pm-server".imageCredentials.logshipper.repoPath = "proj-enm/proj-adp-log-drop"
        }
        else {
            values."eric-pm-server".imageCredentials = ["repoPath": "proj-enm/proj-common-assets-cd/monitoring/pm","logshipper":["repoPath": "proj-enm/proj-adp-log-drop"]]
        }

        if (values."eric-pm-alert-manager".containsKey("imageCredentials"))
            values."eric-pm-alert-manager".imageCredentials.repoPath = "proj-enm/proj-adp-pm-alert-manager-drop"
        else
            values."eric-pm-alert-manager".imageCredentials = ["repoPath": "proj-enm/proj-adp-pm-alert-manager-drop"]

        if (values."eric-pm-node-exporter".containsKey("imageCredentials"))
            values."eric-pm-node-exporter".imageCredentials.repoPath = "proj-enm/proj_kds/erikube"
        else
            values."eric-pm-node-exporter".imageCredentials = ["repoPath": "proj-enm/proj_kds/erikube"]

        if (values."eric-enm-int-log-transformer"."eric-log-transformer".containsKey("imageCredentials")) {
            values."eric-enm-int-log-transformer"."eric-log-transformer".imageCredentials.repoPath = "proj-enm/proj-adp-log-released"
            values."eric-enm-int-log-transformer"."eric-log-transformer".imageCredentials.logshipper.repoPath = "proj-enm/proj-adp-log-released/"
        }
        else {
            values."eric-enm-int-log-transformer"."eric-log-transformer".imageCredentials = ["repoPath": "proj-enm/proj-adp-log-released","logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-net-ingress-l4".containsKey("imageCredentials")) {
           values."eric-net-ingress-l4".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
           values."eric-net-ingress-l4".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-oss-ingress-controller-nx".containsKey("imageCredentials")) {
            values."eric-oss-ingress-controller-nx".imageCredentials.repoPath = "proj-enm/proj-eric-oss-ingress-ctr-nx-drop"
            values."eric-oss-ingress-controller-nx".imageCredentials.logshipper.repoPath  = "proj-enm/proj-adp-log-released/"
        } else {
            values."eric-oss-ingress-controller-nx".imageCredentials = ["repoPath": "proj-enm/proj-eric-oss-ingress-ctr-nx-drop","logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }
        if (values."eric-enm-kvstore-hc".containsKey("imageCredentials")) {
            values."eric-enm-kvstore-hc".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
            values."eric-enm-kvstore-hc".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-pm-alert-manager".containsKey("imageCredentials")) {
            values."eric-pm-alert-manager".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
            values."eric-pm-alert-manager".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-enm-fm-alert-parser".containsKey("imageCredentials")) {
            values."eric-enm-fm-alert-parser".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
            values."eric-enm-fm-alert-parser".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }
        if (values."eric-cnom-server".containsKey("imageCredentials"))
            values."eric-cnom-server".imageCredentials.repoPath = "proj-enm/proj-pc-rs-released"
        else
            values."eric-cnom-server".imageCredentials = ["repoPath": "proj-enm/proj-pc-rs-released"]

        if (values."eric-cnom-server"."imageCredentials".containsKey("registry"))
            values."eric-cnom-server"."imageCredentials".registry.url = ""
        else
            values."eric-cnom-server"."imageCredentials".registry = ["url": ""]

        if (values."eric-cnom-document-database-mg".containsKey("imageCredentials"))
            values."eric-cnom-document-database-mg".imageCredentials.repoPath = "proj-enm/proj-pc-released"
        else
            values."eric-cnom-document-database-mg".imageCredentials = ["repoPath": "proj-enm/proj-pc-released"]

        if (values."eric-cnom-document-database-mg"."imageCredentials".containsKey("registry"))
            values."eric-cnom-document-database-mg"."imageCredentials".registry.url = ""
        else
            values."eric-cnom-document-database-mg"."imageCredentials".registry = ["url": ""]

        if (values."eric-enmsg-opendj".containsKey("imageCredentials")) {
            values."eric-enmsg-opendj".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
            values."eric-enmsg-opendj".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-enm-rwxpvc".containsKey("imageCredentials")) {
            values."eric-enm-rwxpvc".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
            values."eric-enm-rwxpvc".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        if (values."eric-ctrl-brocli".containsKey("imageCredentials")) {
            values."eric-ctrl-brocli".imageCredentials.logshipper = ["repoPath": "proj-enm/proj-adp-log-released"]
        } else {
            values."eric-ctrl-brocli".imageCredentials = ["logshipper":["repoPath": "proj-enm/proj-adp-log-released"]]
        }

        sh "rm -f ${filename}"
        writeYaml file: filename, data: values
    } catch( err ) {
        echo "$err"
        error "$err"
    }
}

pipeline {
    agent {
            node
            {
            label SLAVE
            }
        }
    environment{
        repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        CSAR_PACKAGE_NAME = "enm-installation-package"
	    OPENIDM = "eric-enm-openidm-change-password:latest"
		PASSKEY =  "eric-enm-securestorage-regen-passkey"
        OPENIDM_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
		PASSKEY_IMAGE_PATH = "armdocker.rnd.ericsson.se/proj-enm"
        PACKAGE_TYPE="csar"
        GERRIT_REPO = "OSS/com.ericsson.oss.containerisation/eric-enm-csar-package"
        GERRIT_CREDENTIALS = credentials('cenmbuild_gerrit_api_token')
    }
    stages {
        stage ('Clean workspace') {
          steps {
                script {
                          sh "docker image prune -fa"
               }
            deleteDir()
         }
        }
        stage('Checkout Cloud-Native CSAR Git Repository') {
            steps {
                script {
                    if (GERRIT_REVIEW_URL) {
                        env.GERRIT_REVIEW = sh(script: "echo ${GERRIT_REVIEW_URL} | awk -F'https://gerrit.ericsson.se/#/c/' '{ print \$2 }' | awk -F'/' '{ print \$1 }' | tr -d '[[:space:]]'", returnStdout: true)
                        withCredentials([usernamePassword(credentialsId: 'cenmbuild_gerrit_api_token', usernameVariable: 'CENMBUILD', passwordVariable: 'CENMBUILD_GERRIT_TOKEN')]) {
                            env.GERRIT_REFSPEC = sh(script: "curl -s -H \"Accept: application/json\" --user \${CENMBUILD}:\${CENMBUILD_GERRIT_TOKEN} 'https://gerrit.ericsson.se/a/changes/${GERRIT_REVIEW}/?o=CURRENT_REVISION' | grep -o -P '(?&lt;=\"ref\":\").*(?=\",\"fetch)' | tr -d '[[:space:]]'", returnStdout: true)
                         sh("git fetch --tags ${GERRIT_REFSPEC}")
						 sh("git fetch --tags https://${GERRIT_REPO}")
                        }
                        checkout changelog: true, \
                        scm: [$class: 'GitSCM', \
                        branches: [[name: "$GERRIT_REFSPEC"]], \
                        doGenerateSubmoduleConfigurations: false, \
                        extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]], \
                        submoduleCfg: [], \
                        userRemoteConfigs: [[refspec: "${GERRIT_REFSPEC}", \
                        url: "${GERRIT_MIRROR}/${GERRIT_REPO}"]]]
                    } else {
                        println "No GERRIT_REVIEW, Cloning Master..."
                        git changelog: true, poll: false, url: "${GERRIT_MIRROR}/${GERRIT_REPO}"
						
                    }
                }
            }
        }
        stage( 'Pre Configurations' ) {
            steps {
                 script{
                        sh 'mkdir -p ${PWD}/charts'
                        sh 'cp settings.xml ${HOME}/.m2/'
                        env.VNF_RELEASE_DATE_TIME = sh(script: "date +'%FT%T%:z'", returnStdout: true).trim()
                        echo "${VNF_RELEASE_DATE_TIME}"
                        env.ENM_RSTATE_NUMBER = sh(script: 'wget -q -O - --no-check-certificate "https://ci-portal.seli.wh.rnd.internal.ericsson.com/getAOMRstate/?product=ENM&amp;drop=${SPRINT_TAG}"', returnStdout: true).trim()
                        echo "${ENM_RSTATE_NUMBER}"
                 }
            }
        }
	    stage('Get integration charts'){
            steps {
                script {
                   sh 'echo "drop=${SPRINT_TAG}" '
                   echo "Extracting the jq software"
                   sh "tar -xvf Software/jq-1.0.1.tar ; chmod +x ./jq"
                   get_cn_build_version_info()
                   download_charts_ci_internal()
				   remove_tgz_with_artifacts()
                 }
            }
        }
        stage('Generate new version') {
            steps {
            sh "${bob} generate-new-version"
                script {
                    env.VERSION = sh(script: "cat .bob/var.version", returnStdout:true).trim()
                    echo "${VERSION}"
                    env.RSTATE = sh(script: "cat .bob/var.rstate", returnStdout:true).trim()
                    echo "${RSTATE}"
                    env.VNF_PACKAGE_VERSION = sh(script: "echo CXP9041414_$VERSION", returnStdout:true).trim()
                    echo "$VNF_PACKAGE_VERSION"					
                }
            }
        }
        stage('Integration value version'){
            steps{
                script {
                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
                     sh 'curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml'
                     remove_yaml_with_artifacts()
					 
                      }
                }
        }
        stage('Package backup-restore-cli image') {
            steps {
                script {
                    sh 'docker pull ${OPENIDM_IMAGE_PATH}/${OPENIDM}'
					sh 'docker pull ${PASSKEY_IMAGE_PATH}/${PASSKEY}'
                    sh 'docker tag ${OPENIDM_IMAGE_PATH}/${OPENIDM} ${OPENIDM}'
					sh 'docker tag ${PASSKEY_IMAGE_PATH}/${OPENIDM} ${PASSKEY}'
                    sh 'docker save ${OPENIDM} -o scripts/eric-enm-openidm-change-password-docker.tar'
					sh 'docker save ${PASSKEY} -o scripts/eric-enm-securestorage-regen-passkey-docker.tar'
                }
            }
            post {
                always {
                    sh 'docker image remove ${OPENIDM}'
					sh 'docker image remove ${PASSKEY}'
                    sh 'docker image remove ${OPENIDM_IMAGE_PATH}/${OPENIDM}'
					sh 'docker image remove ${PASSKEY_IMAGE_PATH}/${PASSKEY}'
                }
            }
        }

	stage('Update manifest details') {
            steps {
                script {
                    sh "sed -i -e '/^vnf_package_version:/s/.*/vnf_package_version: $VNF_PACKAGE_VERSION/' -e '/^vnf_release_date_time:/s/.*/vnf_release_date_time: $VNF_RELEASE_DATE_TIME/' manifest/enm_descriptor.mf"
                    sh("cat manifest/enm_descriptor.mf")
                }
            }
        }
        stage('Update VNFD details') {
            steps {
                script {
                    sh "mkdir -p vnfd_updated"
                    sh "cp vnfd/enm_descriptor.yaml vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;VERSION&gt;&gt;/$VERSION/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;DESCRIPTOR_ID&gt;&gt;/${UUID.randomUUID().toString()}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;PRODUCT_SET&gt;&gt;/${PRODUCT_SET}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;bro_chart_version&gt;&gt;/${bro_chart_version}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;pre_deploy_chart_version&gt;&gt;/${pre_deploy_chart_version}/g' vnfd_updated/enm_descriptor.yaml"
                    if("${PRODUCT_SET}" &gt; "21.03.57"){
                        sh "sed -i 's/&lt;&lt;monitoring_chart_version&gt;&gt;/${monitoring_chart_version}/g' vnfd_updated/enm_descriptor.yaml"
                    }
                    sh "sed -i 's/&lt;&lt;infra_chart_version&gt;&gt;/${infra_chart_version}/g' vnfd_updated/enm_descriptor.yaml"
                    sh "sed -i 's/&lt;&lt;stateless_chart_version&gt;&gt;/${stateless_chart_version}/g' vnfd_updated/enm_descriptor.yaml"
                }
            }
        }
        stage('Build CSAR Package') {
            steps {
                script {
                        def AMPackageWithCsar = new AMPackageCommand()
                                .AMPackageImage(defaultAMPackageImage)
                                .needDockerSocket(true)
                                .envVars(['ENM_INSTALLATION_CHART_VERSION': env.infra_chart_version,
                                          'INTEGRATION_VALUE_VERSION': env.INTEGRATION_VALUE_VERSION,
                                ])
                                .toString()
                        sh "${AMPackageWithCsar} generate -hd charts/ --name ${CSAR_PACKAGE_NAME}-${env.VERSION} -sc scripts --set global.restore.state=ongoing -mf manifest/enm_descriptor.mf --history history/ChangeLog.txt --vnfd vnfd_updated/enm_descriptor.yaml --definitions definitions/etsi_nfv_sol001_vnfd_2_5_1_types.yaml"
                }
            }
        }
        stage('Generate CSAR Parameters') {
            steps {
                script {
                            sh 'echo "CSAR_PACKAGE_VERSION=${VERSION}" &gt; artifact.properties'
                            sh 'echo "bro_chart_version=${bro_chart_version}" &gt;&gt; artifact.properties'
                            sh 'echo "PRE_DEPLOY_VERSION=${pre_deploy_chart_version}" &gt;&gt; artifact.properties'
                            if("${}" &gt; "21.03.57"){
                                 sh 'echo "monitoring_chart_version=${monitoring_chart_version}" &gt;&gt; artifact.properties'
                            }
                            sh 'echo "infra_chart_version=${infra_chart_version}" &gt;&gt; artifact.properties'
                            sh 'echo "stateless_chart_version=${stateless_chart_version}" &gt;&gt; artifact.properties'
                            sh 'echo "INTEGRATION_VALUE_VERSION=${INTEGRATION_VALUE_VERSION}" &gt;&gt; artifact.properties'
                            archiveArtifacts 'artifact.properties'
                }
            }
        }
    }
    post {
        success {
              script {
	              sh 'echo "Testing success"'
            }
        }
    }
}

def remove_yaml_with_artifacts(){
     try{
        snapshot_string="${snapshot_artifacts}"
     }
     catch(Exception ex){
        snapshot_string=""
     }

     if(snapshot_string != ""){
          echo "${snapshot_string}"
          def snapshot_artifacts_list=snapshot_string.split("@@")
          for (item in snapshot_artifacts_list){
                 println(item)
                 def integration_value_file_name=item.split("::")[0]
                 println(integration_value_file_name)
                 def values_file_URL=item.split("::")[1]
                 println(values_file_URL)
                 if ("${integration_value_file_name}" == "eric-enm-integration-functional-kaas-values"){
		     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
                     env.integration_value_version=version
	             sh "rm -rf  scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-functional-test-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-production-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
			 
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-kaas-core-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
                 if ("${integration_value_file_name}" == "eric-enm-integration-openstack-core-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
                 }
	         if ("${integration_value_file_name}" == "eric-enm-single-instance-production-integration-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
		 }
		 if ("${integration_value_file_name}" == "eric-enm-multi-instance-functional-integration-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
		 }
		 if ("${integration_value_file_name}" == "eric-enm-integration-extra-large-production-values"){
                     def version=values_file_URL.split("-values-")[1].split(".yaml")[0]
                     println(version)
		     env.integration_value_version=version
		     sh "rm -rf scripts/${integration_value_file_name}-*"
                     sh "curl -4 ${values_file_URL} -o scripts/${integration_value_file_name}-${version}.yaml"
		 }
			                
              }
     }
     else{
        echo "no snapshot string is provided"
     }
}

def remove_tgz_with_artifacts(){
     try{
        snapshot_string="${snapshot_artifacts}"
     }
     catch(Exception ex){
        snapshot_string=""
     }

     if(snapshot_string != ""){
          echo "${snapshot_string}"
          def snapshot_artifacts_list=snapshot_string.split("@@")
          for (item in snapshot_artifacts_list){
                 println(item)
                 def chart_name=item.split("::")[0]
                 println(chart_name)
                 def chart_URL=item.split("::")[1]
                 println(chart_URL)
                 version=chart_URL.split("-integration-")[1].split(".tgz")[0]
                 println(version)
                 if ("${chart_name}" == "eric-enm-bro-integration"){
                     env.bro_chart_version=version
		     env.bro_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-monitoring-integration"){
                     env.monitoring_chart_version=version
		     env.monitoring_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-pre-deploy-integration"){
                     env.pre_deploy_chart_version=version
		     env.pre_deploy_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-infra-integration"){
                     env.infra_chart_version=version
		     env.infra_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 }
                 if ("${chart_name}" == "eric-enm-stateless-integration"){
                     env.stateless_chart_version=version
		     env.stateless_chart_version=version
		     sh "rm -rf charts/${chart_name}-*"
                     sh "curl ${chart_URL} -o charts/${chart_name}-${version}.tgz"
                 } 
              }
     }
     else{
        echo "no snapshot string is provided"
     }             
}

def get_cn_build_version_info(){
       echo "Product Set Version: ${PRODUCT_SET}"
       sh "curl -4 --location --request GET 'https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudnative/getCloudNativeProductSetContent/${SPRINT_TAG}/${PRODUCT_SET}/'&gt;cn_confidence_level_response.json"
            env.infra_chart_version= sh (script : "./jq '.[1] .integration_charts_data|.[] | select(.chart_name==\"eric-enm-infra-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.infra_chart_version==''){
               error("Invalid Infra Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.bro_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-bro-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.bro_chart_version==''){
               error("Invalid Bro Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.pre_deploy_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-pre-deploy-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.pre_deploy_chart_version==''){
               error("Invalid Predeploy Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            env.stateless_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-stateless-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
            if(env.stateless_chart_version==''){
               error("Invalid Stateless Integration chart provided. There is no Cloud native content for the given Product Set Version.")
            }
            if (check_version_a_newer_than_version_b("${PRODUCT_SET}","21.03.57")){
                env.monitoring_chart_version= sh (script : "./jq '.[1].integration_charts_data|.[]|select(.chart_name==\"eric-enm-monitoring-integration\")|.chart_version' cn_confidence_level_response.json|sed 's/\"//g'", returnStdout: true).trim()
                if(env.monitoring_chart_version==''){
                    error("Invalid Monitoring Integration chart provided. There is no Cloud native content for the given Product Set Version.")
                    }
                  }
            else {
                env.monitoring_chart_version = ''
             }
            env.integration_value_version= sh (script : "./jq -r '.[2].integration_values_file_data[0].values_file_version' cn_confidence_level_response.json", returnStdout: true).trim()
            if(env.integration_value_version==''){
               error("Invalid Integration values provided. There is no Cloud native content for the given Product Set Version.")
            }
            println("bro integration chart version":env.bro_chart_version)
            println("pre deploy integration chart version":env.pre_deploy_chart_version)
            println("infra integration chart version":env.infra_chart_version)
            println("stateless integration chart version":env.stateless_chart_version)
            println("integration values version":env.integration_value_version)
			println ("monitoring integration chart version":env.monitoring_chart_version)
            env.INTEGRATION_VALUE_VERSION= integration_value_version
}

def download_charts_ci_internal(){
        try{
          if(env.bro_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${bro_chart_version}.tgz -o charts/eric-enm-bro-integration-${bro_chart_version}.tgz"
          }
          if (check_version_a_newer_than_version_b("${PRODUCT_SET}","21.03.57")){
              if(env.monitoring_chart_version != ''){
                   sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${monitoring_chart_version}.tgz -o charts/eric-enm-monitoring-integration-${monitoring_chart_version}.tgz"
              }
          }
          if(env.pre_deploy_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${pre_deploy_chart_version}.tgz -o charts/eric-enm-pre-deploy-integration-${pre_deploy_chart_version}.tgz"
          }
          if(env.infra_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${infra_chart_version}.tgz -o charts/eric-enm-infra-integration-${infra_chart_version}.tgz"
          }
          if(env.stateless_chart_version != ''){
               sh "curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${stateless_chart_version}.tgz -o charts/eric-enm-stateless-integration-${stateless_chart_version}.tgz"
          }
     }catch( err ) {
        echo "$err"
        sh "exit 1"
      }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class AMPackageCommand {
    def AMPackageImage = 'AMPackage.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${AMPackageImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:1.5.2-0'
    def envVars = [:]
    def needDockerSocket = false
    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')
        def cmd = """\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' \$group; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>