<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Please dont use this job without informing team Misty.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>40</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INTEGRATION_VALUE_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>SLAVE</name>
          <description>Jenkins CSAR slave options</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Transformation_CSAR_Slave_4Node</string>
              <string>Cloud-Native</string>
              <string>enm_cn_ci_openstack-16102020-10</string>
              <string>Jenkins_CN_Design_Totoro_13</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_3</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_21</string>
              <string>Jenkins_cENM_Design_Teams_TAF1_Slave_4Node_8</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_28</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_4</string>
              <string>Jenkins_CN_Design_Totoro_18</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_31</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_39</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_6</string>
              <string>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_7</string>
              <string>Jenkins_Trojan_CSAR_Slave_11</string>
              <string>Jenkins_CSAR_Slave_4Node_Thunderbird_6</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MONITORING_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRO_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRE_DEPLOY_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BUILD_TYPE</name>
          <description>automatic picks the charts and values from internal area. Whearas manual picks the charts and values from chart directory of csar repo.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>automatic</string>
              <string>manual</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INTEGRATION_VALUE_FILE</name>
          <description>This parameter will work for the automatic BUILD_TYPE and whichever value is chosen that file will be written as production values and further process will continue.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>eric-enm-integration-production-values</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Add the sprint tag for the product set version selected.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>INFRA_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>STATELESS_CHART_VERSION</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultAMPackageImage = &apos;armdocker.rnd.ericsson.se/proj-am/releases/eric-am-package-manager:2.62.0-1&apos;
def metadataImage = &apos;armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest&apos;
def AMPackage = new AMPackageCommand()
        .AMPackageImage(defaultAMPackageImage)
        .needDockerSocket(true)
        .toString()
def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = &apos;lciadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;lciadm100@ericsson.com&apos;
def failedStage = &apos;&apos;

def overrideIntegrationValues(){
    try {
        filename = &quot;scripts/${integration_values}&quot;
        values = readYaml file: filename

        bro = &quot;eric-enm-bro-integration&quot;
        sh &quot;tar -zxf charts/${bro}-${BRO_CHART_VERSION}.tgz&quot;
        pre_deploy = &quot;eric-enm-pre-deploy-integration&quot;
        sh &quot;tar -zxf charts/${pre_deploy}-${PRE_DEPLOY_CHART_VERSION}.tgz&quot;
        infra = &quot;eric-enm-infra-integration&quot;
        sh &quot;tar -zxf charts/${infra}-${INFRA_CHART_VERSION}.tgz&quot;
        stateless = &quot;eric-enm-stateless-integration&quot;
        sh &quot;tar -zxf charts/${stateless}-${STATELESS_CHART_VERSION}.tgz&quot;
        monitoring = &quot;eric-enm-monitoring-integration&quot;
        sh &quot;tar -zxf charts/${monitoring}-${MONITORING_CHART_VERSION}.tgz&quot;

        if(values.&quot;eric-enm-version-configmap&quot;.containsKey(&quot;productVersion&quot;))
            values.&quot;eric-enm-version-configmap&quot;.productVersion = &quot;ENM ${SPRINT_TAG} (CSAR Version: ${VERSION}) ${ENM_RSTATE_NUMBER}&quot;

        if(values.&quot;eric-enm-version-configmap&quot;.containsKey(&quot;packageVersion&quot;))
            values.&quot;eric-enm-version-configmap&quot;.packageVersion = &quot;CXP 904 1414 ${VERSION} ${RSTATE}&quot;

        if(values.&quot;eric-enm-version-configmap&quot;.containsKey(&quot;productionDate&quot;))
            values.&quot;eric-enm-version-configmap&quot;.productionDate = &quot;${VNF_RELEASE_DATE_TIME}&quot;

        if(values.&quot;eric-enm-version-configmap&quot;.containsKey(&quot;productSet&quot;))
            values.&quot;eric-enm-version-configmap&quot;.productSet = &quot;${PRODUCT_SET}&quot;

        eric_log_shipper_values = readYaml file: &quot;${infra}/charts/eric-log-shipper/eric-product-info.yaml&quot;
        values.&quot;eric-log-shipper&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}&quot;]

        eric_data_search_engine_curator_values = readYaml file: &quot;${infra}/charts/eric-data-search-engine-curator/eric-product-info.yaml&quot;
        values.&quot;eric-data-search-engine-curator&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_search_engine_curator_values.images.curator.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_search_engine_curator_values.images.logshipper.repoPath}&quot;]]

        eric_data_search_engine_values = readYaml file: &quot;${infra}/charts/eric-data-search-engine/eric-product-info.yaml&quot;
        values.&quot;eric-data-search-engine&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_search_engine_values.images.searchengine.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_search_engine_values.images.logshipper.repoPath}&quot;]]

        eric_data_eshistory_search_engine_values = readYaml file: &quot;${infra}/charts/eric-data-search-engine/eric-product-info.yaml&quot;
        values.&quot;eric-data-eshistory-search-engine&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_eshistory_search_engine_values.images.searchengine.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_eshistory_search_engine_values.images.logshipper.repoPath}&quot;]]

        eric_data_graph_database_nj_values = readYaml file: &quot;${infra}/charts/eric-data-graph-database-nj/values.yaml&quot;
        values.&quot;eric-data-graph-database-nj&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_graph_database_nj_values.imageCredentials.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/proj-adp-log-released&quot;]]

        eric_data_document_database_pg_values = readYaml file: &quot;${infra}/charts/eric-enm-int-document-database-pg/charts/eric-data-document-database-pg/eric-product-info.yaml&quot;
        values.&quot;eric-enm-int-document-database-pg&quot;.&quot;eric-data-document-database-pg&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_document_database_pg_values.images.pg13.repoPath}&quot;]
        values.&quot;eric-enm-int-document-database-pg&quot;.&quot;eric-data-document-database-pg&quot;.global = [&quot;imageCredentials&quot;: [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}&quot;]]]
        eric_enm_int_document_database_pg_values = readYaml file: &quot;${infra}/charts/eric-enm-int-document-database-pg/eric-product-info.yaml&quot;
        values.&quot;eric-enm-int-document-database-pg&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_enm_int_document_database_pg_values.images.bra.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_enm_int_document_database_pg_values.images.logshipper.repoPath}&quot;]]

        eric_ctrl_bro_values = readYaml file: &quot;${bro}/charts/eric-ctrl-bro/values.yaml&quot;
        values.&quot;eric-ctrl-bro&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_ctrl_bro_values.imageCredentials.repoPath}&quot;]

        eric_pm_server_values = readYaml file: &quot;${monitoring}/charts/eric-pm-server/eric-product-info.yaml&quot;
        values.&quot;eric-pm-server&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_pm_server_values.images.&apos;eric-pm-server&apos;.repoPath}&quot;]
        values.&quot;eric-pm-server&quot;.global = [&quot;imageCredentials&quot;: [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}&quot;]]]

        eric_pm_alert_manager_values = readYaml file: &quot;${monitoring}/charts/eric-pm-alert-manager/eric-product-info.yaml&quot;
        values.&quot;eric-pm-alert-manager&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_pm_alert_manager_values.images.alertmanager.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_pm_alert_manager_values.images.logshipper.repoPath}&quot;]]

        eric_pm_node_exporter_values = readYaml file: &quot;${monitoring}/charts/eric-pm-node-exporter/values.yaml&quot;
        values.&quot;eric-pm-node-exporter&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_pm_node_exporter_values.imageCredentials.repoPath}&quot;]

        eric_enm_int_log_transformer_values = readYaml file: &quot;${infra}/charts/eric-enm-int-log-transformer/charts/eric-log-transformer/eric-product-info.yaml&quot;
        values.&quot;eric-enm-int-log-transformer&quot;.&quot;eric-log-transformer&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_enm_int_log_transformer_values.images.logtransformer.repoPath}&quot;]
        values.&quot;eric-enm-int-log-transformer&quot;.&quot;eric-log-transformer&quot;.global = [&quot;imageCredentials&quot;: [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}&quot;]]]
        
        eric_net_ingress_l4_values = readYaml file: &quot;${infra}/charts/eric-net-ingress-l4/values.yaml&quot;
        values.&quot;eric-net-ingress-l4&quot;.global = [&quot;imageCredentials&quot;: [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_net_ingress_l4_values.imageCredentials.logshipper.repoPath}&quot;]]]

        eric_data_key_value_database_rd_values = readYaml file: &quot;${stateless}/charts/eric-enmsg-fmx-integration/charts/eric-data-key-value-database-rd/eric-product-info.yaml&quot;
        values.&quot;eric-enmsg-fmx-integration&quot;.&quot;eric-data-key-value-database-rd&quot;.imageCredentials = [&quot;kvdbOperator&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_key_value_database_rd_values.images.kvdbOperator.repoPath}&quot;], &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/proj-adp-log-released&quot;]]

        values.&quot;eric-enmsg-fmx-integration&quot;.&quot;eric-data-key-value-database-rd&quot;.&quot;imageCredentials&quot;.&quot;kvdbOperator&quot;.registry = [&quot;url&quot;: &quot;&quot;]

        eric_data_key_value_database_rd_operand_values = readYaml file: &quot;${stateless}/charts/eric-enmsg-fmx-integration/charts/eric-data-key-value-database-rd-operand/values.yaml&quot;
        values.&quot;eric-enmsg-fmx-integration&quot;.&quot;eric-data-key-value-database-rd-operand&quot;.imageCredentials = [&quot;node&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_key_value_database_rd_operand_values.imageCredentials.node.repoPath}&quot;, &quot;registry&quot;: [&quot;url&quot;: &quot;&quot;]], &quot;metricsExporter&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_data_key_value_database_rd_operand_values.imageCredentials.metricsExporter.repoPath}&quot;, &quot;registry&quot;: [&quot;url&quot;: &quot;&quot;]], &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/proj-adp-log-released&quot;]]

        eric_eo_evnfm_mb_values = readYaml file: &quot;${stateless}/charts/eric-enmsg-fmx-integration/charts/eric-eo-evnfm-mb/eric-product-info.yaml&quot;
        values.&quot;eric-enmsg-fmx-integration&quot;.&quot;eric-eo-evnfm-mb&quot;.imageCredentials = [&quot;evnfmMB&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_eo_evnfm_mb_values.images.evnfmMB.repoPath}&quot;], &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_eo_evnfm_mb_values.images.logshipper.repoPath}&quot;], &quot;volumePermissions&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_eo_evnfm_mb_values.images.volumePermissions.repoPath}&quot;]]

        eric_oss_ingress_controller_nx_values = readYaml file: &quot;${pre_deploy}/charts/eric-oss-ingress-controller-nx/eric-product-info.yaml&quot;
        values.&quot;eric-oss-ingress-controller-nx&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_oss_ingress_controller_nx_values.images.ingresscontroller.repoPath}&quot;, &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_oss_ingress_controller_nx_values.images.logshipper.repoPath}&quot;]]

        eric_enm_kvstore_hc_values = readYaml file: &quot;${infra}/charts/eric-enm-kvstore-hc/values.yaml&quot;
        values.&quot;eric-enm-kvstore-hc&quot;.global = [&quot;imageCredentials&quot;: [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_enm_kvstore_hc_values.imageCredentials.logshipper.repoPath}&quot;]]]

        eric_enm_fm_alert_parser_values = readYaml file: &quot;${monitoring}/charts/eric-enm-fm-alert-parser/values.yaml&quot;
        values.&quot;eric-enm-fm-alert-parser&quot;.imageCredentials = [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_enm_fm_alert_parser_values.imageCredentials.logshipper.repoPath}&quot;]]

        eric_cnom_server_values = readYaml file: &quot;${stateless}/charts/eric-cnom-server/eric-product-info.yaml&quot;
        values.&quot;eric-cnom-server&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_cnom_server_values.images.server.repoPath}&quot;]
        values.&quot;eric-cnom-server&quot;.global = [&quot;imageCredentials&quot;: [&quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_log_shipper_values.images.logShipper.repoPath}&quot;]]]

        values.&quot;eric-cnom-server&quot;.&quot;imageCredentials&quot;.registry = [&quot;url&quot;: &quot;&quot;]

        eric_cnom_document_database_mg_values = readYaml file: &quot;${infra}/charts/eric-cnom-document-database-mg/values.yaml&quot;
        values.&quot;eric-cnom-document-database-mg&quot;.imageCredentials = [&quot;repoPath&quot;: &quot;proj-enm/${eric_cnom_document_database_mg_values.imageCredentials.repoPath}&quot;]

        values.&quot;eric-cnom-document-database-mg&quot;.&quot;imageCredentials&quot;.registry = [&quot;url&quot;: &quot;&quot;]

        values.&quot;eric-enmsg-opendj&quot;.imageCredentials = [&quot;logshipper&quot;:[&quot;repoPath&quot;: &quot;proj-enm/proj-adp-log-released&quot;]]

        values.&quot;eric-enm-rwxpvc&quot;.imageCredentials = [&quot;logshipper&quot;:[&quot;repoPath&quot;: &quot;proj-enm/proj-adp-log-released&quot;]]

        values.&quot;eric-ctrl-brocli&quot;.imageCredentials = [&quot;logshipper&quot;:[&quot;repoPath&quot;: &quot;proj-enm/proj-adp-log-released&quot;]]

        eric_oss_metrics_stager_values = readYaml file: &quot;${monitoring}/charts/eric-oss-metrics-stager/eric-product-info.yaml&quot;
        if (!values.containsKey(&quot;eric-oss-metrics-stager&quot;))
            values[&quot;eric-oss-metrics-stager&quot;] = [:]
        values.&quot;eric-oss-metrics-stager&quot;.imageCredentials = [
            &quot;repoPath&quot;: &quot;proj-enm/${eric_oss_metrics_stager_values.images.remotewriter.repoPath}&quot;,
            &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_oss_metrics_stager_values.images.logshipper.repoPath}&quot;]
        ]

        eric_oss_ddc_values = readYaml file: &quot;${monitoring}/charts/eric-enm-ddc/charts/eric-oss-ddc/eric-product-info.yaml&quot;
        values.&quot;eric-enm-ddc&quot;.&quot;eric-oss-ddc&quot;.imageCredentials = [
            &quot;logshipper&quot;: [&quot;repoPath&quot;: &quot;proj-enm/${eric_oss_ddc_values.images.logshipper.repoPath}&quot;]
        ]

        sh &quot;rm -r ${bro}&quot;
        sh &quot;rm -r ${pre_deploy}&quot;
        sh &quot;rm -r ${infra}&quot;
        sh &quot;rm -r ${stateless}&quot;
        sh &quot;rm -r ${monitoring}&quot;

        sh &quot;rm -f ${filename}&quot;
        writeYaml file: filename, data: values
    } catch( err ) {
        echo &quot;$err&quot;
        error &quot;$err&quot;
    }
}

pipeline {
    agent {
            node
            {
            label SLAVE
            }
        }
    environment{
        repositoryUrl = &quot;https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/&quot;
        CSAR_PACKAGE_NAME = &quot;enm-installation-package&quot;
        OPENIDM = &quot;eric-enm-openidm-change-password:latest&quot;
        PASSKEY = &quot;eric-enm-securestorage-regen-passkey:latest&quot;
        OPENIDM_IMAGE_PATH = &quot;armdocker.rnd.ericsson.se/proj-enm&quot;
        PASSKEY_IMAGE_PATH = &quot;armdocker.rnd.ericsson.se/proj-enm&quot;
        PACKAGE_TYPE=&quot;csar&quot;
        CENMBUILD_ARM_TOKEN = credentials(&apos;cenmbuild_ARM_token&apos;)
    }
    stages {
       stage (&apos;Clean workspace&apos;) {
          steps {
                script {
                          sh &quot;docker image prune -fa&quot;
               }
            deleteDir()
         }
       }
       stage(&apos;Checkout Cloud-Native CSAR Git Repository&apos;) {
            steps {
                git branch: &apos;dTROF-predployCSAR&apos;,
                        url: &apos;${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package&apos;
                sh &apos;&apos;&apos;
                    git remote set-url origin --push ${GERRIT_CENTRAL}/OSS/com.ericsson.oss.containerisation/eric-enm-csar-package
                &apos;&apos;&apos;
            }
        }
        stage( &apos;Pre Configurations&apos; ) {
            steps {
                 script{
                        sh &apos;mkdir -p ${PWD}/charts&apos;
                        sh &apos;cp settings.xml ${HOME}/.m2/&apos;
                        env.VNF_RELEASE_DATE_TIME = sh(script: &quot;date +&apos;%FT%T%:z&apos;&quot;, returnStdout: true).trim()
                        echo &quot;${VNF_RELEASE_DATE_TIME}&quot;
                        env.ENM_RSTATE_NUMBER = sh(script: &apos;wget -q -O - --no-check-certificate &quot;https://ci-portal.seli.wh.rnd.internal.ericsson.com/getAOMRstate/?product=ENM&amp;drop=${SPRINT_TAG}&quot;&apos;, returnStdout: true).trim()
                        echo &quot;${ENM_RSTATE_NUMBER}&quot;
                 }
            }
        }
        stage(&apos;Get Integration Chart&apos;){
	                steps{
	                   script {
	                     sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-bro-integration/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz -o charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz&apos;
	                     sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-pre-deploy-integration/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz -o charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz&apos;
	                     if(&quot;${PRODUCT_SET}&quot; &gt; &quot;21.03.57&quot;){
	                          sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-monitoring-integration/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz -o charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz&apos;
	                     }
	                     sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-infra-integration/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz -o charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz&apos;
	                     sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-stateless-integration/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz -o charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz&apos;
	                 }
	            }
	        }
	        stage(&apos;Copy Integration Chart&apos;){
	            when {
	                allOf{
	                    environment name: &apos;BUILD_TYPE&apos;, value: &apos;manual&apos;
	        }
	             }
	                steps{
	                   script {
	                     sh &apos;mkdir -p ${PWD}/charts&apos;
	                     sh &apos;cp -rf chart/eric-enm-bro-integration-*.tgz charts/eric-enm-bro-integration-${BRO_CHART_VERSION}.tgz&apos;
	                     sh &apos;cp -rf chart/eric-enm-pre-deploy-integration-*.tgz charts/eric-enm-pre-deploy-integration-${PRE_DEPLOY_CHART_VERSION}.tgz&apos;
	                     sh &apos;cp -rf chart/eric-enm-monitoring-integration-*.tgz charts/eric-enm-monitoring-integration-${MONITORING_CHART_VERSION}.tgz&apos;
	                     sh &apos;cp -rf chart/eric-enm-infra-integration-*.tgz charts/eric-enm-infra-integration-${INFRA_CHART_VERSION}.tgz&apos;
	                     sh &apos;cp -rf chart/eric-enm-stateless-integration-*.tgz charts/eric-enm-stateless-integration-${STATELESS_CHART_VERSION}.tgz&apos;
	                 }
	            }
	        }
	        stage(&apos;integration value version&apos;){
	            steps{
	                script {
	                     sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml&apos;
	                     sh &apos;curl -4 https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-integration-values/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml -o scripts/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml&apos;
	                      }
	                }
	        }
			 stage(&apos;copy integration value version&apos;){
	            when {
	                allOf{
	                    environment name: &apos;BUILD_TYPE&apos;, value: &apos;manual&apos;
	                   }
	             }
	                steps{
	                    script {
	                         sh &apos;cp -rf chart/eric-enm-integration-production-values-*.yaml scripts/eric-enm-integration-production-values-${INTEGRATION_VALUE_VERSION}.yaml&apos;
	                         sh &apos;cp -rf chart/eric-enm-integration-extra-large-production-values*.yaml scripts/eric-enm-integration-extra-large-production-values-${INTEGRATION_VALUE_VERSION}.yaml&apos;						 
	                         }
	                }
        }
	stage(&apos;Packaging of Additional images&apos;) {
             steps {
                script {
                    sh &apos;docker pull ${OPENIDM_IMAGE_PATH}/${OPENIDM}&apos;
                    sh &apos;docker pull ${PASSKEY_IMAGE_PATH}/${PASSKEY}&apos;
                    sh &apos;docker tag ${OPENIDM_IMAGE_PATH}/${OPENIDM} ${OPENIDM}&apos;
                    sh &apos;docker tag ${PASSKEY_IMAGE_PATH}/${PASSKEY} ${PASSKEY}&apos;
                    sh &apos;docker save ${OPENIDM} -o scripts/eric-enm-openidm-change-password-docker.tar&apos;
                    sh &apos;docker save ${PASSKEY} -o scripts/eric-enm-securestorage-regen-passkey-docker.tar&apos;
                    sh &apos;gzip scripts/eric-enm-securestorage-regen-passkey-docker.tar&apos;
                    sh &apos;gzip scripts/eric-enm-openidm-change-password-docker.tar&apos;
                }
            }
            post {
                always {
                    sh &apos;docker image remove ${OPENIDM}&apos;
                    sh &apos;docker image remove ${PASSKEY}&apos;
                    sh &apos;docker image remove ${OPENIDM_IMAGE_PATH}/${OPENIDM}&apos;
                    sh &apos;docker image remove ${PASSKEY_IMAGE_PATH}/${PASSKEY}&apos;
                }
            }
        }
        stage(&apos;Generate new version&apos;) {
            steps {
               sh &quot;${bob} generate-new-version&quot;
                script {
				    env.VERSION = &quot;1.18.0-1997-h987f80d&quot;
                    echo &quot;${VERSION}&quot;
                    env.RSTATE = sh(script: &quot;cat .bob/var.rstate&quot;, returnStdout:true).trim()
                    echo &quot;${RSTATE}&quot;
                    env.VNF_PACKAGE_VERSION = sh(script: &quot;echo CXP9041414_$VERSION&quot;, returnStdout:true).trim()
                    echo &quot;$VNF_PACKAGE_VERSION&quot;					
                }
            }
        }
	stage(&apos;Override integration-values file&apos;) {
            steps {
                script {
                    env.integration_values=sh (script: &quot;ls scripts |grep eric-enm-integration-production-values*&quot;, returnStdout: true ).trim()
                    overrideIntegrationValues()
                    check_extra_large_values=sh (script: &quot;ls scripts |grep eric-enm-integration-extra-large-production-values*&quot;, returnStatus: true )
                    if (check_extra_large_values == 0){
                        env.integration_values=sh (script: &quot;ls scripts |grep eric-enm-integration-extra-large-production-values*&quot;, returnStdout: true ).trim()
                        overrideIntegrationValues()
                    }
                    sh &quot;sed -i -z &apos;s/tags:/tags: \\&amp;tags_reference/1&apos; scripts/eric-enm-integration-*&quot;
                    sh &quot;sed -i -z &apos;s/tags:/tags:\\n    *tags_reference/2&apos; scripts/eric-enm-integration-*&quot;
                    sh &quot;sed -i &apos;20,2000{/value_pack_/d}&apos; scripts/eric-enm-integration-*&quot;
                }
            }
        }
        stage(&apos;Update manifest details&apos;) {
            steps {
                script {
                    sh &quot;sed -i -e &apos;/^vnf_package_version:/s/.*/vnf_package_version: $VNF_PACKAGE_VERSION/&apos; -e &apos;/^vnf_release_date_time:/s/.*/vnf_release_date_time: $VNF_RELEASE_DATE_TIME/&apos; manifest/enm_descriptor.mf&quot;
                    sh(&quot;cat manifest/enm_descriptor.mf&quot;)
                }
            }
        }
        stage(&apos;Update VNFD details&apos;) {
            steps {
                script {
                    sh &quot;mkdir -p vnfd_updated&quot;
                    sh &quot;cp vnfd/enm_descriptor.yaml vnfd_updated/enm_descriptor.yaml&quot;
                    sh &quot;sed -i &apos;s/&lt;&lt;VERSION&gt;&gt;/$VERSION/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    sh &quot;sed -i &apos;s/&lt;&lt;DESCRIPTOR_ID&gt;&gt;/${UUID.randomUUID().toString()}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    sh &quot;sed -i &apos;s/&lt;&lt;PRODUCT_SET&gt;&gt;/${PRODUCT_SET}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    sh &quot;sed -i &apos;s/&lt;&lt;BRO_CHART_VERSION&gt;&gt;/${BRO_CHART_VERSION}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    sh &quot;sed -i &apos;s/&lt;&lt;PRE_DEPLOY_CHART_VERSION&gt;&gt;/${PRE_DEPLOY_CHART_VERSION}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    if(&quot;${PRODUCT_SET}&quot; &gt; &quot;21.03.57&quot;){
                        sh &quot;sed -i &apos;s/&lt;&lt;MONITORING_CHART_VERSION&gt;&gt;/${MONITORING_CHART_VERSION}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    }
                    sh &quot;sed -i &apos;s/&lt;&lt;INFRA_CHART_VERSION&gt;&gt;/${INFRA_CHART_VERSION}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                    sh &quot;sed -i &apos;s/&lt;&lt;STATELESS_CHART_VERSION&gt;&gt;/${STATELESS_CHART_VERSION}/g&apos; vnfd_updated/enm_descriptor.yaml&quot;
                }
            }
        }
        stage(&apos;Build CSAR Package&apos;) {
            steps {
                script {
                        def AMPackageWithCsar = new AMPackageCommand()
                                .AMPackageImage(defaultAMPackageImage)
                                .needDockerSocket(true)
                                .envVars([&apos;ENM_INSTALLATION_CHART_VERSION&apos;: env.INFRA_CHART_VERSION,
                                          &apos;INTEGRATION_VALUE_VERSION&apos;: env.INTEGRATION_VALUE_VERSION,
                                ])
                                .toString()
                        sh &quot;${AMPackageWithCsar} generate -hd charts/ --name ${CSAR_PACKAGE_NAME}-${env.VERSION} -sc scripts --set global.restore.state=ongoing -mf manifest/enm_descriptor.mf --history history/ChangeLog.txt --vnfd vnfd_updated/enm_descriptor.yaml --definitions definitions/etsi_nfv_sol001_vnfd_2_5_1_types.yaml --helm3&quot;
                }
            }
        }
        stage(&apos;Publish Csar Package to Nexus&apos;) {
            steps {
              script {
               env.filesize = sh(script: &quot;du -h ${CSAR_PACKAGE_NAME}-${VERSION}.csar | cut -f1&quot;, returnStdout: true).trim()
               sh &quot;bash Jenkins/scripts/upload_to_nexus.sh ${VERSION} ${CSAR_PACKAGE_NAME}-${VERSION}.csar ${repositoryUrl} ${CSAR_PACKAGE_NAME} ${PACKAGE_TYPE}&quot;
               currentBuild.description =&quot;&lt;a href=${repositoryUrl}/cENM/csar/${CSAR_PACKAGE_NAME}/${VERSION}/${CSAR_PACKAGE_NAME}-${VERSION}.csar&gt;${CSAR_PACKAGE_NAME}-${VERSION}.csar&lt;/a&gt; ($filesize)&quot;
              currentBuild.displayName = &quot;CSAR ON : ${ISO_VERSION}&quot;
              }
            }
        }
    }
    post {
        success {
              script {
	              sh &apos;echo &quot;Testing success&quot;&apos;
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class AMPackageCommand {
    def AMPackageImage = &apos;AMPackage.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)
        def cmd = &quot;&quot;&quot;\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${AMPackageImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:1.5.2-0&apos;
    def envVars = [:]
    def needDockerSocket = false
    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)
        def cmd = &quot;&quot;&quot;\
            |docker run
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; \$group; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>