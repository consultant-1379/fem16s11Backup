<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>iso_version</string>
        <string>sprint_tag</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>iso_version</name>
          <description>The ENM ISO version (e.g. 1.65.77)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>sprint_tag</name>
          <description>Tag for GIT tagging the repository after build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>pipeline {
    agent { node { label 'Cloud-Native' } }
    options {
        timestamps()
    }
    environment {
        PIPELINE_LAST_STAGE_STATUS = 'UNKNOWN'
        CENMBUILD_ARM_TOKEN = credentials('cenmbuild_ARM_token')
        ERIC_ENM_FMSDK_IMAGE_TAG ='1.0.3-17'
    }
    parameters {
        string(name: 'iso_version', description: 'The ENM ISO version (e.g. 1.65.77)',defaultValue: "")
        string(name: 'sprint_tag', description: 'Tag for GIT tagging the repository after build',defaultValue: "")       
    }
    stages {
        stage ('Building Fm-sdk image') {
            steps {
                script {
                    def productSet = ""
                     def isoVersion = ""
                     def imageFromFmsdk=""
 
                    // For nightly build this parameter would be empty


                    
                    if (params.iso_version) {
                        isoVersion = params.iso_version.trim()
                    }
                    
                    // Check if isoVersion set version is given
                    if (isoVersion != "") {
                        env.ISO_VERSION = isoVersion
                        echo "Triggered manually with the ISO_VERSION: ${isoVersion}"
                        currentBuild.description = "Triggered Mode: &lt;b&gt;Manual&lt;/b&gt;&lt;br/&gt;"
                    } else {
                        echo "Triggered automatically."
                        currentBuild.description = "Triggered Mode: &lt;b&gt;Auto&lt;/b&gt;&lt;br/&gt;"
                    }
                    //def b = build(job: "eric-enm-fmsdk", parameters: [[$class:'StringParameterValue', name:'ISO_VERSION', value:String.valueOf("${isoVersion}")],[$class:'StringParameterValue', name:'SPRINT_TAG', value:String.valueOf("${sprint_tag}")]], propagate: true, wait: true)
                   // imageFromFmsdk = "$b.buildVariables.IMAGE_TAG"
					//echo "${imageFromFmsdk}"
					//env.TEMP_ERIC_ENM_FMSDK_IMAGE_TAG= imageFromFmsdk
                }
            }
        }
        
        stage ('Build CSAR') {
        
        			environment{
				 ERIC_ENM_FMSDK_IMAGE_TAG = '1.0.3-17'
}
            steps {
                script {
                   
                    echo "Build CSAR image---&gt;"
                    echo "${env.ERIC_ENM_FMSDK_IMAGE_TAG}"
                    //sh 'printenv'

			                  def b = build(job: "sdk-csar-buildmanager", parameters: [[$class:'StringParameterValue', name:'ISO_VERSION', value:String.valueOf("${iso_version}")],[$class:'StringParameterValue', name:'SPRINT_TAG', value:String.valueOf("${sprint_tag}")]], propagate: true, wait: true)


                  }
            }
        }

    }
    post {
        success {
            mail to: "vijayakumar@ericsson.com",
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
        failure {
                script {
                        failedStage = env.STAGE_NAME
                }
            }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>