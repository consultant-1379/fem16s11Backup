<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>BRANCH</string>
        <string>ISO_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description>The ENM ISO version (e.g. 1.65.77)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Branch to build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_SLES_EAP6_IMAGE_TAG</name>
          <defaultValue>1.17.10-1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_SLES_BASE_IMAGE_TAG</name>
          <defaultValue>1.17.10-1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_INIT_CONTAINER_IMAGE_TAG</name>
          <defaultValue>1.17.10-1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_MONITORING_REMOTEWRITER_IMAGE_TAG</name>
          <defaultValue>1.17.10-0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_SLES_APACHE2_IMAGE_TAG</name>
          <defaultValue>1.12.10-1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_SECURESTORAGE_INIT_BASE_IMAGE_TAG</name>
          <defaultValue>1.16.10-1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ENM_ISO_REPO_VERSION</name>
          <defaultValue>ENM_21_16_ERICenm_CXP9027091_1_117_99</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_NEO4J_EXTENSION_PLUGIN_IMAGE_TAG</name>
          <defaultValue>1.16.10-0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_MONITORING_MASTER_IMAGE_TAG</name>
          <defaultValue>1.17.10-0</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ERIC_ENM_SLES_EAP7_IMAGE_TAG</name>
          <defaultValue>1.17.10-1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <EnvInjectJobProperty plugin="envinject@2.4.0">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.cloudcommon.models/eric-enm-models
CHART_DIR=eric-enm-models</propertiesContent>
        <secureGroovyScript plugin="script-security@1138.v8e727069a_025">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>#!/usr/bin/env groovy

/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2020
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------
 *
 * IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 *  - slave with a specific label (see pipeline.agent.label below)
 *  - credentials plugin should be installed and have the secrets with the following names:
 *  - eric-enm
 *    + lciadm100credentials (token to access Artifactory)
 */
def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
        .needDockerSocket(true)
        .toString()
def GIT_COMMITTER_NAME = &apos;enmadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;enmadm100@ericsson.com&apos;
def failedStage = &apos;&apos;

pipeline {

    agent {
        label &apos;Docker-POC&apos;
    }

    parameters {
        string(name: &apos;ISO_VERSION&apos;, description: &apos;The ENM ISO version (e.g. 1.65.77)&apos;)
        string(name: &apos;BRANCH&apos;, description: &apos;Branch to build&apos;)
    }

    environment {
        RELEASE = &quot;true&quot;
    }

    stages {

        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
		
		 stage(&apos;Checkout Cloud-Native Service Git Repository&apos;) {
            steps {
                git branch: env.BRANCH,
                        credentialsId: &apos;enmadm100_private_key&apos;,
                        url: &apos;${GERRIT_MIRROR}/&apos;+env.REPO
                sh &apos;&apos;&apos;
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                &apos;&apos;&apos;            }
        }
        stage(&apos;Clean&apos;) {
            steps {
                sh &quot;${bob} clean&quot;
            }
        }

        

        stage(&apos;Linting Dockerfile&apos;) {
            steps {
                sh &quot;${bob} lint-dockerfile&quot;
                archiveArtifacts &apos;dockerfilelint.log&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage(&apos;Swap versions in Dockerfile file&apos;){
            steps{
                echo sh(script: &apos;env&apos;, returnStdout:true)
                step ([$class: &apos;CopyArtifact&apos;, projectName: &apos;sync-build-trigger-pointfix&apos;, filter: &quot;*&quot;]);
                sh &quot;${bob} swap-latest-versions-with-numbers&quot;
                sh &apos;&apos;&apos;
                    if git status | grep &apos;Dockerfile&apos; &gt; /dev/null; then
                        git commit -m &quot;NO JIRA - Updating Dockerfile with base image version&quot;
                    else
                        echo `date` &gt; timestamp
                        git add timestamp
                        git commit -m &quot;NO JIRA - Time Stamp &quot;
                    fi
                   #git push origin HEAD:master
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Build Models Images&apos;) {
            steps {
                sh &quot;${bob} generate-new-version build-image-with-all-tags&quot;
            }

            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags&quot;
                    }
                }
            }
        }

        stage(&apos;Retrieve Image Version&apos;) {
            steps {
                script {
                    env.IMAGE_TAG = sh(script: &quot;cat .bob/var.version&quot;, returnStdout:true).trim()
                    echo &quot;${IMAGE_TAG}&quot;
                }
            }

            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags&quot;
                    }
                }
            }
        }

        stage(&apos;Generate ADP Parameters&apos;) {
            steps {
                sh &quot;${bob} generate-output-parameters&quot;
                archiveArtifacts &apos;artifact.properties&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }

        stage(&apos;Publish Models Images to Artifactory&apos;) {
            steps {
                sh &quot;${bob} push-image&quot;
            }

            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags&quot;
                    }
                }

                always {
                    sh &quot;${bob} remove-image-with-all-tags&quot;
                }
            }
        }

        stage(&apos;Tag Cloud-Native Service Git Repository&apos;) {
            steps {
                wrap([$class: &apos;BuildUser&apos;]) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        &apos;AUTHOR_NAME&apos;        : &quot;\${BUILD_USER:-${GIT_COMMITTER_NAME}}&quot;,
                                        &apos;AUTHOR_EMAIL&apos;       : &quot;\${BUILD_USER_EMAIL:-${GIT_COMMITTER_EMAIL}}&quot;,
                                        &apos;GIT_COMMITTER_NAME&apos; : &quot;${GIT_COMMITTER_NAME}&quot;,
                                        &apos;GIT_COMMITTER_EMAIL&apos;: &quot;${GIT_COMMITTER_EMAIL}&quot;
                                ])
                                .toString()
                        sh &quot;${bobWithCommitterInfo} create-git-tag&quot;
                        sh &quot;&quot;&quot;
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        &quot;&quot;&quot;
                    }
                }
            }

            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                always {
                    script {
                        sh &quot;${bob} remove-git-tag&quot;
                    }
                }				
            }
        }
    }
    post {
        
        failure {
            mail to: &apos;paras.setia@ericsson.com&apos;,
                 from: &quot;enmadm100@lmera.ericsson.se&quot;,
                 subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                 body: &quot;Failure on ${env.BUILD_URL}&quot;
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |--group-add \$(stat -c &apos;%g&apos; /var/run/docker.sock)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>