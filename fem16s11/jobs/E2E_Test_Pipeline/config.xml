<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>product_set_version</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Please talk to Andrey Lytvynov about what this job is intended to be for.&#13;
&lt;p&gt;&lt;h3 style="color:red"&gt;Ensure to give the product set version higher than the last nightly/manually built product set.&lt;/h3&gt;&lt;/p&gt;&#13;
&lt;h3&gt;Documentation&lt;/h3&gt;&#13;
&lt;ul&gt;&#13;
  &lt;li&gt;&lt;a style="font-size: 16px" href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide+-+build+cENM+SG+pipeline+based+on+particular+ENM+Product+Set+version" target="_blank" rel="noopener noreferrer"&gt;User Guide&lt;/a&gt;&lt;/li&gt;  &#13;
&lt;/ul&gt;&#13;
&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Enter the product set version (e.g. 20.11.52).                      Please ensure to give latest product set version compared to last built product set.</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.39">
      <projectNameList>
        <string>Test_flow*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>pipeline {
    agent { label 'Cloud-Native' }
    options {
        timestamps()
    }
    parameters {
        string(name: 'product_set_version', description: 'Enter the product set version (e.g. 20.11.52).\
                      Please ensure to give latest product set version compared to last built product set.', defaultValue: "")
    }
    stages {
         stage ('Clean up workspace') {
            steps {
                script {
                    deleteDir()
                }
            }
        }
        stage ('Initialize ENM Versions') {
            steps {
                script {
                    def productSet = ""
					if(params.product_set_version) {
						productSet = params.product_set_version.trim()
					}
					
                    if(productSet != "") {
                        env.PRODUCT_SET = productSet
                        echo "Triggered manually with the PRODUCT_SET: ${productSet}"
                        currentBuild.description = "Triggered Mode: &lt;b&gt;Manual&lt;/b&gt;&lt;br/&gt;"
                    } else {
                        echo "Triggered automatically."
                        currentBuild.description = "Triggered Mode: &lt;b&gt;Auto&lt;/b&gt;&lt;br/&gt;"
                    }
                    // Call eric-enm-green-iso-build-trigger with PRODUCT_SET parameter                    
					def b = build (job: "test_cn_bump", parameters: [[$class:'StringParameterValue', name:'PRODUCT_SET', value:String.valueOf("$productSet")]], propagate: true, wait: true)
                    env.ISO_VERSION = "$b.buildVariables.ISO_VERSION"
                    echo "ISO VERSION: $ISO_VERSION"
                    env.PRODUCT_SET = "$b.buildVariables.PRODUCT_SET"
                    echo "PRODUCT SET VERSION: $PRODUCT_SET"
                    env.ENM_ISO_REPO_VERSION = "$b.buildVariables.ENM_ISO_REPO_VERSION"
                    echo "ENM_ISO_REPO_VERSION: $ENM_ISO_REPO_VERSION"
                    
                    currentBuild.description += "Product Set Version: $PRODUCT_SET&lt;br/&gt;"                    
                    currentBuild.description += "ISO Version: $ISO_VERSION&lt;br/&gt;"
                    currentBuild.description += "Yum Repo Setup: $ENM_ISO_REPO_VERSION&lt;br/&gt;"
                    
                    environment_list = [[$class:'StringParameterValue', name:"ISO_VERSION", value:String.valueOf("${ISO_VERSION}")],
                                        [$class:'StringParameterValue', name:"ENM_ISO_REPO_VERSION", value:String.valueOf("${ENM_ISO_REPO_VERSION}")]]
                    echo "$environment_list"
                    
                }
            }
        }
        /*stage ('Build RHEL 6 Base') {
			steps {
			    script {
    			    echo "Build RHEL 6 Base"
    				//def eric_enm_rhel6base_build = build(job: "Test_flow_RHEL_6_Base_build_trigger", propagate: true, wait: true, parameters: environment_list)
    				//env.ERIC_ENM_RHEL6BASE_VERSION = "$eric_enm_rhel6base_build.buildVariables.BASE_IMAGE_VERSION"
    				env.ERIC_ENM_RHEL6BASE_VERSION = "1.0.235-0"
			    }
			}
		}*/
		stage ('SYNC 1: OS Base Images') {
            steps {
                echo "All OS Base Images up to this point built successfully"
                sleep(1)
                /*script {
                    build_environment_list()
                }*/
            }
        }
		/*stage ('Starting Base Images') {
	    	parallel {
				stage('Build Rhel 6 JBoss') {
					steps {
	    			    script {
    						echo "Building rhel6jboss"
    						//def eric_enm_rhel6jboss = build(job: "Test_flow_rhel6jboss_Base_build_trigger", propagate: true, wait: true, parameters: environment_list)
    						//env.ERIC_ENM_RHEL6JBOSS_VERSION = "$eric_enm_rhel6jboss.buildVariables.BASE_IMAGE_VERSION"
    						env.ERIC_ENM_RHEL6JBOSS_VERSION = "1.0.234-0"
					    }
					}
				}
				stage('ASSUMING WE ARE Building Other Base images') {
					steps {
	    			    script {
    						echo "Building other base images"
					    }
					}
				}
			}
		}*/
		stage ('SYNC 2: OS Base Images') {
            steps {
                echo "All OS Base Images up to this point built successfully"
                sleep(1)
                /*script {
                    build_environment_list()
                }*/
            }
        }
		/*stage ('Starting More Base Images') {
		    parallel {
		        stage('Build jbossconfig') {
	    		    steps {
	    		        script {
        	    		    //def eric_enm_jbossconfig = build(job: "Test_flow_jbossconfig_Base_build_trigger", propagate: true, wait: true, parameters: environment_list)
        	    		    //env.ERIC_ENM_JBOSSCONFIG_VERSION = "$eric_enm_jbossconfig.buildVariables.BASE_IMAGE_VERSION"
        	    		    echo "Building httpd sidecar"
	    		        }
	    		    }
	    		}
	    		stage('Build Monitoring Eap 6') {
	    		    steps {
	    		        script {
        	    		    //def eric_enm_monitoring_eap6 = build(job: "Test_flow_monitoring_eap6_Base_build_trigger", propagate: true, wait: true, parameters: environment_list)
        	    		    //env.ERIC_ENM_MONITORING_EAP6_VERSION = "$eric_enm_monitoring_eap6.buildVariables.BASE_IMAGE_VERSION"
        	    		    echo "Building httpd sidecar"
	    		        }
	    		    }
	    		}
	    		stage('Build Monitoring Eap 7') {
	    		    steps {
	    		        script {
        	    		    //def eric_enm_monitoring_eap7 = build(job: "Test_flow_monitoring_eap7_Base_build_trigger", propagate: true, wait: true, parameters: environment_list)
        	    		    //env.ERIC_ENM_MONITORING_EAP7_VERSION = "$eric_enm_monitoring_eap7.buildVariables.BASE_IMAGE_VERSION"
        	    		    echo "Building httpd sidecar"
	    		        }
	    		    }
	    		}
		    }
        }*/
        stage ('SYNC 3: OS Base Images') {
            steps {
                echo "All OS Base Images up to this point built successfully"
                sleep(1)
            }
        }
		/*stage ('Starting SG') {
		    parallel {
	    		stage('Build ERIC ENMSG ACCESS CONTROL') {
	    		    steps {
	    		        script {
        	    		    //def eric_enmsg_access_control = build(job: "Test_flow_access_control_SG_build_trigger", propagate: true, wait: true, parameters: environment_list)
        	    		    //env.ERIC_ENMSG_ACCESS_CONTROL_VERSION = "$eric_enmsg_access_control.buildVariables.BASE_IMAGE_VERSION"
        	    		    echo "Building httpd sidecar"
	    		        }
	    		    }
	    		}
		    }
        }*/
		stage ('Trigger Integration Build') {
            steps {
                script {
                    sh 'echo "ISO_VERSION=\$ISO_VERSION" &gt; artifact.properties'
                    sh 'echo "PRODUCT_SET=\$PRODUCT_SET" &gt;&gt; artifact.properties'
                    archiveArtifacts 'artifact.properties'
                    //sh "exit 1"
                }
                sleep(1)
            }
        }
    }
    post {
	    success {
			script {
				echo "I am success"
				sh(script: 'wget -q -O - --no-check-certificate --post-data="" http://atvts3460.athtem.eei.ericsson.se:8000/api/manageCNProductSet/${PRODUCT_SET}/cENM-Build-Images/passed/', returnStdout: true).trim()
				currentBuild.rawBuild.@result = hudson.model.Result.SUCCESS
			}
		}
        failure {
            script {
                echo "I am failuer"
				sh(script: 'wget -q -O - --no-check-certificate --post-data="" http://atvts3460.athtem.eei.ericsson.se:8000/api/manageCNProductSet/${PRODUCT_SET}/cENM-Build-Images/failed/', returnStdout: true).trim()
				currentBuild.rawBuild.@result = hudson.model.Result.FAILURE
            }
        }
    }
}

def build_environment_list(){
    env.getEnvironment().each { key, value -&gt;
        if ("${key}".startsWith("ERIC_ENM")){
            echo "${key}=${value}"
            environment_list &lt;&lt; [$class:'StringParameterValue', name:"${key}", value:String.valueOf("${value}")]
        }
    }
    build(job: "sync-build-trigger", propagate: true, wait: true, parameters: environment_list)
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>