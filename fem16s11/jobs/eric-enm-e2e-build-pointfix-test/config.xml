<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>BRANCH</string>
        <string>product_set_version</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enm-e2e-build-pointfix - autogenerated using JobDSL - all manual changes will be overwritten!&lt;p&gt;&lt;h2 style="color:red"&gt;Ensure to give the product set version higher than the last nightly/manually built product set.&lt;/h2&gt;&lt;/p&gt;&lt;h2&gt;Documentation&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a style="font-size: 16px" href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide+-+build+cENM+SG+pipeline+based+on+particular+ENM+Product+Set+version" target="_blank" rel="noopener noreferrer"&gt;User Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Enter the product set version (e.g. 20.11.52).Please ensure to give latest product set version compared to last built product set.</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Enter the GIT Branch (e.g. master).</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>SG_PROJECT_LIST = ["eric-enmsg-amos", "eric-enmsg-auto-id-solr", "eric-enmsg-autoid-service", "eric-enmsg-autoprovisioning", "eric-enmsg-cmevents", "eric-enmsg-cmutilities", "eric-enmsg-com-ecim-mscm", "eric-enmsg-comecimpolicy", "eric-enmsg-dc-history", "eric-enmsg-domain-proxy-coordinator", "eric-enm-dps-schemamgt", "eric-enmsg-dlms", "eric-enmsg-dpmediation", "eric-enmsg-eventbasedclient", "eric-enmsg-flowautomation", "eric-enmsg-fls", "eric-enm-flsdb-schemamgt", "eric-enmsg-fm-alarm-processing", "eric-enmsg-fm-history", "eric-enmsg-fm-service", "eric-enmsg-general-scripting", "eric-enmsg-gossiprouter-cache", "eric-enmsg-gossiprouter-remoting", "eric-enmsg-gossiprouter-eap7", "eric-enmsg-ha-proxy", "eric-enmsg-import-export-service", "eric-enmsg-ip-service-management", "eric-enmsg-jmsserver", "eric-enmsg-kpi-calc-serv", "eric-enmsg-kpi-service", "eric-enm-kvstore-hc", "eric-enmsg-lcmservice", "eric-enmsg-medrouter", "eric-enmsg-msap", "eric-enmsg-msapgfm", "eric-enmsg-mscm", "eric-enmsg-mscmapg", "eric-enmsg-mscmip", "eric-enmsg-msfm", "eric-enmsg-mskpirt", "eric-enmsg-msnetlog", "eric-enmsg-mspm", "eric-enmsg-mspmip", "eric-enmsg-mssnmpcm", "eric-enmsg-mssnmpfm", "eric-enmsg-nb-alarm-irp-agent-corba", "eric-enmsg-nb-fm-snmp", "eric-enmsg-nbi-bnsi-fm", "eric-enmsg-nedo-serv", "eric-enmsg-networkexplorer", "eric-enmsg-node-plugins", "eric-enmsg-nodecli", "eric-enm-omnidaemon", "eric-enmsg-opendj", "eric-enmsg-openidm", "eric-enmsg-pki-ra-service", "eric-enmsg-pmic-router-policy", "eric-enmsg-pmservice", "eric-enmsg-sa-service", "eric-enmsg-sentinel", "eric-enm-sfwkdb-schemamgt", "eric-enmsg-shm-core-service", "eric-enmsg-shmservice", "eric-enmsg-smrs-service", "eric-enmsg-solr-service", "eric-enmsg-sps-service", "eric-enmsg-supervisionclient", "eric-enm-troubleshooting-utils", "eric-enmsg-uiservice", "eric-enmsg-visinaming-nb", "eric-enmsg-visinaming-sb", "eric-enmsg-vault-service", "eric-enmsg-web-push-service", "eric-enmsg-elex"]
pipeline {
    agent { node { label 'pointfix_test' } }
    options {
        timestamps()
    }
    environment {
        PIPELINE_LAST_STAGE_STATUS = 'UNKNOWN'
    }
    parameters {
        string(name: 'product_set_version', description: 'Enter the product set version (e.g. 20.11.52).Please ensure to give latest product set version compared to last built product set.', defaultValue: "")
		string(name: 'BRANCH', description: 'Enter the GIT Branch (e.g. master).', defaultValue: "")
    }
    stages {
        stage ('Initialization of ENM Versions') {
            steps {
                script {
                    def productSet = ""
					def branch = ""

                    // For nightly build this parameters would be empty
                    if (params.product_set_version) {
                        productSet = params.product_set_version.trim()
                    }
                    // Check if product set version is given
                    if (productSet != "") {
                        env.PRODUCT_SET = productSet
                        echo "Triggered manually with the PRODUCT_SET: ${productSet}"
                        currentBuild.description = "Triggered Mode: &lt;b&gt;Manual&lt;/b&gt;&lt;br/&gt;"
                    } else {
                        echo "Triggered automatically."
                        currentBuild.description = "Triggered Mode: &lt;b&gt;Auto&lt;/b&gt;&lt;br/&gt;"
                    }
                    // Call eric-enm-green-iso-build-trigger with PRODUCT_SET parameter
                    def b = build(job: "eric-enm-green-iso-build-trigger-test", parameters: [[$class:'StringParameterValue', name:'PRODUCT_SET', value:String.valueOf("${productSet}")]], propagate: true, wait: true)
                    env.ISO_VERSION = "$b.buildVariables.ISO_VERSION"
                    echo "ISO VERSION: $ISO_VERSION"
                    env.PRODUCT_SET = "$b.buildVariables.PRODUCT_SET"
                    echo "PRODUCT SET VERSION: $PRODUCT_SET"
                    env.ENM_ISO_REPO_VERSION = "$b.buildVariables.ENM_ISO_REPO_VERSION"
                    echo "ENM_ISO_REPO_VERSION: $ENM_ISO_REPO_VERSION"
					echo "BRANCH: $BRANCH"

                    // Update the Build Description
                    currentBuild.description += "Product Set Version: $PRODUCT_SET&lt;br/&gt;"
                    currentBuild.description += "ISO Version: $ISO_VERSION&lt;br/&gt;"
                    currentBuild.description += "Yum Repo Setup: $ENM_ISO_REPO_VERSION&lt;br/&gt;"
					currentBuild.description += "GIT Branch: $BRANCH&lt;br/&gt;"

                    environment_list = [[$class:'StringParameterValue', name:"ISO_VERSION", value:String.valueOf("${ISO_VERSION}")],
                                        [$class:'StringParameterValue', name:"ENM_ISO_REPO_VERSION", value:String.valueOf("${ENM_ISO_REPO_VERSION}")],
										[$class:'StringParameterValue', name:"BRANCH", value:String.valueOf("${BRANCH}")]]
                    echo "$environment_list"
                }
            }
        }
   
        stage('Building Service Groups Images and Helm Charts') {
            steps{
                script{
                    def builds = [:]
                    for (def proj in SG_PROJECT_LIST) {
						def service_group_build = "${proj}"+'-pointfix-test'
                        builds["${service_group_build}"] = {
                            stage("Build ${service_group_build}"){
                                retry(3) {
                                    def image_tag_name = (service_group_build.replaceAll("-", "_") + "_IMAGE_TAG").toUpperCase()
                                    def build = build(job: "${service_group_build}", propagate: true, wait: true, parameters: environment_list)
                                    env."$image_tag_name" = "$build.buildVariables.IMAGE_TAG"
                                    echo "IMAGE TAG: $image_tag_name"
                                }
                            }
                        }
                    }
                    parallel builds
                    echo sh(script: 'env', returnStdout:true)
                }
            }
        }
        
        stage ('Trigger Integration Build') {
            steps {
                script {
                    sh 'echo "ISO_VERSION=$ISO_VERSION" &gt; artifact.properties'
                    sh 'echo "PRODUCT_SET=$PRODUCT_SET" &gt;&gt; artifact.properties'
					sh 'echo "BRANCH=$BRANCH" &gt;&gt; artifact.properties'
                    archiveArtifacts 'artifact.properties'
                }
                sleep(5)
            }
        }
    }
    
}

</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>