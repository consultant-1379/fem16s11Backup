<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://gerritmirror-ha.lmera.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/enm-containerisation-ci-pipeline</url>
        <credentialsId>lciadm100_private_key</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>dTORF-401748</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.78.3">
      <scriptText>import groovy.json.JsonSlurper;
 
def jsonSlurper = new JsonSlurper()
def OS_BASE_IMAGES = []
def Base_IMAGES = []
def MORE_BASE_IMAGES = []
def SERVICE_GROUPS = []
 
File project_file = new File(WORKSPACE + &quot;/workspace/&quot; + JOB_NAME + &apos;/jenkins/project_file.json&apos;) 
def project_file_parsed = jsonSlurper.parse(project_file)
project_file_parsed.each { entry -&gt;
    project_details_map = [:]
    entry.each { key,value -&gt;
        project_details_map[key] = value
    }
    if (project_details_map[&quot;E2E_Enable&quot;] == &quot;True&quot;) {
        if (project_details_map[&quot;E2E_order&quot;] == &quot;base_images_os&quot;) {
            project_name = project_details_map[&quot;repo&quot;]
            project_name = project_name.split(&quot;/&quot;).last()
            OS_BASE_IMAGES &lt;&lt; &quot;\&quot;&quot; + project_name + &quot;\&quot;&quot;
        } else if (project_details_map[&quot;E2E_order&quot;] == &quot;baseimages&quot;){
            project_name = project_details_map[&quot;repo&quot;]
            project_name = project_name.split(&quot;/&quot;).last()
            Base_IMAGES &lt;&lt; &quot;\&quot;&quot; + project_name + &quot;\&quot;&quot;
        } else if (project_details_map[&quot;E2E_order&quot;] == &quot;more_base_image&quot;){
            project_name = project_details_map[&quot;repo&quot;]
            project_name = project_name.split(&quot;/&quot;).last()
            MORE_BASE_IMAGES &lt;&lt; &quot;\&quot;&quot; + project_name + &quot;\&quot;&quot;
        } else {
            project_name = project_details_map[&quot;repo&quot;]
            project_name = project_name.split(&quot;/&quot;).last()
            SERVICE_GROUPS &lt;&lt; &quot;\&quot;&quot; + project_name + &quot;\&quot;&quot;
        }
    }
}
  

createPipelineE2EBuildJob(OS_BASE_IMAGES,Base_IMAGES,MORE_BASE_IMAGES,SERVICE_GROUPS)

def createPipelineE2EBuildJob(OS_BASE_IMAGES,Base_IMAGES,MORE_BASE_IMAGES,SERVICE_GROUPS) {
    String e2e_steps = &quot;&quot;&quot;SG_PROJECT_LIST = ${SERVICE_GROUPS}
BASEIMAGESOS_PROJECT_LIST = ${OS_BASE_IMAGES}
BASEIMAGES_PROJECT_LIST = ${Base_IMAGES}
MOREBASEIMAGES_PROJECT_LIST = ${MORE_BASE_IMAGES}
pipeline {
    options {
        timestamps()
    }
    stages {
        stage (&apos;Removing Docker Images&apos;) {
            steps {
                echo &quot;Hello...&quot;
            }
        }
    }
}
&quot;&quot;&quot;
  pipelineJob(&apos;test_e2e_json&apos;) {
        description (&apos;ENM Cloud Native Build pipeline eric-enm-e2e-build - autogenerated using JobDSL - all manual changes will be overwritten!&apos; +
                &apos;&lt;p&gt;&lt;h2 style=&quot;color:red&quot;&gt;Ensure to give the product set version higher than the last nightly/manually built product set.&lt;/h2&gt;&lt;/p&gt;&apos; +
                &apos;&lt;h2&gt;Documentation&lt;/h2&gt;&apos; +
                &apos;&lt;ul&gt;&apos; +
                &apos;  &lt;li&gt;&lt;a style=&quot;font-size: 16px&quot; href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide+-+build+cENM+SG+pipeline+based+on+particular+ENM+Product+Set+version&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;User Guide&lt;/a&gt;&lt;/li&gt;&apos; +
                &apos;&lt;/ul&gt;&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
           stringParam(&quot;product_set_version&quot;, &quot;&quot;, &quot;Enter the product set version (e.g. 20.11.52).Please ensure to give latest product set version compared to last built product set.&quot;)
        }
        definition {
            cps {
                sandbox()
                script(e2e_steps)
            }      
        }
    }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.40">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>