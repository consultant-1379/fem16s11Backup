<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>@Library('ci-pipeline-lib') _
build_sg_list.init_sg_list()

pipeline {
    agent { node { label 'Cloud-Native' } }
    options {
        timestamps()
    }
    stages{
        stage("get enm iso"){
            steps{
                script{
                    //echo "${list_of_proj}"
                    echo sh(script: 'env', returnStdout:true)
                    //sh 'ls -la ../050-shared-library-where-is-it-cloned@libs/jenkins-shared-library'
                }
            }
        }
        stage("build os"){
            parallel {
                stage("build sles"){
                    steps{
                        script {
                            echo "hi"
                            sleep 2
                        }
                    }
                }
                stage("build rhel"){
                    steps{
                        script {
                            echo "hello"
                            sleep 2
                        }
                    }
                }
            }
        }
        stage("sync point"){
            steps {
                script {
                    environment_list = [[$class:'StringParameterValue', name:"ISO_VERSION", value:"1.1.1"]]
                    echo "$environment_list"
                }
            }
        }
        stage("build SG"){
			steps{
				script{
					def builds = [:]
					for (def proj in list_of_projs) {
						def service_group_build = "${proj}"
						builds["${service_group_build}"] = {
							stage("Build ${service_group_build}"){
								retry(1) {
									def image_tag_name = (service_group_build.replaceAll("-", "_") + "_IMAGE_TAG").toUpperCase()
									def build = build(job: "${service_group_build}", propagate: true, wait: true, parameters: environment_list)
									env."$image_tag_name" = "$build.buildVariables.PRODUCT_SET"
									echo "PRODUCT_SET: $image_tag_name"
								}
							}
						}
					}
					parallel builds
					echo sh(script: 'env', returnStdout:true)
				}
			}
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>