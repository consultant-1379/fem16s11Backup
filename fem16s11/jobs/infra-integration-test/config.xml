<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline infra-integration - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>PRODUCT_SET</name>
          <description/>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JENKINS_URL</name>
          <description>Give jenkins fem server. E.g.: https://fem16s11-eiffel004.lmera.ericsson.se:8443</description>
          <defaultValue>https://fem16s11-eiffel004.lmera.ericsson.se:8443</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_REPO_TOKEN</name>
          <description>Authentication token of the repo</description>
          <defaultValue>AKCp5dLCa6aGHsyeVbGmvchKEkohiHZDrqRJsq6ZJh2zkaVuz3wniNLJpynMtzZwDQLb5AjxZ</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'
def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .envVars([ISO_VERSION: '${ISO_VERSION}',PRODUCT_SET:'${PRODUCT_SET}'])
         .needDockerSocket(true)
         .toString()

def GIT_COMMITTER_NAME = 'lciadm100'
def GIT_COMMITTER_EMAIL = 'lciadm100@ericsson.com'
def failedStage = ''

pipeline {
    agent {
        label 'Cloud-Native'
    }
    stages {
       stage ('Clean workspace') {
          steps {
            deleteDir()
         }
       }
        stage('Checkout Cloud-Native eric-enm-infra-integration Git Repository'){
         steps {
             git branch: 'master',
                     url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-infra-integration'
         }
        }
         stage('Get Chart Versions') {
               steps {
                  script{
                   withCredentials([
                      usernamePassword(credentialsId: 'cenmbuild_api_token', usernameVariable: 'JENKINS_USER_NAME', passwordVariable: 'JENKINS_API_TOKEN')]) {
                       def bobwithpublish = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['JENKINS_USER_NAME': env.JENKINS_USER_NAME,
                                      'JENKINS_API_TOKEN': env.JENKINS_API_TOKEN,
                                      'JENKINS_URL': env.JENKINS_URL,
                            ])
                            .toString()
                       sh "${bobwithpublish} get-chart-versions"
                   }
                }
               }
           }
       stage('Update Charts'){
         steps {
              sh '''
                    while read line;
                    do
                       CHART_NAME=$(echo $line | cut -d"=" -f1); CHART_VERSION=$(echo $line | cut -d"=" -f2);
                       docker run --init --rm --workdir $(pwd) -v $(pwd):$(pwd) -v /var/run/docker.sock:/var/run/docker.sock armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-int-helm-chart-auto ihc-update -f chart/eric-enm-infra-integration/ -n $CHART_NAME -v $CHART_VERSION;
                    done &lt; chart_versions_file
                 '''
         }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
       }
        stage('Lint Helm'){
         steps {
             sh "${bob} lint-helm"
         }
        }
        stage('ADP Helm Design Rule Check') {
          steps {
             sh "${bob} test-helm || true"
             archiveArtifacts 'design-rule-check-report.*'
          }
        }
        stage('Update versions in Chart.yaml and values.yaml file'){
            steps{
                echo sh(script: 'env', returnStdout:true)
                step ([$class: 'CopyArtifact', projectName: 'sync-build-trigger', filter: "*"]);
                sh "${bob} swap-latest-versions-with-numbers"
                sh '''
                    if git status | grep 'Chart.yaml\\|values.yaml' &gt; /dev/null; then
                        git commit -m "NO JIRA - Updating Values.yaml and Chart.yaml files with version"
                    fi
                '''
            }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
        }
        stage('Generate New Version') {
         steps {
             sh "${bob} generate-new-version"
          }
          post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
         }
         stage('Build Chart') {
               steps {
                  script{
                   withCredentials([
                      usernamePassword(credentialsId: 'cenmbuild', usernameVariable: 'HELM_USER', passwordVariable: 'HELM_TOKEN')]) {
                       def bobwithbuild = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['HELM_USER': env.HELM_USER,
                                      'HELM_TOKEN': env.HELM_TOKEN,
                            ])
                            .toString()
                       sh "${bobwithbuild} build-helm"
                   }
                 }
               }
             post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
             }
     }
     
   }      
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}



</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>