<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
  </actions>
  <description>ENM Cloud Native SVU pipeline eric-cenm-sprint-version-update - autogenerated using JobDSL - all manual changes will be overwritten!This is a Sprint Version Update job for cENM repos to be run at the end of every sprints.This job creates a branch from the given branch/tag (master by default) in the name of the current sprint number (eg print_20.11) and increments the patch version contained in the VERSION_PREFIX. Further, this job also incements the minor version in the master.&lt;h2&gt;Documentation&lt;/h2&gt;&lt;ul&gt;  &lt;li&gt;&lt;a style="font-size: 16px" href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CI/User+Guide%3A+Sprint+Version+Update+Job" target="_blank" rel="noopener noreferrer"&gt;User Guide&lt;/a&gt;&lt;/li&gt;  &lt;li&gt;&lt;a style="font-size: 16px" href="https://confluence-oss.seli.wh.rnd.internal.ericsson.com/pages/viewpage.action?pageId=374880120" target="_blank" rel="noopener noreferrer"&gt;Admin Guide&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SLAVE</name>
          <description/>
          <defaultValue>Cloud-Native-Pointfix</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CURRENT_SPRINT</name>
          <description>Enter current sprint number Eg: 21.04</description>
          <defaultValue>21.04</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CHECKOUT_TAG</name>
          <description>This is the reference tag based on which pointfix branch would be created. Use refs/tags/[Current Sprint Number] to pick up the latest release. Eg:  refs/tags/21.04.</description>
          <defaultValue>refs/tags/21.04</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EMAIL</name>
          <description/>
          <defaultValue>spandana.palvoy@tcs.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUSH_COMMIT</name>
          <description/>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>import groovy.json.JsonSlurper;
 
def jsonSlurper = new JsonSlurper()
 
File project_file = new File(WORKSPACE + "/workspace/" + JOB_NAME + '/project_file.json') 
def project_file_parsed = jsonSlurper.parse(project_file)

project_file_parsed.each { entry -&gt;
    project_details_map = [:]
    entry.each { key,value -&gt;
        project_details_map[key] = value
    }
    if (project_details_map["skip_PCR_DSL"] == "False") {
        if (project_details_map["project_type"] == "MODEL" || project_details_map["project_type"] == "NON_ISO" || project_details_map["project_type"] == "EXEMPTION" || project_details_map["project_type"] == "BASE_IMAGE" || project_details_map["project_type"] == "SERVICE_GROUP" || project_details_map["project_type"] == "CSAR") {
            callCreatePointFixBranchfunction(project_details_map["repo"],project_details_map["project_type"])
        } else {
            callCreatePointFixBranchfunction(project_details_map["repo"], project_details_map["project_type"], project_details_map["jenkinsfile_pcr"])
        }
    }else {
        if ( project_details_map["project_type"] == "SYNC" ) {
            createPointFixBranchNoTag(project_details_map["repo"],project_details_map["project_type"])
	}
}
}

parameters {
    string(name: 'SLAVE', defaultValue: "Cloud-Native-Pointfix")
	string(name: 'CURRENT_SPRINT', description: 'Enter current sprint number Eg: 21.01',defaultValue: "21.01")
    string(name: 'CHECKOUT_TAG', description: 'This is the reference tag based on which pointfix branch would be created. Use refs/tags/SPRINT_[Current Sprint Number] to pick up the latest release. Eg:  refs/tags/SPRINT_20.14.', defaultValue: "*/master")
    string(name: 'EMAIL', defaultValue: "")
    booleanParam(name: 'PUSH_COMMIT', defaultValue: false)
}

pipeline {
    agent { label SLAVE }
    stages {
        stage('Init') {
            steps {
                script {
                    sh '''
                        running=$(docker ps -a -q| wc -l)
                        if [ "$running" -gt "0" ];then
                            echo "Killing containers"
                            docker rm -f $(docker ps -a -q)
                        fi
                    '''
                    createCsv()
                }
            }
        }
        stage('Update Image Versions') {
         steps {
                script {
                    callCreatePointFixBranchfunction(repo,project_type)
                }
            }
        }
		
        stage('Update CSAR Versions') {
         steps {
                script {
                    callCreatePointFixBranchfunction(repo, 'CSAR')
                }
            }
        }
        stage('Update Sync Repos') {
         steps {
                script {
                    createPointFixBranchNoTag(repo, 'Sync')
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts artifacts: 'report.csv', allowEmptyArchive: true
            emailext attachmentsPattern: 'report.csv', body: 'cENM Sprint Version Update Completed, See attached file for detailed results.', subject: 'cENM Sprint Version Update Completed', to: EMAIL
            sh '''
                #clean workspace
                echo Workspace ${WORKSPACE}
                sudo rm -rf ${WORKSPACE}/*
            '''
        }
        }
    }


def createCsv() {
    outString = 'Repository,Repo Type,Old Version,New Version,Pointfix Branch Version,Updated,Status\r\n'
    writeFile file: 'report.csv', text: outString
}

def callCreatePointFixBranchfunction(repo, project_type) {
    jobStatusSuccess = true
    status = "ERROR"
    updated = "FALSE"
    oldVersion = ""
    newVersion = ""
    repo.each { item -&gt;
        def b = build(job: 'eric-cenm-create-pointfix-branch', parameters: [[$class:'StringParameterValue', name:'REPO', value:String.valueOf("${item}")],[$class:'StringParameterValue', name:'CURRENT_SPRINT', value:String.valueOf("${params.CURRENT_SPRINT}")],[$class:'StringParameterValue', name:'CHECKOUT_TAG', value:String.valueOf("${params.CHECKOUT_TAG}")],[$class:'StringParameterValue', name:'EMAIL', value:String.valueOf("${params.EMAIL}")],[$class:'BooleanParameterValue', name:'PUSH_COMMIT', value: "${params.PUSH_COMMIT}"]], propagate: false, wait: true)

        currentBuild.description = "Sprint Version Update Branch: $b.buildVariables.BRANCH_NAME&lt;BR&gt;"
        currentBuild.description += "Branch based on tag/branch: CHECKOUT_TAG"
        echo "Repo = ${item}, Result = $b.result"
        if("$b.result" == 'SUCCESS') {
            status = "OK"
            jobStatusSuccess = jobStatusSuccess &amp;&amp; true
        } else {
            status = "ERROR"
            jobStatusSuccess = jobStatusSuccess &amp;&amp; false
        }

        readContent = readFile 'report.csv'
        outString = readContent + "${item},$project_type,$b.buildVariables.oldMinorVersion,$b.buildVariables.newMinorVersion,$b.buildVariables.newVersion,$b.buildVariables.updated,$status\r\n"
        writeFile file: 'report.csv', text: outString
         if(!jobStatusSuccess) {
            currentBuild.result = "UNSTABLE"
        }
    }
}

def createPointFixBranchNoTag(repo, project_type) {
    jobStatusSuccess = true
    status = "ERROR"
    updated = "FALSE"
    repo.each { item -&gt;
        def b = build(job: 'eric-cenm-create-pointfix-branch-no-tag', parameters: [[$class:'StringParameterValue', name:'REPO', value:String.valueOf("${item}")],[$class:'StringParameterValue', name:'CURRENT_SPRINT', value:String.valueOf("${params.CURRENT_SPRINT}")],[$class:'BooleanParameterValue', name:'PUSH_COMMIT', value: "${params.PUSH_COMMIT}"],[$class:'StringParameterValue', name:'EMAIL', value:String.valueOf("${params.EMAIL}")]], propagate: false, wait: true)
        currentBuild.description = "Sprint Version Update Branch: $b.buildVariables.BRANCH_NAME&lt;BR&gt;"
        currentBuild.description += "Branch based on tag/branch: CHECKOUT_TAG"
        echo "Repo = ${item}, Result = $b.result"
        if("$b.result" == 'SUCCESS') {
            status = "OK"
            jobStatusSuccess = jobStatusSuccess &amp;&amp; true
        } else {
            status = "ERROR"
            jobStatusSuccess = jobStatusSuccess &amp;&amp; false
        }

        readContent = readFile 'report.csv'
        outString = readContent + "${item},$project_type,'NA','NA','NA',$b.buildVariables.updated,$status\r\n"
        writeFile file: 'report.csv', text: outString
         if(!jobStatusSuccess) {
            currentBuild.result = "UNSTABLE"

        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>