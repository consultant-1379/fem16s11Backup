<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.7"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.10.3">
          <name>SLAVE</name>
          <defaultValue>Jenkins_Trojan_CSAR_Slave_8</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.10.3">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://gerritmirror-ha.lmera.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code</url>
        <credentialsId>lciadm100_private_key</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>djobssdsl</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <gitTool>Default</gitTool>
    <submoduleCfg class="empty-list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.78.3">
      <targets>Jenkins/JobDSL/JobDSL_Testjobs.groovy</targets>
      <scriptText>import java.io.File

String pipeline_name
String projectsCommonFile = readFileFromWorkspace(&apos;Jenkins/DSL_Jobs&apos;)
projectsCommonFile.eachLine {
    project_name -&gt; createPipelineBuildJob(project_name)
}

def createPipelineBuildJob(project_name) {
    pipelineJob(project_name) {
        description (&apos;ENM Cloud Native Upgrade Build pipeline &apos; + project_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        //concurrentBuild(allowConcurrentBuild = true)
        logRotator {
            numToKeep(100)
        }
        parameters {
            choiceParam(&apos;Artifact_type&apos;,[&apos;csar_lite&apos;,&apos;csar&apos;,&apos;snap_shot_csar_lite&apos;],&apos;This parameter acts as the flow controller to select the deployment mechanism either csar or csar-lite.&apos;)
	    choiceParam(&apos;use_case&apos;,[&apos;Install&apos;,&apos;Upgrade&apos;,&apos;Backup&apos;,&apos;Rollback&apos;,&apos;Restore&apos;],&apos;Select the appropriate operation to be done.&apos;)
	    stringParam(&apos;product_set_version&apos;, &apos;&apos;,&apos;Provide clould native product set version&apos;)
	    choiceParam(&apos;deployment_size&apos;,[&apos;small-production&apos;,&apos;extra-large-production&apos;,&apos;single-instance&apos;,&apos;multi-instance&apos;],&apos;Select the type of integration values type to be used.&apos;)
	    choiceParam(&apos;orchestration_type&apos;,[&apos;helm&apos;,&apos;EVNFM&apos;],&apos;Provide the orchestration type with which deployment should be happen.&apos;)
	    choiceParam(&apos;container_registry_type&apos;,[&apos;other&apos;,&apos;EVNFM&apos;],&apos;Select docker registry which is to be used while the deployment time, when orchestration_type is EVNFM is selected. By default other docker registry will be used.&apos;)
	    stringParam(&apos;snapshot_csar_lite_location&apos;, &apos;&apos;,&apos;Provide the location of the snapshot_csar_lite_location&apos;)
	    stringParam(&apos;snapshot_integration_key_value_pairs&apos;, &apos;&apos;,&apos;Provide the snapshot integration key value pairs to override&apos;)
	    stringParam(&apos;backup_name&apos;, &apos;&apos;,&apos;Provide the backup name only when use_case is selected as Backup/Rollback/Restore&apos;)
	    choiceParam(&apos;scope&apos;,[&apos;ROLLBACK&apos;,&apos;DEFAULT&apos;],&apos;This parameter needs to be passed when use_csae is selected as Backup.&apos;)
	    stringParam(&apos;environment_name&apos;, &apos;&apos;,&apos;The cluster in which the deployment needs to be done&apos;)
	    //stringParam(&apos;slave&apos;, &apos;&apos;,&apos;Provide the slave on which the jenkins job should run&apos;)
            labelParam(&apos;slave&apos;) {
               defaultValue(&quot;${SLAVE}&quot;)
               description(&apos;&apos;)
            }
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch(&apos;djobssdsl&apos;)
                        remote {
                            credentials(&apos;lciadm100_private_key&apos;)
                            url(&quot;${GERRIT_MIRROR}/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code&quot;)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath(&quot;Jenkins/Jenkinsfile/JenkinsfileInstall&quot;)
                lightweight(lightweight = true)
            }
        }
    }
}</scriptText>
      <usingScriptText>false</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>DELETE</removedJobAction>
      <removedViewAction>DELETE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>