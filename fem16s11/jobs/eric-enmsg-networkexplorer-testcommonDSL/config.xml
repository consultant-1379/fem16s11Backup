<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions/>
  <description>ENM Cloud Native Build pipeline eric-enmsg-networkexplorer-testcommonDSL - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>30</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.containerisation/eric-enmsg-networkexplorer
CHART_DIR=eric-enmsg-networkexplorer</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
      <contributors/>
    </EnvInjectJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *  + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
        .needDockerSocket(true)
        .toString()
def GIT_COMMITTER_NAME = &apos;lciadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;lciadm100@ericsson.com&apos;
def failedStage = &apos;&apos;

def emailReport() {
    def mail_list = [&quot;eric-enmsg-access-control&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-amos&quot;:&quot;PDLENMOUTS@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-auto-id-solr&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;Â eric-enmsg-autoid-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-autoprovisioning&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-cellserv&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;Â eric-enmsg-cmevents&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-cmutilities&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-com-ecim-mscm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-comecimpolicy&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-dc-history&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-domain-proxy-coordinator&quot;:&quot;eric-enmsg-domain-proxy-coordinator&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-dlms&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-dpmediation&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-eventbasedclient&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-flowautomation&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-fls&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-fm-alarm-processing&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-fm-history&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-fm-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-general-scripting&quot;:&quot;PDLENMOUTS@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-gossiprouter-cache&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-gossiprouter-remoting&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-identity-mgmt-service&quot;:&quot;PDLAPOLLO1@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-import-export-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-ip-service-management&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-jmsserver&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-kpi-calc-serv&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-kpi-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-lcmservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;ric-enmsg-medrouter&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msap&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msapgfm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mscm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mscmapg&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mscmip&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msfm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mskpirt&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-msnetlog&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mspm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mspmip&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mssnmpcm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-mssnmpfm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nb-alarm-irp-agent-corba&quot;:&quot;EricssonHyderabad.ENMGalaxy@tcs.com&quot;,&quot;eric-enmsg-nb-fm-snmp&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nbi-bnsi-fm&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nedo-serv&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-node-plugins&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-nodecli&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-openidm&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-pki-ra-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-pmic-router-policy&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-pmservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-sa-service&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-security-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-sentinel&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-shm-core-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-shmservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-smrs-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-sps-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-sso&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-supervisionclient&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enm-troubleshooting-utils&quot;:&quot;PDLTORDEPL@pdl.internal.ericsson.com&quot;,&quot;Â eric-enmsg-uiservice&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-visinaming-nb&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-visinaming-sb&quot;:&quot;EricssonHyderabad.ENMMisty@tcs.com&quot;,&quot;eric-enmsg-vault-service&quot;:&quot;PDLNMFEATU@pdl.internal.ericsson.com&quot;,&quot;eric-enmsg-web-push-service&quot;:&quot;PDLTEAMTOT@pdl.internal.ericsson.com&quot;]
        mail_list.each { each_repo,each_email -&gt;
            if (each_repo == env.REPO.split(&apos;/&apos;).last()) {
                def Repo_Mail = each_email;
                try {
                    mail to: &quot;${Repo_Mail}&quot;,
                    subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                    body: &quot;Failure on ${env.BUILD_URL}&quot;
                } catch( err ){
                     echo &quot;$err&quot;
                }
            }
        };
}

pipeline {
    agent {
        label &apos;Cloud-Native&apos;
    }
    parameters {
        string(name: &apos;ISO_VERSION&apos;, description: &apos;The ENM ISO version (e.g. 1.65.77)&apos;)
        string(name: &apos;SPRINT_TAG&apos;, description: &apos;Tag for GIT tagging the repository after build&apos;)
    }
    stages {
        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
        stage(&apos;Checkout Cloud-Native SG Git Repository&apos;) {
            steps {
                git branch: &apos;master&apos;,
                     credentialsId: &apos;lciadm100_private_key&apos;,
                     url: &apos;${GERRIT_MIRROR}/&apos;+env.REPO
                sh &apos;&apos;&apos;
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                &apos;&apos;&apos;
            }
        }
        stage(&apos;Checkout SG RPM Git Repository&apos;) {
            steps {
                script {
                    if (env.REPO.split(&apos;/&apos;).last() == &quot;eric-enmsg-auto-id-solr&quot; || env.REPO.split(&apos;/&apos;).last() == &quot;eric-enmsg-amos&quot; || env.REPO.split(&apos;/&apos;).last() == &quot;eric-enmsg-general-scripting&quot;) {
                        sgcontainer_repo = &quot;${REPO}&quot;.split(&apos;enmsg-&apos;).last()
                        dir(&quot;${sgcontainer_repo}&quot;) {
                            git branch: &apos;master&apos;,
                                credentialsId: &apos;lciadm100_private_key&apos;,
                                url: &apos;${GERRIT_MIRROR}/&apos;+&apos;OSS/com.ericsson.oss.servicegroupcontainers/&apos;+&quot;${sgcontainer_repo}&quot;
                        }
                     }
                }
            }
        }
     }
     post {
        failure {
            script {
                emailReport()
            }
        }
    }
}
// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>