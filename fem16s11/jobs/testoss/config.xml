<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.8">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@2.2.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl@1.78.3">
      <scriptText>project_name = &quot;OSS/com.ericsson.oss.containerisation/eric-enmsg-archtest&quot;
createPipelineBuildJobCommon(project_name)
def createPipelineBuildJobModel(project_name) {
    pipeline_name = project_name.split(&apos;/&apos;).last()
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
            stringParam(&apos;ISO_VERSION&apos;)
        }
        logRotator {
            numToKeep(30)
        }
        definition {
            cpsScm {
                scm {
                    git {
                        branch(&apos;master&apos;)
                        remote {
                            credentials(&apos;lciadm100_private_key&apos;)
                            url(&quot;${GERRIT_MIRROR}/&quot; + project_name)
                        }
                        extensions {
                             cleanBeforeCheckout()
                        }
                    }
                }
                scriptPath(&quot;Jenkinsfile&quot;)
            }
        }
   }
}
def createPipelineBuildJobCommon(project_name) {
    project_name = project_name.replaceAll(&quot;\\s&quot;,&quot;&quot;) // remove empty spaces
    chart_dir = project_name.split(&apos;/&apos;).last()
    pipeline_name = project_name.split(&apos;/&apos;).last()
    if (pipeline_name == &quot;eric-enmsg-archtest&quot;) {
        createPipelineBuildJobModel(project_name)
        return &quot;not required&quot;
    }
    if (pipeline_name == &quot;eric-enmsg-lucatest&quot;) {
        jenkins_file = &apos;jenkins/jobDSL/common_jenkinsfile_sg_nodepup_nomerge&apos;
    } else if (pipeline_name == &quot;eric-enmsg-lucatest2&quot;) {
        jenkins_file = &apos;jenkins/jobDSL/common_jenkinsfile_sg_nomerge&apos;
    } else {
        jenkins_file = &apos;jenkins/jobDSL/common_jenkinsfile_sg&apos;
    }
    createPipelineBuildJobCommonSG(project_name,pipeline_name,jenkins_file)
}

def createPipelineBuildJobCommonSG(project_name,pipeline_name,jenkins_file) {
    pipelineJob(pipeline_name) {
        description (&apos;ENM Cloud Native Build pipeline &apos; + pipeline_name + &apos; - autogenerated using JobDSL - all manual changes will be overwritten!&apos;)
        concurrentBuild(allowConcurrentBuild = false)
        parameters {
            stringParam(&apos;ISO_VERSION&apos;)
        }
        logRotator {
            numToKeep(30)
        }
        environmentVariables {
            env(&apos;REPO&apos;, project_name)
            env(&apos;CHART_DIR&apos;, chart_dir)
        }
        definition {
            cps {
                script(readFileFromWorkspace(jenkins_file))
                sandbox(true)
            }
        }
   }
}</scriptText>
      <usingScriptText>true</usingScriptText>
      <sandbox>false</sandbox>
      <ignoreExisting>false</ignoreExisting>
      <ignoreMissingFiles>false</ignoreMissingFiles>
      <failOnMissingPlugin>false</failOnMissingPlugin>
      <failOnSeedCollision>false</failOnSeedCollision>
      <unstableOnDeprecation>false</unstableOnDeprecation>
      <removedJobAction>IGNORE</removedJobAction>
      <removedViewAction>IGNORE</removedViewAction>
      <removedConfigFilesAction>IGNORE</removedConfigFilesAction>
      <lookupStrategy>JENKINS_ROOT</lookupStrategy>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
  <publishers/>
  <buildWrappers/>
</project>