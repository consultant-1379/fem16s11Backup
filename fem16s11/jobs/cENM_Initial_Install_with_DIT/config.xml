<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Upgrade Build pipeline cENM_Initial_Install - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>deployment_mechanism</name>
          <description>This parameter acts as the flow controller to select the deployment mechanism either charts or csar.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>charts</string>
              <string>csar</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>environment_name</name>
          <description>The deployment name to run the job against</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>stage_area</name>
          <description>This parameter acts as the flow controller to download charts from internal area or release area</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ci_internal</string>
              <string>drop</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>product_set_version</name>
          <description>Provide Product set version to install</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>drop</name>
          <description>Provide the Sprint version to install</description>
          <defaultValue/>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.1">
          <name>integration_value_type</name>
          <description>Select the integration values file for Restoring cENM. NOTE: Integration values file should be selected same as the file that was used by the environment when taking backup. &lt;br&gt;&lt;br&gt;CSAR supports only eric-enm-integration-production-values and eric-enm-integration-extra-large-production-values.&lt;br&gt; If you choose deployment mechanism as CSAR please select the value as eric-enm-integration-production-values or eric-enm-integration-extra-large-production-values only.</description>
          <randomName>choice-parameter-22585426098037701</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.75">
              <script>List production_files = ["eric-enm-integration-production-values", "eric-enm-integration-extra-large-production-values"]
List supported_integration_files = ["eric-enm-integration-production-values", "eric-enm-integration-extra-large-production-values", "eric-enm-multi-instance-functional-integration-values", "eric-enm-single-instance-production-integration-values" , "eric-enm-integration-functional-test-values", "eric-enm-integration-openstack-core-values"]

if (deployment_mechanism == "csar") { return production_files }
else if (deployment_mechanism == "charts") { return supported_integration_files }</script>
              <sandbox>true</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.75">
              <script/>
              <sandbox>true</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>cENM_Initial_Install_with_DIT</projectName>
          <parameters class="linked-hash-map"/>
          <referencedParameters>deployment_mechanism</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>slave</name>
          <description/>
          <defaultValue>Jenkins_Upgrade_CSAR_Slave_4Node_MISTY_21</defaultValue>
          <allNodesMatchingLabel>false</allNodesMatchingLabel>
          <triggerIfResult>allCases</triggerIfResult>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.LabelParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>def commonMethods

pipeline{
    agent {
            node
            {
               label slave
            }
        }
    options {
        timeout(time: 11, unit: 'HOURS')
    }
    environment {
        HOME_DIR = "${WORKSPACE}"
        cenm_utilities_docker_image = "armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest"
        nexus_repositoryUrl = "https://arm902-eiffel004.athtem.eei.ericsson.se:8443/nexus/content/repositories/releases/"
        helm_repository_release = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-helm/"
        helm_repository_ci_internal = "https://arm.seli.gic.ericsson.se/artifactory/proj-enm-dev-internal-helm/"
        csar_package_name = "enm-installation-package"
    }
    stages{
        stage('Clean Up WorkSpace'){
                steps{
                        deleteDir()
                     }
        }
        stage('Checkout Integration Pipeline Git Repository') {
            steps {
                git branch: 'dTORF-514064',
                        url: 'ssh://gerrit.ericsson.se:29418/OSS/com.ericsson.oss.containerisation/eric-enm-integration-pipeline-code'
            }
        }
        stage('Load common methods') {
            steps {
                script {
                    commonMethods = load("${env.WORKSPACE}/Jenkins/JobDSL/CommonMethods.groovy")
                }
            }
        }
        stage('Delete docker image') {
            steps {
                script {
                    commonMethods.delete_build_utilities_image()
                }
            }
        }
        stage('Pull docker image') {
            steps {
                script {
                    sh "docker pull ${cenm_utilities_docker_image}"
                }
            }
        }
        stage( 'setup_kubeconfig_file_for_cluster' ) {
            steps {
                script{
                      commonMethods.extract_jq()
                      commonMethods.download_kube_config_file_from_dit()
                      commonMethods.read_site_config_info_from_dit()
                      commonMethods.set_kube_config_file()
                      commonMethods.get_cn_build_version_info()
               }
            }
        }
        stage('Clean CSAR folder in client machine'){
            when {
                allOf{
                    environment name: 'deployment_mechanism', value: 'csar'
                    expression{env.CLIENT_MACHINE_TYPE  =='client_machine'}
                   }
             }
              steps{
                  script{
                      sh '''
                         ssh -o 'LogLevel=error' -o 'StrictHostKeyChecking no' ${CLIENT_MACHINE_USERNAME}@${CLIENT_MACHINE_IP_ADDRESS}  'sudo rm -rf /local/installation/*'
                        '''
                        }
                    }
             }
        stage( 'Login docker registry' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     expression{env.CONTAINER_REGISTRY_USERNAME != ''}
                     expression{env.CONTAINER_REGISTRY_PASSWORD != ''}
                 }
            }
            steps {
               script{
                    if(env.CLIENT_MACHINE_TYPE  !='client_machine'){
                         commonMethods.create_docker_secret()
                        }
                    else{
                         commonMethods.client_create_docker_secret()
                       }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from nexus area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
              script{
                retry(3){
                      if(env.CLIENT_MACHINE_TYPE  !='client_machine'){
                           commonMethods.download_csar_package_nexus()
                             }
                      else{
                           commonMethods.client_download_csar_package_nexus()
                        }
                }
              }
            }
        }
        stage( 'Download CSAR PACKAGE from release area' ) {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'csar'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
               script{
                retry(3){
                      if(env.CLIENT_MACHINE_TYPE  !='client_machine'){
                           commonMethods.download_csar_package_release()
                           }
                      else{
                           commonMethods.client_download_csar_package_release()
                        }
                }
               }
            }
        }
        stage('Extract csar package') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps {
                script {
                        if(env.CLIENT_MACHINE_TYPE  !='client_machine'){
                             commonMethods.extract_csar_package()
                             commonMethods.get_integration_charts_version()
                            }
                        else{
                             commonMethods.client_extract_csar_package()
                             commonMethods.client_get_integration_charts_version()
                        }
                }
            }
        }
        stage('Perform Load/Retag/Push') {
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
             }
            steps {
                script {
                       if(env.CLIENT_MACHINE_TYPE  !='client_machine'){
                            commonMethods.csar_utils()
                             }
                       else{
                            commonMethods.client_csar_utils()
                            }
                }
            }
        }
        stage('Download Charts from CI Internal') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'ci_internal'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_ci_internal()
                }
            }
        }
        stage('Download Charts from Release area') {
            when {
                 allOf {
                     environment name: 'deployment_mechanism', value: 'charts'
                     environment name: 'stage_area', value: 'drop'
                 }
            }
            steps {
                script {
                   commonMethods.csar_pre_config_setup()
                   commonMethods.download_charts_release_area()
                }
            }
        }
        stage('Updating integration values'){
            steps{
                script{
                       if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                               commonMethods.client_integrationvaluepath()
                               commonMethods.updateIntegrationValues()
                               commonMethods.client_pushfile()
                          }
                       else{
                             commonMethods.get_integration_charts_path()
                             commonMethods.updateIntegrationValues()
                          }
                }
            }
        }
        stage('cENM CSAR Deployment Delete'){
            when {
                 environment name: 'deployment_mechanism', value: 'csar'
            }
            steps{
                script{
                       if(env.CLIENT_MACHINE_TYPE  !='client_machine'){
                            sh '''
                                export KUBECONFIG=${PWD}/.kube/${KUBE_CRED}
                                ${cenm_build_utilities_docker_image} bash -x ${WORKSPACE}/cENM/Scripts/cenm_uninstall.sh --cenm-name-space=${NAMESPACE} --helm=${HELM_BINARY}
                                  '''
                              }
                       else{
                            sh " ssh -o 'LogLevel=error' -o 'StrictHostKeyChecking no'  ${CLIENT_MACHINE_USERNAME}@${CLIENT_MACHINE_IP_ADDRESS} 'export KUBECONFIG=/home/cenmbuild/conf/${KUBE_CRED} &amp;&amp; bash /local/installation/Scripts/cenm_uninstall.sh --cenm-name-space=${NAMESPACE} --helm=${HELM_BINARY}'"						     
                            }
                }
            }
        }
        stage('cENM Install'){
             stages {
                   stage('Install cENM BRO chart'){
                    when {
                         expression{env.bro_chart_version != ''}
                    }
                    steps{
                      script{
                           commonMethods.start_time_deployment()
                           if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                                  commonMethods.client_bro_integration_chart("install","300s")
                                 }
                           else{
                               commonMethods.bro_integration_chart("install","600s")
                        }
                     }
                     }
                   }
                   stage('Install cENM Monitoring chart'){
                    when {
                         expression{env.monitoring_chart_version != ''}
                    }
                     steps{
                       script{
                          if (commonMethods.check_version_a_newer_than_version_b("${env.product_set_version}","21.03.57")){
                                 if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                                    commonMethods.client_monitoring_integration_chart("install","900s")
                                     }
                                 else{
                                     commonMethods.monitoring_integration_chart("install","1500s")
                                }
                            }
                          else {
                             echo "Stage-Install cENM Monitoring chart is skipped due to old cENM PS version"
                          }
                       }
                    }
                   }
                   stage('Install cENM Pre Deploy chart'){
                    when {
                         expression{env.pre_deploy_chart_version != ''}
                    }
                    steps{
                       script{
                                if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                                   commonMethods.client_pre_deploy_integration_chart("install","500s")
                                  }
                                else{
                                   commonMethods.pre_deploy_integration_chart("install","1500s")
                              }
                       }
                    }
                   }
                   stage('Install cENM Infra chart'){
                    when {
                           expression{env.infra_chart_version != ''}
                      }
                     steps{
                       script{
                              if ((env.CLIENT_MACHINE_TYPE !='client_machine' &amp;&amp; env.deployment_mechanism =='charts') || (env.CLIENT_MACHINE_TYPE !='client_machine' &amp;&amp; env.deployment_mechanism =='csar') || (env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='charts')){
                                 commonMethods.infra_integration_chart("install","6h")
                          }
                       }
                    }
                   }
                   stage('Install Client cENM Infra chart'){
                     when {
                        allOf {
                               environment name: 'deployment_mechanism', value: 'csar'
                               environment name: 'CLIENT_MACHINE_TYPE', value: 'client_machine'
                                  }
                                }
                     steps{
                       script{
                                commonMethods.client_infra_integration_chart("install","6h")
                                sh "sleep 300s"
                                sh '''
                                     while [[ "$(ssh -o LogLevel=error -o 'StrictHostKeyChecking no' "${CLIENT_MACHINE_USERNAME}"@"${CLIENT_MACHINE_IP_ADDRESS}" 'export KUBECONFIG=/home/cenmbuild/conf/'\${KUBE_CRED}' &amp;&amp; helm list --all -n '\${NAMESPACE}'|grep eric-enm-infra-integration-'\${NAMESPACE}'')" != *"deployed"* ]];
                                     do
                                        if [[ "$(ssh -o LogLevel=error -o 'StrictHostKeyChecking no' "${CLIENT_MACHINE_USERNAME}"@"${CLIENT_MACHINE_IP_ADDRESS}" 'export KUBECONFIG=/home/cenmbuild/conf/'\${KUBE_CRED}' &amp;&amp; helm list --all -n '\${NAMESPACE}'|grep eric-enm-infra-integration-'\${NAMESPACE}'')" == *"failed"* ]]; then
                                           exit 1
                                        else
                                           logger "Waiting for infra to get to deployed ...";
                                           sleep 300s ;
                                        fi
                                     done
                                    '''
                              }
                    }
                    post {
                        always {
                            sh "scp -o 'LogLevel=error' -o 'StrictHostKeyChecking no' ${CLIENT_MACHINE_USERNAME }@${CLIENT_MACHINE_IP_ADDRESS}:/home/cenmbuild/infra_integration_chart_logs ${HOME_DIR}/"
                            sh "cat ${HOME_DIR}/infra_integration_chart_logs"
                            sh "ssh -o 'LogLevel=error' -o 'StrictHostKeyChecking no' ${CLIENT_MACHINE_USERNAME }@${CLIENT_MACHINE_IP_ADDRESS} 'rm -rf infra_integration_chart_logs' "
                              }
                         }
                   }
                   stage('Install cENM Stateless chart'){
                     when {
                                expression{env.stateless_chart_version != ''}
                    }
                    steps{
                       script{
                             if ((env.CLIENT_MACHINE_TYPE !='client_machine' &amp;&amp; env.deployment_mechanism =='charts') || (env.CLIENT_MACHINE_TYPE !='client_machine' &amp;&amp; env.deployment_mechanism =='csar') || (env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='charts')){
                             commonMethods.stateless_integration_chart("install","4h")
                               }
                             commonMethods.end_time_deployment()
                      }
                    }
                  }
                   stage('Install client cENM Stateless chart'){
                     when {
                        allOf {
                               environment name: 'deployment_mechanism', value: 'csar'
                               environment name: 'CLIENT_MACHINE_TYPE', value: 'client_machine'
                                  }
                                }
                    steps{
                       script{
                                commonMethods.client_stateless_integration_chart("install","2h")
                                sh "sleep 300s"
                                sh '''
                                     while [[ "$(ssh -o LogLevel=error -o 'StrictHostKeyChecking no' "${CLIENT_MACHINE_USERNAME}"@"${CLIENT_MACHINE_IP_ADDRESS}" 'export KUBECONFIG=/home/cenmbuild/conf/'\${KUBE_CRED}' &amp;&amp; helm list --all -n '\${NAMESPACE}'|grep eric-enm-stateless-integration-'\${NAMESPACE}'')" != *"deployed"* ]];
                                     do
                                         if [[ "$(ssh -o LogLevel=error -o 'StrictHostKeyChecking no' "${CLIENT_MACHINE_USERNAME}"@"${CLIENT_MACHINE_IP_ADDRESS}" 'export KUBECONFIG=/home/cenmbuild/conf/'\${KUBE_CRED}' &amp;&amp; helm list --all -n '\${NAMESPACE}'|grep eric-enm-stateless-integration-'\${NAMESPACE}'')" == *"failed"* ]]; then
                                            exit 1
                                         else
                                            logger "Waiting for stateless to get to deployed ...";
                                            sleep 300s ;
                                         fi
                                     done
                                    '''
                                commonMethods.end_time_deployment()
                      }
                    }
                    post {
                        always {
                                sh "scp -o 'LogLevel=error' -o 'StrictHostKeyChecking no' ${CLIENT_MACHINE_USERNAME }@${CLIENT_MACHINE_IP_ADDRESS}:/home/cenmbuild/stateless_integration_chart_logs ${HOME_DIR}/"
                                sh "cat ${HOME_DIR}/stateless_integration_chart_logs"
                                sh "ssh -o 'LogLevel=error' -o 'StrictHostKeyChecking no' ${CLIENT_MACHINE_USERNAME }@${CLIENT_MACHINE_IP_ADDRESS} 'rm -rf stateless_integration_chart_logs' "
                              }
                         }
                  }
                }
        }
        stage('cENM_PostInstall_steps'){
            steps{
                script{
                        if ((env.CLIENT_MACHINE_TYPE !='client_machine' &amp;&amp; env.deployment_mechanism =='charts') || (env.CLIENT_MACHINE_TYPE !='client_machine' &amp;&amp; env.deployment_mechanism =='csar') || (env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='charts')){
                            if (commonMethods.check_version_a_newer_than_version_b("${env.product_set_version}","21.03.25")){
                                echo "Stage cENM_PostInstall_steps skipped"
                               }
                            else {
                                commonMethods.update_eric_ingress_values_file()
                                commonMethods.post_install_steps()
                          }
                }
               }
            }
        }
        stage('Smoke test'){
            steps{
                script{
                       if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                         retry(5){
                                commonMethods.client_smokeTest()
                           }
                          }
                       else{
                          retry(5){
                             commonMethods.smokeTest()
                           }
                        }
                }
            }
        }
        stage('CheckPods Running'){
            steps{
                script{
                       if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                        retry(5){
                                 commonMethods.client_checkHealthyPods()
                            }
                        }
                       else{
                        retry(5){
                           commonMethods.checkHealthyPods()
                            }
                        }
                }
            }
        }
        stage('Generate artifact file'){
             steps{
                  script{
                        commonMethods.generate_artifact_file()
                        }
                  }
                }
    }
    post{
        failure {
            script{
                   echo "Failure"
                   if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                      def report = commonMethods.client_reportHeading("Failed")
                      report += commonMethods.client_printPods()
                      commonMethods.client_emailReport(report)
                     }
                   else{
                      def report = commonMethods.reportHeading("Failed")
                      report += commonMethods.printPods()
                      commonMethods.emailReport(report)
                    }
            }
        }
        aborted{
            script{
                echo "Aborted"
                if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                     def report = commonMethods.client_reportHeading("Aborted")
                     report += commonMethods.client_printPods()
                     commonMethods.client_emailReport(report)
                     }
                else{
                     def report = commonMethods.reportHeading("Aborted")
                     report += commonMethods.printPods()
                     commonMethods.emailReport(report)
                    }
            }
        }
        success{
            script{
                  echo "Success"
                  if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                     def report = commonMethods.client_reportHeading("Success")
                     report +=commonMethods.client_printPods()
                     commonMethods.client_emailReport(report)
                    }
                  else{
                     def report = commonMethods.reportHeading("Success")
                     report +=commonMethods.printPods()
                     commonMethods.emailReport(report)
                    }
            }
        }
        always {
            script{
                currentBuild.displayName = "Install with ${deployment_mechanism} on: ${environment_name}"
                if(env.CLIENT_MACHINE_TYPE =='client_machine' &amp;&amp; env.deployment_mechanism =='csar'){
                     currentBuild.description = "&lt;b&gt;Bro Chart Version = ${bro_chart_version}&lt;br&gt;Monitoring chart version = ${monitoring_chart_version}&lt;br&gt;Pre Deploy Chart Version = ${pre_deploy_chart_version}&lt;br&gt;Infra Chart Version = ${infra_chart_version}&lt;br&gt;Stateless Chart Version = ${stateless_chart_version}&lt;br&gt;Integration Value Version = ${integration_value_version}&lt;/b&gt;"
                     sh("cat ${HOME_DIR}/${integration_values_file_path}")
                     archiveArtifacts "${integration_values_file_path}"
               }
                else{
                     currentBuild.description = "&lt;b&gt;Bro Chart Version = ${bro_chart_version}&lt;br&gt;Monitoring chart version = ${monitoring_chart_version}&lt;br&gt;Pre Deploy Chart Version = ${pre_deploy_chart_version}&lt;br&gt;Infra Chart Version = ${infra_chart_version}&lt;br&gt;Stateless Chart Version = ${stateless_chart_version}&lt;br&gt;Integration Value Version = ${integration_value_version}&lt;/b&gt;"
                     sh("cat ${HOME_DIR}/cENM/Scripts/${integration_values_file_path}")
                     archiveArtifacts "cENM/Scripts/${integration_values_file_path}"
                     }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>