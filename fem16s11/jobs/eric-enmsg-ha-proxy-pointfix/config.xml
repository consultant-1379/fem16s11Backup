<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>BRANCH</string>
        <string>ISO_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>ENM Cloud Native Build pipeline eric-enmsg-ha-proxy-pointfix - autogenerated using JobDSL - all manual changes will be overwritten!</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>30</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description>The ENM ISO version (e.g. 1.65.77)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>Branch to build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.containerisation/eric-enmsg-ha-proxy
CHART_DIR=eric-enmsg-ha-proxy</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
      <contributors/>
    </EnvInjectJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.2">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57.2">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
        .needDockerSocket(true)
        .toString()
def GIT_COMMITTER_NAME = &apos;lciadm100&apos;
def GIT_COMMITTER_EMAIL = &apos;lciadm100@ericsson.com&apos;
def failedStage = &apos;&apos;
pipeline {
    agent { label &apos;Cloud-Native-Pointfix&apos; }
    parameters {
        string(name: &apos;ISO_VERSION&apos;, description: &apos;The ENM ISO version (e.g. 1.65.77)&apos;)
        string(name: &apos;BRANCH&apos;, description: &apos;Branch to build&apos;)
    }
    stages {
        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
        stage(&apos;Checkout Cloud-Native SG Git Repository&apos;) {
            steps {
                git branch: env.BRANCH,
                        credentialsId: &apos;lciadm100_private_key&apos;,
                        url: &apos;ssh://gerrit.ericsson.se:29418/&apos;+env.REPO
            }
        }
        stage(&apos;Helm Lint&apos;) {
            steps {
                sh &quot;${bob} lint-helm&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Linting Dockerfile&apos;) {
            steps {
                sh &quot;${bob} lint-dockerfile&quot;
                archiveArtifacts &apos;*dockerfilelint.log&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;ADP Helm Design Rule Check&apos;) {
            steps {
                sh &quot;${bob} test-helm || true&quot;
                archiveArtifacts &apos;design-rule-check-report.*&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Swap versions in Dockerfile and values.yaml file&apos;){
            steps{
                echo sh(script: &apos;env&apos;, returnStdout:true)
                step ([$class: &apos;CopyArtifact&apos;, projectName: &apos;sync-build-trigger-pointfix&apos;, filter: &quot;*&quot;]);
                sh &quot;${bob} swap-latest-versions-with-numbers&quot;
                sh &apos;&apos;&apos;
                    if git status | grep &apos;Dockerfile\\|values.yaml&apos; &gt; /dev/null; then
                        git commit -m &quot;NO JIRA - Updating Dockerfile and Values.yaml files with base images version&quot;
                    fi
                &apos;&apos;&apos;
            }
        }
        stage(&apos;Build Image and Chart&apos;) {
            steps {
                sh &quot;${bob} generate-new-version build-helm build-image&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image&quot;
                    }
                }
            }
        }
        stage(&apos;Retrieve image version&apos;) {
            steps {
                script {
                    env.IMAGE_TAG = sh(script: &quot;cat .bob/var.version&quot;, returnStdout:true).trim()
                    echo &quot;${IMAGE_TAG}&quot;
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image&quot;
                    }
                }
            }
        }
        stage(&apos;Generate ADP Parameters&apos;) {
            steps {
                sh &quot;${bob} generate-output-parameters&quot;
                archiveArtifacts &apos;artifact.properties&apos;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage(&apos;Publish Images to Artifactory&apos;) {
            steps {
                sh &quot;${bob} push-image&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image&quot;
                    }
                }
                always {
                        sh &quot;${bob} remove-image&quot;
                }
            }
        }
        stage(&apos;Publish Helm Chart&apos;) {
            steps {
                script {
                    withCredentials([string(credentialsId: &apos;lciadm100&apos;, variable: &apos;HELM_REPO_TOKEN&apos;)]) {
                        def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([&apos;HELM_REPO_TOKEN&apos;: env.HELM_REPO_TOKEN])
                                .toString()
                        sh &quot;${bobWithHelmToken} push-helm&quot;
                    }
                }
            }
        }
        stage(&apos;Tag Cloud-Native SG Git Repository&apos;) {
            steps {
                wrap([$class: &apos;BuildUser&apos;]) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        &apos;AUTHOR_NAME&apos;        : &quot;\${BUILD_USER:-${GIT_COMMITTER_NAME}}&quot;,
                                        &apos;AUTHOR_EMAIL&apos;       : &quot;\${BUILD_USER_EMAIL:-${GIT_COMMITTER_EMAIL}}&quot;,
                                        &apos;GIT_COMMITTER_NAME&apos; : &quot;${GIT_COMMITTER_NAME}&quot;,
                                        &apos;GIT_COMMITTER_EMAIL&apos;: &quot;${GIT_COMMITTER_EMAIL}&quot;
                                ])
                                .toString()
                        sh &quot;${bobWithCommitterInfo} create-git-tag&quot;
                        sh &quot;&quot;&quot;
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        &quot;&quot;&quot;
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                always {
                    script {
                        sh &quot;${bob} remove-git-tag&quot;
                    }
                }
            }
        }
        stage(&apos;Bump Version&apos;) {
            steps {
                script {
                    sh &apos;hostname&apos;
                    Version = readFile &quot;VERSION_PREFIX&quot;
                    sh &apos;docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch&apos;
                    newVersion = readFile &quot;VERSION_PREFIX&quot;
                    env.IMAGE_VERSION = newVersion
                    currentBuild.displayName = &quot;${BUILD_NUMBER} - Version - &quot; + Version
                    sh &apos;&apos;&apos;
                        git add VERSION_PREFIX
                        git commit -m &quot;Version $IMAGE_VERSION&quot;
                        git push origin HEAD:${BRANCH}
                    &apos;&apos;&apos;
                }
            }
        }
        stage(&apos;Generate Metadata Parameters&apos;) {
            steps {
                sh &quot;${bob} generate-metadata-parameters&quot;
                archiveArtifacts &apos;image-metadata-artifact.json&apos;
            }
        }
    }
    post {
        success {
            script {
                sh &apos;&apos;&apos;
                    set +x

                &apos;&apos;&apos;
            }
        }

    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}

</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>