<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This job used to purge the docker images on GE slaves,&#xd;
Label: Docker-POC-e2e</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.2.1">
          <name>Select_Label</name>
          <randomName>choice-parameter-63761698933094686</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.78">
              <script>import jenkins.model.*
def labelAndNodeList = []

Jenkins.instance.nodes.each { node -&gt;
  node.assignedLabels.each { label -&gt;
    if (label as String != node.name) {
        if(label as String == &quot;Docker-POC&quot; || label as String == &quot;TEMP-Cloud-Native&quot;) {
            labelAndNodeList.add(label.toString().concat(&quot;:selected&quot;))
        }
        else {
            labelAndNodeList.add(label)
        }
    }      
  }
}

return labelAndNodeList</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.78">
              <script></script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>Slaves-ByLabel</projectName>
          <projectFullName>Slaves-ByLabel</projectFullName>
          <choiceType>PT_CHECKBOX</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>import hudson.model.*
import hudson.node_monitors.*
import hudson.slaves.*
import java.util.concurrent.*

jenkins = Hudson.instance

//def nodes = Jenkins.instance.getLabel(&apos;${Select_Label}&apos;).getNodes().collect{it.getNodeName()} 

String labelsIWantServersOf = &quot;${Select_Label}&quot; 
List serverList = [];

ArrayList aList= new ArrayList(Arrays.asList(labelsIWantServersOf.split(&quot;,&quot;)));
echo &quot;Selected Labels: &quot; + &quot;${Select_Label}&quot; 
echo &quot;\n----Online Slaves----&quot;
for (aSlave in hudson.model.Hudson.instance.slaves) {
  def slaveLabel = aSlave.getLabelString()   
  if(aList.contains(slaveLabel))
  {
     if(aSlave.getComputer().isOnline() ){
          echo aSlave.name;
          serverList.add(aSlave.name);        
     }      
  }
}
echo &quot;----Offline Slaves----&quot;
for (aSlave in hudson.model.Hudson.instance.slaves) {   
  def computer = aSlave.computer
  def slaveLabel = aSlave.getLabelString() 
  
  if(aList.contains(slaveLabel)) {
     if(aSlave.getComputer().isOffline() ){
          echo aSlave.name;
          if(aSlave.getComputer().isTemporarilyOffline())
          {
            println &quot;The Slave ${computer.name} is &quot; + aSlave.getComputer().getOfflineCause() + &quot;\nThis cannot be auto connected, please connect with user for the reason/relaunch&quot;;
          }
          
          if(!aSlave.getComputer().isTemporarilyOffline())
          {
            println &quot;The Slave ${computer.name} is &quot; + aSlave.getComputer().getOfflineCause() + &quot; and this was not TemporarilyOffline \nSo, we are trying to relaunch...!&quot;;
            computer.connect(true)
          }
          serverList.add(aSlave.name);        
     }
  }    
}

return serverList;




</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>