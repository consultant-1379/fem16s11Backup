<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SPRINT_TAG</string>
        <string>ISO_VERSION</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ISO_VERSION</name>
          <description>The ENM ISO version (e.g. 1.65.77)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SPRINT_TAG</name>
          <description>Tag for GIT tagging the repository after build</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ENM_ISO_REPO_VERSION</name>
          <defaultValue>ENM_20_13_ERICenm_CXP9027091_1_97_28</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/test-eric-sec-directoryservices-fd</propertiesContent>
        <secureGroovyScript plugin="script-security@1.78">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = &apos;armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0&apos;
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: &apos;${ISO_VERSION}&apos;])
        .needDockerSocket(true)
        .toString()

def FUser = &quot;${Choose_Functional_User}&quot;
def FUser_private_key = &apos;&apos;
def GIT_COMMITTER_NAME = &apos;&apos;
def GIT_COMMITTER_EMAIL = &apos;&apos;

  switch(FUser) {
  case &quot;enmadm100&quot;: 
      GIT_COMMITTER_NAME = &apos;enmadm100&apos;
      GIT_COMMITTER_EMAIL = &apos;enmadm100@ericsson.com&apos;
      FUser_private_key = &apos;enmadm100_private_key&apos;
      break
  case &quot;lciadm100&quot;: 
      GIT_COMMITTER_NAME = &apos;lciadm100&apos;
      GIT_COMMITTER_EMAIL = &apos;lciadm100@ericsson.com&apos;
      FUser_private_key = &apos;lciadm100_private_key&apos;
      break
  case &quot;cenmbuild&quot;: 
      GIT_COMMITTER_NAME = &apos;cenmbuild&apos;
      GIT_COMMITTER_EMAIL = &apos;cenmbuild@ericsson.com&apos;
      FUser_private_key = &apos;cenmbuild_private_key&apos;
      //GERRIT_HTTP_CREDENTIALS = credentials(&apos;cenmbuild_gerrit_api_token&apos;)
      break
  default:
      break
  }
def failedStage = &apos;&apos;

def emailReport() {
    def mail_list = [&quot;eric-enm-sles-apache2&quot;:&quot;shiva.muriki.ext@ericsson.com&quot;,&quot;eric-sec-directoryservices-fd&quot;:&quot;shiva.muriki.ext@ericsson.com&quot;]
        mail_list.each { each_repo,each_email -&gt;
            if (each_repo == env.Repo.split(&apos;/&apos;).last()) {
                def Repo_Mail = each_email;
            try {
                mail to: &quot;${Repo_Mail}&quot;,
                subject: &quot;Failed Pipeline: ${currentBuild.fullDisplayName}&quot;,
                body: &quot;Failure on ${env.BUILD_URL}&quot;
             } catch( err ){
                   echo &quot;$err&quot;
             }
           }
        };
}


pipeline {
    agent { 
        label &quot;${env.Choose_Label}&quot;
        //label &apos;Cloud-Native&apos;
    }
    parameters {
        string(name: &apos;ISO_VERSION&apos;, description: &apos;The ENM ISO version (e.g. 1.65.77)&apos;)
        string(name: &apos;SPRINT_TAG&apos;, description: &apos;Tag for GIT tagging the repository after build&apos;)
    }
    
    environment {
        GERRIT_HTTP_CREDENTIALS_cenmbuild = credentials(&apos;cenmbuild_gerrit_api_token&apos;) 
        GERRIT_HTTP_CREDENTIALS_enmadm100 = credentials(&apos;enmadm100_gerrit_http_username_password&apos;) 
    }
    
    stages {
        stage(&apos;Clean&apos;) {
            steps {
                deleteDir()
            }
        }
        /*
        stage(&apos;Inject Credential Files&apos;) {
            steps {
                withCredentials([file(credentialsId: &apos;lciadm100-docker-auth&apos;, variable: &apos;dockerConfig&apos;)]) {
                    sh &quot;install -m 600 ${dockerConfig} ${HOME}/.docker/config.json&quot;
                }
            }
        }
        */
        stage(&apos;Checkout Base Image Git Repository&apos;) {
            steps {
                git branch: &apos;master&apos;,
                     credentialsId: &quot;${FUser_private_key}&quot;,
                     url: &apos;${GERRIT_MIRROR}/&apos;+env.REPO
				/*
				withCredentials([usernameColonPassword(credentialsId: &apos;enmadm100_gerrit_http_username_password&apos;, variable: &apos;httpcredentails&apos;)]) {
                    sh &apos;&apos;&apos;
                    git remote set-url origin --push https://$httpcredentails@${GERRIT_CENTRAL_HTTP_TEST}/${REPO}
                    &apos;&apos;&apos;
                }
                */
				
				script {
                  switch(FUser) {
                  case &quot;enmadm100&quot;: 
                    sh &apos;&apos;&apos;
                        echo &apos;Pushed with Fuser-enmadm gerrit http&apos; 
						git remote set-url origin --push https://${GERRIT_HTTP_CREDENTIALS_enmadm100}@${GERRIT_CENTRAL_HTTP_TEST}/${REPO}
                    &apos;&apos;&apos;
                    break
                  case &quot;lciadm100&quot;: 
                    sh &apos;&apos;&apos;
                        echo &apos;Pushed with Fuser-enmadm gerrit http&apos;
                        git remote set-url origin --push https://${GERRIT_HTTP_CREDENTIALS_enmadm100}@${GERRIT_CENTRAL_HTTP_TEST}/${REPO}
                    &apos;&apos;&apos;
                    break
                  case &quot;cenmbuild&quot;: 
                    sh &apos;&apos;&apos;
                        echo &apos;Pushed with Fuser-cenm gerrit http&apos;
						git remote set-url origin --push https://${GERRIT_HTTP_CREDENTIALS_cenmbuild}@${GERRIT_CENTRAL_HTTP_TEST}/${REPO}
                    &apos;&apos;&apos;
                    break
                  default:
                    break
                  } 
                }
            }
        }
		
		stage(&apos;Linting Dockerfile&apos;) {
            steps {
                script {
                    sh &quot;${bob} lint-dockerfile&quot;
                    archiveArtifacts &apos;*dockerfilelint.log&apos;
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
		
        stage(&apos;Update Yum Repo or Swap versions&apos;){
            steps {
                script {
                    echo &quot;All is well&quot;
                    //if ( env.REPO.split(&apos;/&apos;).last() == &quot;tst-eric-enm-sles-base&quot;){
                        //sh &quot;${bob} generate-yum-repo-version&quot;
                        //sh &apos;&apos;&apos;
                            //if git status | grep &apos;Dockerfile&apos; &gt; /dev/null; then
                               //git add Dockerfile
                               //git commit -m &quot;Updating yum repo version&quot;
                            //else
                                //echo `date` &gt; timestamp
                                //git add timestamp
                                //git commit -m &quot;NO JIRA - Time Stamp &quot;
                            //fi
                            //git push origin HEAD:master
                        //&apos;&apos;&apos;
                    //}
                    //else {
                        //echo sh(script: &apos;env&apos;, returnStdout:true)
                        //step ([$class: &apos;CopyArtifact&apos;, projectName: &apos;sync-build-trigger-tst&apos;, filter: &quot;*&quot;]);
                        //sh &quot;${bob} swap-latest-versions-with-numbers&quot;
                        //sh &apos;&apos;&apos;
                            //if git status | grep &apos;Dockerfile\\|values.yaml&apos; &gt; /dev/null; then
                               //git commit -m &quot;NO JIRA - Updating Dockerfile and Values.yaml files with base images version&quot;
                            //else
                               //echo `date` &gt; timestamp
                               //git add timestamp
                               //git commit -m &quot;NO JIRA - Time Stamp &quot;
                            //fi
                            //git push origin HEAD:master
                        //&apos;&apos;&apos;
                    //}
                }
            }
        }
        stage(&apos;Build Image&apos;) {
            steps {
                sh &quot;echo ${env.SPRINT_TAG}&quot;
                sh &quot;${bob} generate-new-version build-image-with-all-tags&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags&quot;
                    }
                }
            }
        }
        stage(&apos;Retrieve image version&apos;) {
            steps {
                script {
                    env.IMAGE_TAG = sh(script: &quot;cat .bob/var.version&quot;, returnStdout:true).trim()
                    echo &quot;${IMAGE_TAG}&quot;
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags&quot;
                    }
                }
            }
        }
        stage(&apos;Publish Images to Artifactory&apos;) {
            steps {
                sh &quot;${bob} push-image-with-all-tags&quot;
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh &quot;${bob} remove-image-with-all-tags&quot;
                    }
                }
                always {
                    sh &quot;${bob} remove-image-with-all-tags&quot;
                }
            }
        }
        stage(&apos;Generate ADP Parameters&apos;) {
            steps {
                sh &quot;${bob} generate-output-parameters&quot;
                archiveArtifacts &apos;artifact.properties&apos;
            }
        }
        stage(&apos;Tag Base Image Git Repository&apos;) {
            steps {
                wrap([$class: &apos;BuildUser&apos;]) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        &apos;AUTHOR_NAME&apos;        : &quot;\${BUILD_USER:-${GIT_COMMITTER_NAME}}&quot;,
                                        &apos;AUTHOR_EMAIL&apos;       : &quot;\${BUILD_USER_EMAIL:-${GIT_COMMITTER_EMAIL}}&quot;,
                                        &apos;GIT_COMMITTER_NAME&apos; : &quot;${GIT_COMMITTER_NAME}&quot;,
                                        &apos;GIT_COMMITTER_EMAIL&apos;: &quot;${GIT_COMMITTER_EMAIL}&quot;
                                ])
                                .toString()
                        sh &quot;${bobWithCommitterInfo} create-git-tag&quot;
                        sh &quot;&quot;&quot;
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        &quot;&quot;&quot;
                    }
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
                always {
                    script {
                        sh &quot;${bob} remove-git-tag&quot;
                    }
                }
            }
        }
        // stage(&apos;Bump Version&apos;) {
        //     steps {
        //         script {
        //             sh &apos;hostname&apos;
        //             Version = readFile &quot;VERSION_PREFIX&quot;
        //             sh &apos;docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch&apos;
        //             newVersion = readFile &quot;VERSION_PREFIX&quot;
        //             env.IMAGE_VERSION = newVersion
        //             currentBuild.displayName = &quot;${BUILD_NUMBER} - Version - &quot; + Version
        //             sh &apos;&apos;&apos;
        //                 git add VERSION_PREFIX
        //                 git commit -m &quot;Version $IMAGE_VERSION&quot;
        //                 git push origin HEAD:master
        //             &apos;&apos;&apos;
        //         }
        //     }
        // }
        stage(&apos;Generate Metadata Parameters&apos;) {
            steps {
                sh &quot;${bob} generate-metadata-parameters&quot;
                archiveArtifacts &apos;image-metadata-artifact.json&apos;
            }
        }
    }
    post {
        success {
            script {
                sh &apos;&apos;&apos;
                    set +x
                    git tag --annotate --message &quot;Tagging latest in sprint&quot; --force $SPRINT_TAG HEAD
                    git push --force origin $SPRINT_TAG
                    git tag --annotate --message &quot;Tagging latest in sprint with ISO version&quot; --force ${SPRINT_TAG}_iso_${ISO_VERSION} HEAD
                    git push --force origin ${SPRINT_TAG}_iso_${ISO_VERSION}
                &apos;&apos;&apos;
            }
        }
        failure {
            script {
                emailReport()
            }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = &apos;&apos;)
class BobCommand {
    def bobImage = &apos;bob.2.0:latest&apos;
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -&gt; &quot;-e ${entry.key}=\&quot;${entry.value}\&quot;&quot; })
                .join(&apos; &apos;)

        def cmd = &quot;&quot;&quot;\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? &apos;-v /var/run/docker.sock:/var/run/docker.sock&apos; : &apos;&apos;}
            |${env}
            |\$(for group in \$(id -G); do printf &apos; --group-add %s&apos; &quot;\$group&quot;; done)
            |--group-add \$(stat -c &apos;%g&apos; /var/run/docker.sock)
            |${bobImage}
            |&quot;&quot;&quot;
        return cmd
                .stripMargin()           // remove indentation
                .replace(&apos;\n&apos;, &apos; &apos;)      // join lines
                .replaceAll(/[ ]+/, &apos; &apos;) // replace multiple spaces by one
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>