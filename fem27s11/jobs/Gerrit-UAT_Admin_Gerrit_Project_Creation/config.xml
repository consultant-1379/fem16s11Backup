<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Job that generates new ENM-EAR,ENM-WAR/TAF/Service Group/Service Model/Plugins/Extensions/3pp projects&lt;br&gt;&lt;br&gt;&#xd;
&lt;b&gt; &lt;/b&gt;&lt;br&gt;&#xd;
&lt;b&gt;&lt;font color=&quot;red&quot;&gt;    WARNING!  YOU NEED TO SET &quot;Service Model&quot; Archetype, for any ENM-Products, IF MediaCategory=model  !!! &lt;/font&gt;&lt;/b&gt;&lt;br&gt;&#xd;
&lt;br&gt;&lt;br&gt;&#xd;
- Creates a new Gerrit Repo&lt;br&gt;&#xd;
and if it&apos;s requested:&lt;br&gt;&#xd;
- Creates Jenkins Jobs&lt;br&gt;&#xd;
- Runs selected archetype&lt;br&gt;&#xd;
- Prints JIRA message&lt;br&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>30</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@1.0.3">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JIRA_TICKET</name>
          <description>&lt;font size=&quot;2&quot;&gt;Enter the JIRA ticket number of the product request&lt;br&gt;
  Examples:CIS-1234&lt;br&gt;&lt;br&gt;&lt;/font&gt;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEAM</name>
          <description>&lt;font size=&quot;2&quot;&gt;Enter the name of the team for whom the repo is required:&lt;br&gt;
&lt;font color=&quot;red&quot;&gt;Note no spaces allowed, please use underscore (Example: Team_America)&lt;/font&gt;&lt;br&gt;
&lt;font color=&quot;red&quot;&gt;Please Note this can be left blank for LITP jobs&lt;/font&gt;&lt;/font&gt;&lt;br&gt;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPO</name>
          <description>&lt;font size=&quot;2&quot;&gt;Enter the gerrit repo above (Example: OSS/com.ericsson.oss.ci/ciexe_test)&lt;/font&gt;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PARENT_GROUP_RIGHTS</name>
          <description>&lt;font size=&quot;2&quot;&gt;Parent group from which to inherit. Please choose &apos;OSS/ENM-Parent/PM-Parent&apos; ONLY for a PM repository, otherwise choose the standard option &apos;OSS/ENM-Parent&apos;.&lt;/font&gt;&lt;br&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>OSS</string>
              <string>OSS/ENM-Parent/SQ-Gate</string>
              <string>OSS/ENM-Parent/PM-Parent</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GUARD_GROUP_NAME</name>
          <description>&lt;font size=&quot;2&quot;&gt;Enter the guard group name (Example: CI_Test_guard)&lt;br&gt;
&lt;font&gt;It is possible to insert an Array of values separated by one space&lt;/font&gt;
&lt;font color=&quot;red&quot;&gt;Make sure the group name given here exists in Gerrit. If group doesn&apos;t exist select the below box&lt;/font&gt;&lt;/font&gt;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>NEW_GUARD_GROUP</name>
          <description>&lt;br&gt;&lt;font size=&quot;2&quot;&gt;Click the checkbox if the team entered above is a new guard group&lt;/font&gt;&lt;br&gt;&lt;br&gt;
</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GUARD_GROUP_MEMBERS</name>
          <description>&lt;font size=&quot;2&quot; color=&quot;red&quot;&gt;add a space between the lower case team members&apos; IDs. Example: zmosluc ealeing egiogiu epiepol&lt;/font&gt;</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>ARCHETYPE_CREATION</name>
          <description>&lt;font size=&quot;3&quot; color=&quot;red&quot;&gt;If NO Archetype is required, skip to the JOBS_CREATION field. If also Jenkins jobs are not required, just press APPLY at the bottom of this page&lt;/font&gt;&lt;br&gt;&lt;br&gt;
&lt;font size=&quot;2&quot;&gt;Select &quot;Yes&quot; if team requires a specific Archetype for its repository&lt;/font&gt;&lt;br&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>No</string>
              <string>Yes</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>RUN_ARCHETYPE</name>
          <description>&lt;font size=&quot;2&quot;&gt;Select the archetype you wish to run in repo:&lt;br&gt;
Choices:&lt;br&gt;
CDS Archetype&lt;br&gt;
ENM - EAR Archetype &lt;font color=&quot;red&quot;&gt;(You need to choose the media category one ore more for every CXP)&lt;/font&gt;&lt;br&gt;
ENM - WAR Archetype &lt;font color=&quot;red&quot;&gt;(You need to choose the media category one ore more for every CXP)&lt;/font&gt;&lt;br&gt;  
Service Group RPM Archetype &lt;font color=&quot;red&quot;&gt;(You need to choose the media category one ore more for every CXP)&lt;/font&gt;&lt;br&gt;
Service Model Archeype &lt;font color=&quot;red&quot;&gt;(You need to choose this for any ENM Products featured by MediaCategory=&quot;model&quot;)&lt;/font&gt;&lt;br&gt;
TAF Archetype&lt;br&gt;
LITP ENM Plugins&lt;br&gt;
LITP ENM Extensions&lt;br&gt;
LITP ENM 3pps&lt;/font&gt;&lt;br&gt;&lt;br&gt;  
</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>enm_ear</string>
              <string>enm_war</string>
              <string>sg_rpm</string>
              <string>service_model</string>
              <string>taf</string>
              <string>plugins</string>
              <string>extensions</string>
              <string>3pp</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DELIVERABLE</name>
          <description>&lt;font size=&quot;2&quot;&gt;This field can be left empty if you don&apos;t have or it&apos;s not required an RPM&lt;br&gt;
&lt;font&gt;It is possible to insert an Array of values CXP separated by one space&lt;/font&gt;
&lt;font&gt;(Example: ERICtest_CXP1234567 ERICtest_CXP7654321)&lt;/font&gt;&lt;br&gt;&lt;br&gt;

&lt;font size=&quot;2&quot;&gt;Enter the deliverable from the repo (Example: ERICtest_CXP1234567)&lt;br&gt;
  &lt;font color=&quot;red&quot;&gt;Please Note this should be in relevant format: &lt;br&gt;
    ERICenmsgXXXX_CXPxxxxxxxx for Service Group RPMs&lt;br&gt;
    ERICTAFxxxx_CXPxxxxxxx for TAF&lt;br&gt;
    ERIClitpxxxx_CXPxxxxxxx for Plugins and Extensions&lt;br&gt;
    EXTRxxxx_CXPxxxxxxx for 3pps&lt;br&gt;
  &lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;

</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MEDIA_CATEGORY</name>
          <description>&lt;font size=&quot;2&quot;&gt;The media category for CDS Archetype, ENM Archetype, Service Group RPM Archetype, Service Model Archetype  is mandatory but it is possible to leave the field empty if you not desire a CXP. For the other types of archetype this field is not needed&lt;br&gt;&lt;br&gt;
You can choose one or more media categories for each RPM&lt;br&gt; 
The media category for each RPM are separated by one space, if you want to put more media for RPM, you can use the comma &quot;,&quot;&lt;br&gt;&lt;br&gt;
  
For example&lt;br&gt;
RPM: RPM1 RPM2 RPM3&lt;br&gt;
SERVICE: service,common ms image,model
&lt;br&gt;
The first one RPM1: service and model media category, RPM2: ms, RPM3: image,model&lt;/font&gt;

&lt;ul style=&quot;color: red; font-size: 13px;&quot;&gt;
&lt;li&gt;service&lt;/li&gt;
&lt;li&gt;common&lt;/li&gt;
&lt;li&gt;db&lt;/li&gt;
&lt;li&gt;model&lt;/li&gt;
&lt;li&gt;scripting&lt;/li&gt;
&lt;li&gt;ms&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;plugin&lt;/li&gt;
&lt;li&gt;cloudrepo&lt;/li&gt;  
&lt;li&gt;ebsstream&lt;/li&gt;
&lt;li&gt;asrstream&lt;/li&gt;
&lt;li&gt;streaming&lt;/li&gt;
&lt;li&gt;esnstream&lt;/li&gt;
&lt;li&gt;eba&lt;/li&gt;
&lt;/ul&gt;
</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PROJECT_TYPE</name>
          <description>This field mean to reflect the status of the SonarQube Quality Gate:&lt;br&gt;
&lt;ul style=&quot;color: red; font-size: 13px;&quot;&gt;
&lt;li&gt;Service -&gt; Gating standard&lt;/li&gt;
&lt;li&gt;API -&gt; Gate A sufficient&lt;/li&gt;
&lt;li&gt;UI -&gt; Gate A sufficient&lt;/li&gt;
&lt;li&gt;Service_Group -&gt; Gating Not Applicable&lt;/li&gt;
&lt;li&gt;Testware -&gt; Gating Not Applicable&lt;/li&gt;
&lt;li&gt;Model -&gt; Gating Not Applicable&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

Confluence reference: &lt;a href=&apos;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CICD/CI+Pipeline+and+SonarQube+Migration+-+Instructions&apos;&gt;CI+Pipeline+and+SonarQube+Migration+-+Instructions&lt;/a&gt;
</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Testware</string>
              <string>Service</string>
              <string>API</string>
              <string>UI</string>
              <string>Service_Group</string>
              <string>Model</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>PARENT</name>
          <description>&lt;font size=&quot;2&quot;&gt;&lt;font color=&quot;red&quot;&gt;Select parent here for TAF projects&lt;/font&gt;&lt;/font&gt;&lt;br&gt;&lt;br&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>enm</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>JOBS_CREATION</name>
          <description>&lt;font size=&quot;3&quot; color=&quot;red&quot;&gt;If NO Jenkins jobs are required, just press APPLY at the bottom of this page&lt;/font&gt;&lt;br&gt;&lt;br&gt;
&lt;font size=&quot;2&quot;&gt;Select &quot;Yes&quot; if team requires Jenkins jobs creation&lt;/font&gt;&lt;br&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>No</string>
              <string>Yes</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>JOB_TYPE</name>
          <description>&lt;font size=&quot;2&quot;&gt;Select the Jenkins Jobs template category&lt;br&gt;
&lt;font&gt;Note: CDS jobs created based on fem selection&lt;/font&gt;&lt;/font&gt;&lt;br&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>ENM</string>
              <string>TAF</string>
              <string>ENM_LITP</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>JENKINS</name>
          <description>&lt;font size=&quot;2&quot;&gt;Enter the destination Jenkins instance for the generated jobs.&lt;br&gt;
</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>fem6s11</string>
              <string>fem21s11</string>
              <string>fem22s11</string>
              <string>fem23s11</string>
              <string>fem25s11</string>
              <string>fem26s11</string>
              <string>fem27s11</string>
              <string>fem1s11</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>INTEGRATION_PCR</name>
          <description>&lt;font size=&quot;2&quot;&gt;Select &apos;Yes&apos; if team requires an INTEGRATION_PCR rather than a simple PCR job&lt;/font&gt;&lt;br&gt;&lt;br&gt;</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>No</string>
              <string>Yes</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
    <de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty plugin="jenkinswalldisplay@0.6.30"/>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>GridEngine_RHEL7</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
git --version
/proj/ciexadm200/tools/git/2.20.0/bin/git --version

echo &quot;JIRA Ticket: https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/&quot;${JIRA_TICKET}

export GROUP_ID=$(echo ${REPO// /} | grep -o -P &apos;(?&lt;=OSS/ENM-Parent/SQ-Gate/).*(?=/)&apos;)
export REPO=${REPO// /}
export Parent_Group_Rights=${PARENT_GROUP_RIGHTS// /}
export Acceptance=$INTEGRATION_PCR
export Deliverable=$DELIVERABLE
export New_Guard_Group=${NEW_GUARD_GROUP// /}
export Guard_Group_Members=$GUARD_GROUP_MEMBERS
export ARTIFACT_ID=${REPO##*/}
echo GroupId=$GROUP_ID
echo ArtifactId=$ARTIFACT_ID

ssh -p 29418 staging-gerrit.sero.gic.ericsson.se gerrit ls-projects | grep -Fx ${REPO}
if [ $? -eq 0 ]; then
    echo &quot;${REPO} already existing&quot;
else
    echo &quot;Proceed to ${REPO} creation&quot;
    /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/new_repo_UAT.sh || { echo &apos;ERROR: Check Job Parameters&apos;; exit 1; }
fi

if [ &quot;${ARCHETYPE_CREATION}&quot; = &quot;Yes&quot; ];  then
# new enm_ear, enm_war  archetypes for ENM products only 
    if [ &quot;${RUN_ARCHETYPE}&quot; = &quot;enm_ear&quot; ]; then
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_enm_ear_archetype_new_UAT.sh || { exit 1; }  
         
    elif [ &quot;${RUN_ARCHETYPE}&quot; = &quot;enm_war&quot; ]; then
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_enm_war_archetype_new_UAT.sh || { exit 1; }  

    elif [ &quot;${RUN_ARCHETYPE}&quot; = &quot;sg_rpm&quot; ]; then
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_sg_rpm_archetype_new_UAT.sh || { exit 1; }   
# new service model archetype for MODELS          
    elif [ &quot;${RUN_ARCHETYPE}&quot; = &quot;service_model&quot; ]; then
         export deliverableName=$DELIVERABLE
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_service_model_archetype_new_UAT.sh || { exit 1; }

    elif [ &quot;${RUN_ARCHETYPE}&quot; = &quot;taf&quot; ]; then
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_taf_archetype_new_UAT.sh || { exit 1; }

    elif [ &quot;${RUN_ARCHETYPE}&quot; = &quot;plugins&quot; ] || [ &quot;${RUN_ARCHETYPE}&quot; = &quot;extensions&quot; ]; then
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_litp_plugins_ext_archetype_new_UAT.sh || { exit 1; }

    elif [ &quot;${RUN_ARCHETYPE}&quot; = &quot;3pp&quot; ]; then
         /proj/cdsadm100/tools/utils/scripts/UAT_new_repo_and_job_creation/run_3PP_OSS_archetype_new_UAT.sh || { exit 1; }

    else
       exit 1
    fi
fi

cd ${WORKSPACE}/workspace/${JOB_NAME}/
rm -rf ${ARTIFACT_ID}
git clone ${GERRIT_CENTRAL_UAT}/${REPO}
cd ${ARTIFACT_ID}
git pull

if [ -f pipeline_local.cfg ]
then
	echo &quot;pipeline_local.cfg found.&quot;
else
	echo &quot;Fill pipeline_local.cfg file with default Maven goals...&quot;
    echo &quot;MVN_PCR=-V -U jacoco:prepare-agent install jacoco:report pmd:pmd&quot; &gt;&gt; pipeline_local.cfg
    echo &quot;MVN_Release=-V -Dresume=false release:prepare release:perform -DpreparationGoals=\&quot;install -U\&quot; -Dgoals=\&quot;clean deploy pmd:pmd jacoco:report -U\&quot; -DlocalCheckout=true&quot; &gt;&gt; pipeline_local.cfg
    if [ &quot;${INTEGRATION_PCR}&quot; = &quot;Yes&quot; ]; then
        echo &quot;MVN_PCR_INT=-V -Dts -P jboss_managed_local install -U&quot; &gt;&gt; pipeline_local.cfg
    fi

    git add --all
    git commit -m &quot;${JIRA_TICKET}: create pipeline_local.cfg with default list of Maven goals.&quot;
    git remote set-url --push origin ${GERRIT_CENTRAL_UAT}/${REPO}
    git push -f origin master   
fi

cd ..

if [ &quot;${JOBS_CREATION}&quot; = &quot;Yes&quot; ]; then
    PIPELINE_REPO=&quot;OSS/com.ericsson.oss.de/ci-pipeline-jenkins-config&quot;
    PIPELINE_REPO_ARTIFACT_ID=${PIPELINE_REPO##*/}

    #git clone ssh://gerritmirror-ha.lmera.ericsson.se:29418/${PIPELINE_REPO}
    cd ${WORKSPACE}/workspace/${JOB_NAME}/
    git clone ssh://enmadm100@staging-gerritmirror.sero.gic.ericsson.se:29418/${PIPELINE_REPO} &amp;&amp; scp -p -P 29418 enmadm100@staging-gerrit.sero.gic.ericsson.se:hooks/commit-msg ${PIPELINE_REPO_ARTIFACT_ID}/.git/hooks/
    cd ${PIPELINE_REPO_ARTIFACT_ID}

    IFS=&apos;,&apos; read -ra ADDR &lt;&lt;&lt; &quot;$REPO_LIST&quot;
    
    if grep -Fq &quot;${REPO},&quot; ${WORKSPACE}/workspace/${JOB_NAME}/${PIPELINE_REPO_ARTIFACT_ID}/ci-jenkins-config/projects ; then
    	echo &quot;Repository already existing in projects file...&quot;
        echo &quot;Skip Pipeline jobs creation.&quot;
        exit 0
	fi
    
    if [ &quot;${PROJECT_TYPE}&quot; = &quot;Service&quot; ] || [ &quot;${PROJECT_TYPE}&quot; = &quot;UI&quot; ]; then
    	GATE_TYPE=&quot;GateB&quot;
    elif [ &quot;${PROJECT_TYPE}&quot; = &quot;API&quot; ]; then
    	GATE_TYPE=&quot;GateA&quot;
    else
    	GATE_TYPE=&quot;NA&quot;
    fi   
    
    if [ &quot;${ACCEPTANCE}&quot; = &quot;Yes&quot; ]; then
        PCR_TYPE=&quot;integration&quot;
    else
        PCR_TYPE=&quot;unit&quot;
    fi
    
    echo &quot;${REPO},${JENKINS},SILENT_MODE=false,SKIP_SONAR=false,PCR=${PCR_TYPE},GATE_TYPE=${GATE_TYPE}&quot; &gt;&gt; ${WORKSPACE}/workspace/${JOB_NAME}/${PIPELINE_REPO_ARTIFACT_ID}/ci-jenkins-config/projects 

    echo -en &apos;\n&apos;
    echo &quot;============Git Status==========&quot;
    git status

    echo -en &apos;\n&apos;
    echo &quot;============Git add -all=========&quot;
    git add --all

    echo -en &apos;\n&apos;
    echo &quot;============Git Status==========&quot;
    git status

    echo -en &apos;\n&apos;
    echo &quot;============Git Commit===========&quot;
    git commit -m &quot;${JIRA_TICKET}: appending list of repos to projects file - triggering ${PCR_TYPE} DSL&quot;

    echo -en &apos;\n&apos;
    echo &quot;============Git Status==========&quot;
    git status

    echo -en &apos;\n&apos;
    echo &quot;============Git Push=============&quot;
    #git remote set-url --push origin ${GERRIT_CENTRAL}/${PIPELINE_REPO}
    
    git push ${GERRIT_CENTRAL_UAT}/${PIPELINE_REPO} HEAD:refs/for/master%topic=${PCR_TYPE}-${JENKINS}
fi

printf &apos;========================================\n&apos;
printf &apos;============ JIRA Message ==============\n&apos;
printf &apos;========================================\n\n&apos;

printf &apos;Hi,\n\n&apos;
printf &apos;Your Gerrit Repository is created:\n&apos;
echo https://staging-gerrit.sero.gic.ericsson.se/#/admin/projects/$REPO

if [ &quot;${JOBS_CREATION}&quot; = &quot;Yes&quot; ];  then
    printf &apos;\n\nJenkins Jobs created:\n&apos;
    echo https://$JENKINS-eiffel004.eiffel.gic.ericsson.se:8443/jenkins/job/${ARTIFACT_ID}_PCR
    echo https://$JENKINS-eiffel004.eiffel.gic.ericsson.se:8443/jenkins/job/${ARTIFACT_ID}_Release
fi

printf &apos;\n\nUseful CI Info:\n&apos;
printf &apos;Jenkins Pipeline - https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CICD/CI+Impact+for+ENM+developers\n&apos;
printf &apos;========================================\n&apos;</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} --------  ${ENV,var=&quot;JIRA_TICKET&quot;} </template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>