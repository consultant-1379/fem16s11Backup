<?xml version="1.1" encoding="UTF-8"?><flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>&lt;b&gt;&lt;font color="red"&gt;CLICK "RETRIGGER" ON THE PATCH YOU WANT TO BUILD, OTHERWISE CLICK "BUILD NOW" TO BUILD THE LAST.&lt;/font&gt;&lt;/b&gt;&lt;br&gt;&lt;a href="https://confluence-nam.lmera.ericsson.se/display/CIE/Retriggering+a+parameterised%28preCodeReview%29+Jenkins+job"&gt;How to "RETRIGGER" a job&lt;/a&gt;&lt;br&gt;This job is triggered by a "git push origin HEAD:refs/for/master".&lt;br&gt;It will build the artifact. If the build is successful the code is sent for code review.&lt;br&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.1">
      <siteName>https://jira-oss.seli.wh.rnd.internal.ericsson.com/</siteName>
    </hudson.plugins.jira.JiraProjectProperty>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>NODE</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>ap-workflow-ecim_Release</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.services.autoprovisioning/ap-workflow-ecim
ADMIN_CONTROL=true
SKIP_SONAR=false
SKIP_SONAR_GLOBAL=
PUBLISH_SITE=false
BRANCH=master
TEAM_NAME=
GERRIT_REFSPEC=refs/heads/master
SLAVE_LABEL=ubuntu_test
JDK_HOME=JDK 1.8.0_291
MVN_HOME=Maven 3.5.3
MVN_PCR=-V -U jacoco:prepare-agent install jacoco:report pmd:pmd
MVN_PCR_INT=-V -Dts -P jboss_managed_local install -U
MVN_Release=-V -Dresume=false release:prepare release:perform -DpreparationGoals="install -U" -Dgoals="clean deploy pmd:pmd jacoco:report -U" -DlocalCheckout=true
MVN_SONAR=sonar:sonar -Dsonar.login=${SONAR_AUTH_TOKEN} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.branch.name=${SONAR_BRANCH} -Dsonar.branch.target=master
MVN_ARQUILLIAN=
POSTGRES=false
POSTGRES_DB_NAME=my_pg_db
POSTGRES_DB_VERSION=10.9
VERSANT=false
VERSANT_DB_NAME=dps_integration
VERSANT_DB_VERSION=1.0.33
SQ_SERVER=sonarqube enterprise 79
TESTWARE_REPO=
IT_FOLDER=
MVN_VERIFY_BASE_OPTIONS=
SOURCES_DIR=.
JAVA_MONITORED_SERVICES=.*jboss.*
IT_REPORT_TYPE=surefire
COMPOSE_FILE=./testsuite/integration/jee/docker-compose.yml
TESTRUNNER_JAVA_VERSION=jdk8_tmp
SNAPSHOT_CODE_RPMS_CONTAINER=im_jboss
COMPOSE_HTTP_TIMEOUT=1000
IGNORE_RPMS=
DEFAULT_TEAM=
AUTO_DELIVER=false
CREATE_DELIVERY_GROUP=false
PRE_TEST_SCRIPT=pre_test.sh
POST_TEST_SCRIPT=post_test.sh
DOCKER_COMPOSE_OPTIONS=-f docker-compose.yml
IT_REPO=OSS/com.ericsson.oss.mediation.pm.testsuite/pm-mediation-vertical-slice
INTEGRATION_TESTS=
ADDITIONAL_SYSTSEM_PROPERTIES=
TOPIC=
deployPackage=
PYTHON_HOME=/proj/ciexadm200/tools/python-2.7.16
ENM_PY=/proj/ciexadm200/tools/enm_py-2.7.16_reqmnts-1.0
PYTHONPATH=$ENM_PY/usr/lib/python2.7/site-packages:$ENM_PY/usr/lib64/python2.7/site-packages
PATH+EXTRA=/proj/ciexadm200/tools/python-2.7.16/bin:$ENM_PY/usr/bin
ARTIFACTS_WILDCARDS=**/*.log,**/*.ear,**/*.rpm</propertiesContent>
        <secureGroovyScript plugin="script-security@1.78">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
          <spec/>
          <gerritProjects>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
              <compareType>PLAIN</compareType>
              <pattern>OSS/com.ericsson.oss.services.autoprovisioning/ap-workflow-ecim</pattern>
              <branches>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>PLAIN</compareType>
                  <pattern>master</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>REG_EXP</compareType>
                  <pattern>dPipelineBranch.*</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              </branches>
              <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          </gerritProjects>
          <dynamicGerritProjects class="empty-list"/>
          <skipVote>
            <onSuccessful>false</onSuccessful>
            <onFailed>false</onFailed>
            <onUnstable>false</onUnstable>
            <onNotBuilt>false</onNotBuilt>
          </skipVote>
          <silentMode>true</silentMode>
          <notificationLevel/>
          <silentStartMode>false</silentStartMode>
          <escapeQuotes>true</escapeQuotes>
          <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
          <dependencyJobsNames/>
          <commitMessageParameterMode>BASE64</commitMessageParameterMode>
          <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
          <commentTextParameterMode>BASE64</commentTextParameterMode>
          <buildStartMessage/>
          <buildFailureMessage/>
          <buildSuccessfulMessage/>
          <buildUnstableMessage/>
          <buildNotBuiltMessage/>
          <buildUnsuccessfulFilepath/>
          <customUrl/>
          <serverName>__ANY__</serverName>
          <triggerOnEvents>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
              <excludeDrafts>false</excludeDrafts>
              <excludeTrivialRebase>false</excludeTrivialRebase>
              <excludeNoCodeChange>false</excludeNoCodeChange>
              <excludePrivateState>false</excludePrivateState>
              <excludeWipState>false</excludeWipState>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          </triggerOnEvents>
          <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
          <triggerConfigURL/>
          <triggerInformationAction/>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>@Library('ci-pipeline-lib') _
pipeline {
    agent { label env.SLAVE_LABEL }
    options {
        timeout(time: 120, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage('Pre-step') {
            steps {
                ci_pcr_pre()
            }
        }
        stage('Clone') {
            steps {
                ci_manage_commits()
            }
        }
        stage('Init') {
            steps {
                ci_pcr_init()
                createReportDir()
            }
        }
        stage('Unit') {
            steps {
                ci_pcr_unit()
            }
        }
      
    
        
        stage('Build Containers') {
            steps {
                ci_build_containers()
            }
        }
        /*stage('Deploy') {
            steps {
                ci_deploy_rpms()
            }
        }*/
        stage('Start Containers') {
            steps {
                
                ci_start_containers_with_rpm_test2()
                ci_containers_healthcheck()
            }
        }
        /*stage('Arquillian') {
            steps {
                ci_pcr_integration_arquillian()
            }
        }*/
        stage('Integration') {
            steps {
                ci_pcr_integration_no_docker_test()//including Cucumber Tests
               // allure_test()
                
            }
        }
        
        //stage('Allure reports') {
    //steps {
          //createReportDirAlure()
    //script {
            //allure([
                    //includeProperties: false,
                    //jdk: '',
                    //properties: [],
                    //reportBuildPolicy: 'ALWAYS',
                    //results: [[path: '**/allure-results']]
            //])
    //}
    //}
//}
        
        
        
        stage('Sonar') {
            when {
                environment name: 'SKIP_SONAR_GLOBAL', value: 'false'
            }
            steps {
                ci_pcr_sonar_analysis()
            }
        }
        stage('Quality Gate') {
            when {
                environment name: 'SKIP_SONAR_GLOBAL', value: 'false'
            }
            steps {
                ci_pcr_get_qualitygate()
            }
        }
    }
   
post {
        always {
            ci_docker_cleanup()
            ci_pcr_post()
            //allure_test()
        }
    }
}

def createReportDirAlure(){
   
    sh 'mkdir -p ./allure-report'
}




def allure_test() {
    def allurDir = sh "find . -type d -name allure-results"
    echo allurDir
    allureFiles = sh(script: 'find . -type f -name "*.html" -print | grep "/allure-results/" | wc -l', returnStdout: true)
    if ( allureFiles.toInteger() &gt; 0) {
        allure([
        includeProperties: false,
        jdk: '',
        properties: [],
       reportBuildPolicy: 'ALWAYS',
        results: [[path: '**/allure-results']]
        ])  
    }  
}

def ci_start_containers_with_rpm_test2(){
    if ( env.INSPECT_REVIEW == 'true' ) {
    sh '''
    cd ${DOCKER_COMPOSE_DIR}
    docker-compose -f ${DOCKER_COMPOSE_FILE} up --force-recreate -d
    docker-compose -f ${DOCKER_COMPOSE_FILE} logs &gt;&amp; ${WORKSPACE}/docker-compose.log &amp;
    '''
 }  else {
    sh "docker-compose  -f ${DOCKER_COMPOSE_FILE} up --force-recreate -d"
 }
   sh '''
    docker ps
    #pidof jboss
    #pidof workflow_ecim_jboss_service_ap
    '''
    
}

def ci_pcr_integration_no_docker_test(){
    initSessionResult()
    createReportDir()
    killJbossProcess()
    copyLogs()
    runIntegrationTest()
    
}

def initSessionResult() {
    env.integrationBuildResult = '1'
}

def killJbossProcess() {
    sh '''
    docker ps
    ps aux | grep jboss
    '''
   sh 'pkill -9 -f jboss | true'
}
def copyLogs(){
    echo "### Copy Logs ####"
    sh '''
    docker ps
    #pidof jboss
    #pidof workflow_ecim_jboss_service_ap
    containers=$(docker ps -a --format '{{.Names}}')

    for container in $containers
        do
            echo "Logging Container: $container"
            docker logs -f ${container} &gt;&amp; ${container}.log &amp;
        done
    '''
}

def runIntegrationTest() {
    if (env.MVN_PCR_INT) {
        env.MAVEN_COMMAND =  env.MVN_PCR_INT
    } else {
        if (env.TESTWARE_ROOT_DIR) {
            env.MAVEN_COMMAND = "-f ${TESTWARE_ROOT_DIR}/pom.xml -V -U install -Pdocker"
        } else {
            env.MAVEN_COMMAND = "-V -U jacoco:prepare-agent install jacoco:report pmd:pmd"
        }
    }

    if(env.POSTGRES &amp;&amp; env.POSTGRES=='true') {
        sh '''
        /proj/ciexadm200/tools/utils/postgres/ci-pg.sh up -v ${POSTGRES_DB_VERSION} -d ${POSTGRES_DB_NAME} -u postgres -p postgres -x false
        '''
    }

    if(env.VERSANT &amp;&amp; env.VERSANT=='true') {
        sh '''
        /proj/ciexadm200/tools/utils/versant/ci-versant.sh up -v ${VERSANT_DB_VERSION} -d ${VERSANT_DB_NAME} -x false
        '''
        env.VERSANT_ROOT = sh(script: 'echo "/proj/${USER}/tools/versant/$(hostname -s)/${VERSANT_DB_VERSION}"', returnStdout: true)
    }

    withMaven(jdk: env.JDK_HOME, maven: env.MVN_HOME, options: [junitPublisher(healthScaleFactor: 1.0),artifactsPublisher(disabled: true)]) {
      if(env.NEO4J &amp;&amp; env.NEO4J=='true') {
          start_neo4j()
      }
      sh "mvn ${MAVEN_COMMAND}"
      env.integrationBuildResult='0'
    }

    if (env.GERRIT_CHANGE_NUMBER || env.TOPIC || env.GERRIT_CHANGE_NUMBERS ) {
         ci_send_vs_label()     //  library to get involved revisions and send Vertical-Slice label score to the related reviews 
    }
}

def start_neo4j() {
    //if neo4j version is defined in pom use that one
    check_pom_for_neo4j_version()
    //if version not defined in pom or local pipeline file, then get latest from nexus
    if (!env.NEO4J_VERSION) {
        get_latest_neo4j_version()
    }

    sh '''
    export NEO4J_DIR=/proj/ciexadm200/tools/neo4j-java-driver-harness/
    export NEO4J_HARNESS_JAR=${NEO4J_DIR}/neo4j-java-driver-harness-${NEO4J_VERSION}-shaded.jar
    [ -d ${NEO4J_DIR} ] || mkdir ${NEO4J_DIR}
    if [ ! -f "${NEO4J_HARNESS_JAR}" ]; then
        echo -e "&gt;&gt;&gt; Downloading Neo4j Server from Nexus"
        export nexusServer="https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/content/repositories/public/com/ericsson/oss/itpf/datalayer/dps/3pp"
        curl -o ${NEO4J_HARNESS_JAR} ${nexusServer}/neo4j-java-driver-harness/${NEO4J_VERSION}/neo4j-java-driver-harness-${NEO4J_VERSION}-shaded.jar
    fi
    echo -e "&gt;&gt;&gt; Starting Neo4j Server"
    java -jar ${NEO4J_HARNESS_JAR} &gt; server.log 2&gt;&amp;1 &amp;
    n=0
    while ! netstat -tunlp 2&gt; /dev/null  | grep 7474 ; do
       echo -e "&gt;&gt;&gt; Wating for Neo4j server to start ..."
       sleep 10
       if [ $n -gt 40 ] ;then
          echo -e "ERROR: Neo4j server didn't start up in given time"
          exit 1
       fi
       n=$((n+1))
    done
    echo -e "&gt;&gt;&gt; Neo4j Server Started with PID: $(pgrep -f neo4j-java-driver-harness)"
    echo -e "&gt;&gt;&gt; Neo4j Server CMD:"
    ps auxwww | egrep "PID|neo4j-java-driver-harness" | grep -v grep
    echo -e "\n&gt;&gt;&gt; Checking Neo4j Server REST interface end points"
    curl -X GET -H "Accept: application/json" -H "Content-Type: application/json" http://localhost:7474/db/data/
    echo
    '''
}

def check_pom_for_neo4j_version() {
    if (fileExists("data-persistence-service-bom/pom.xml")) {
        env.NEO4J_VERSION = sh(script: 'grep -oPm1 "(?&lt;=&lt;version.neo4j.impl.3pp&gt;)[^&lt;]+" data-persistence-service-bom/pom.xml', returnStdout: true)
        env.NEO4J_VERSION = env.NEO4J_VERSION.replaceAll("\\s", "")
    }
}

def get_latest_neo4j_version() {
    println "NEO4J_VERSION not defined, using latest defined in nexus"
    getLatestNeo4JUrl = "https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/content/repositories/public/com/ericsson/oss/itpf/datalayer/dps/3pp/neo4j-java-driver-harness/maven-metadata.xml"
    mavenMetadata = new XmlSlurper().parse(getLatestNeo4JUrl)
    env.NEO4J_VERSION = mavenMetadata.versioning.latest
    mavenMetadata = null
}

def createReportDir(){
    sh 'mkdir -p ./testsuite/integration/standalone/target/cucumber-report'
}
 
</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>true</disabled>
</flow-definition>