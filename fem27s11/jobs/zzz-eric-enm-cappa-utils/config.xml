<?xml version='1.1' encoding='UTF-8'?>
<org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject plugin="workflow-multibranch@2.21">
  <actions/>
  <description>&lt;p&gt;This Pipeline was created to automate the running of the Cappa Tool 
and all subsequent scripts against one container. Cappa works by detailing system calls and capabilities
  required to be granted in order to run them. &lt;br&gt;
  Gerrit Link: &lt;a href =&quot;https://gerrit.ericsson.se/#/admin/projects/OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enm-cappa-utils&quot;&gt;https://gerrit.ericsson.se/#/admin/projects/OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enm-cappa-utils&lt;/a&gt;
  &lt;br&gt;&lt;/p&gt;
  &lt;h2&gt; Running the Jenkins Pipeline&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt; Director_Node_Pem_File : This is the name of the pem file for your environment &lt;/li&gt;
  &lt;li&gt; Director_Node_B64 : This is the PEM file converted to Base64&lt;/li&gt;
  &lt;li&gt; Config_File : This is the name of your config file &lt;/li&gt;
  &lt;li&gt; Config_B64_File : Your config file converted to Base64&lt;/li&gt;
  &lt;li&gt; Podname : The name of the pod you are running Cappa against &lt;/li&gt;
  &lt;li&gt; Security_Context_Diff : This is a boolean, when true the Security Context Diff will be run &lt;/li&gt;
  &lt;li&gt; Security_Context_File : The Security Context file you are comparing against when Security_Context_Diff is marked true. This file is in Base64 format&lt;/li&gt;
&lt;/ul&gt;
  
&lt;h3&gt; Example Config File &lt;/h3&gt;
&lt;p&gt; Your config file must be named config.ini &lt;/p&gt;

&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;[cappa]
ssh &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #007020&quot;&gt;True&lt;/span&gt;

[cappa_ssh]
use_keyfile &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #007020&quot;&gt;False&lt;/span&gt;
hostname &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #6600EE; font-weight: bold&quot;&gt;131.160&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #6600EE; font-weight: bold&quot;&gt;161.54&lt;/span&gt;
username &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; eccd
password &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #FF0000; background-color: #FFAAAA&quot;&gt;???&lt;/span&gt;
keyfile &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; ccd&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;c10a013&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;director&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;pem
workernode_hostname &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #6600EE; font-weight: bold&quot;&gt;10.0&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #6600EE; font-weight: bold&quot;&gt;10.250&lt;/span&gt;

[cappa_kubectl]
kubeconfig &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; ccd&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;c10a013&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;admin&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;conf
&lt;/pre&gt;&lt;/div&gt;

&lt;br&gt;
&lt;h3&gt; Running the scripts &lt;/h3&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #333333&quot;&gt;./&lt;/span&gt;cappa_extract&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;bsh &lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;d &lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;var&lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;tmp&lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;report_db &lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;c &lt;span style=&quot;color: #007020&quot;&gt;all&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
  To run the cappa extract script you need to provide it with a pathway to a sqlite3 database following a &quot; -d &quot; tag. The database that Cappa creates is an sqlite3 database.
  You also need to specify which container to search for following a &quot; -c &quot; tag, or if you are running against all containers just use &apos;-c all&apos;.
  The Cappa extract script processes the sqlite database generated by cappa into a folder of .csv files. By default these csv files will be stored in the /var/tmp/cappa_out folder.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #333333&quot;&gt;./&lt;/span&gt;cappa_exempt&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;bsh &lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;d &lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;var&lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;tmp&lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;cappa_out&lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;c netex
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
  To run cappa exempt you provide the pathway to the folder generated previously by cappa_extract.bsh. You provide this pathway following a &quot; -d &quot; tag.
  You also specify the container to run against or &apos;all&apos; following a &quot; -c &quot; tag.
  This script provides a list of exemptions required by a customer because without them their securty policy will break.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;python3 cappa_install&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py install_cappa &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;config_file_name config&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;ini
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 
  To run the cappa install script you just need to specify the install_cappa tag followed by 
  the config_file_name config.ini tag. If Cappa is not installed on your workernode this can take up to
  ten minutes and if it is it will just check everything and skip the downloads.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;python3 cappa_running_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py run_cappa &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;config_file_name config&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;ini &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;podname secserv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
  The cappa running tool needs to be given the --config_file_name as a parameter as well as the --podname
  of the pod you are running cappa against. This podname will be written into the podname_filter.yaml file on the workernode
  You also need to specify &quot;run_cappa&quot; in the command.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;python3 cappa_query_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py generate_cappa_report
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
  To Generate the cappa html report you just need to run the cappa_query_tool with the generate_cappa_report tag and the cappa_report.html file will be created in your current directory.
  It is built into the script to search for the .csv files generated by the cappa_extract script in the /var/tmp/cappa_out directory.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;python3 cappa_query_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py gen_pod_sec_context &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;pod_name amos
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
  The security context is also generated using the cappa_query_tool except a different tag is specified. This time you enter the gen_pod_sec_context and enter the --pod_name tag also to generate the security context of that pod.
  It is built to use the /var/tmp/cappa_out folder just like the report generator.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;python3 cappa_query_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py gen_pod_sec_context_diff &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;pod_name nbalarmirp &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;pod_spec_file fmserv_security_context&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
  The security context diff is again done by using the cappa_query_tool with a --pod_name tag and a pod_spec_file tag
  The podname is the same pod as you ran cappa against and the pod_spec_file is a previously generated security context yaml file from the gen_pod_sec_context.
&lt;/p&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;python3 base64_converter&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
  When you pull down this repo from Gerrit and create a new folder in the home directory called base64, this script will convert every file placed inside of that folder to a string in base64.
  You can then easily copy these strings into the parameters of this Jenkins Job.
&lt;/p&gt;


&lt;br&gt;
&lt;h2&gt; Jenkins Process &lt;/h2&gt;

&lt;p&gt; 
  Before you start running the Jenkins pipeline you need to ssh to your environment and restart the deployment that you are running cappa against with this command:&lt;br&gt;
  &lt;i&gt;kubectl rollout restart deployment &apos;deployment_name&apos;&lt;/i&gt;&lt;br&gt;
  Next you check which workernode is assigned to the newly created pod with this command:&lt;br&gt;
  &lt;i&gt;kubectl get pods -o wide -n enmXYZ | grep &apos;deployment_name&apos;&lt;/i&gt;&lt;br&gt;
  From this you will get the name of the workernode assigned to your pod and with this:&lt;br&gt;
  &lt;i&gt;kubectl get nodes -o wide | grep workernode_name&lt;/i&gt;&lt;br&gt;
    &lt;br&gt;
    It will look something like this:&lt;br&gt;
  &lt;b&gt;eccd@director-0-ccd-c10a013:~&gt; &lt;/b&gt;kubectl rollout restart deployment autoidservice&lt;br&gt;
  	deployment.apps/autoidservice restarted&lt;br&gt;
  &lt;b&gt;eccd@director-0-ccd-c10a013:~&gt;&lt;/b&gt; kubectl get pods -o wide -n enm1013 | grep autoidservice&lt;br&gt;
	autoidservice-659c68fd5f-kkv8g &amp;emsp 0/3 &amp;emsp PodInitializing &amp;emsp 0 &amp;emsp 16s &amp;emsp 192.168.82.40 &amp;emsp worker-application-p40rp2nf-ccd-c10a013 &amp;emsp none &amp;emsp none &lt;br&gt;
	autoidservice-848fcfbd64-sll7n &amp;emsp 3/3 &amp;emsp Terminating &amp;emsp 10 &amp;emsp 7h23m &amp;emsp 192.168.101.153 &amp;emsp worker-application-7az786tt-ccd-c10a013 &amp;emsp none &amp;emsp none &lt;br&gt;
  &lt;b&gt;eccd@director-0-ccd-c10a013:~&gt;&lt;/b&gt; kubectl get nodes -o wide -n enm1013 | grep worker-application-p40rp2nf-ccd-c10a013&lt;br&gt;
	worker-application-p40rp2nf-ccd-c10a013 &amp;emsp Ready &amp;emsp worker &amp;emsp 16d &amp;emsp v1.21.1   10.0.10.195 &amp;emsp &lt;none&gt; &amp;emsp SUSE Linux Enterprise Server 15 SP2 &amp;emsp 5.3.18-24.67-default &amp;emsp containerd://1.4.4
&lt;br&gt;&lt;br&gt;
  
  
  You can then put this address into your config file and convert it to base64.
  &lt;br&gt;
  This Jenkins Pipeline starts by running the cappa_install script which checks if all the rpms and cappa files are installed and if they are not they then get installed.
  Then the cappa_running_tool is executed and takes between five and ten minutes. Do not cancel the Jenkins Pipeline while the cappa_running_tool is executing or else 
  cappa will not be able to stop gracefully and you will have to follow the steps below to fix cappa on your workernode.
  &lt;br&gt;&lt;br&gt;
    Next cappa_extract is executed, sometimes this can fail saying that the database image is malformed so it is set to retry three times in this event. If it fails all three times 
  you will have to run the pipeline again.
  Cappa_extract creates the cappa_out folder in /var/tmp which then allows the cappa_query scripts to run. The html report is created first and then then security context for your 
  pod is generated.
  &lt;br&gt;&lt;br&gt;
    The cappa_exempt script is then run and all the output files are moved into the one folder which is archieved so that every file created is saved as an output.
  
  &lt;br&gt;
  &lt;h4&gt; Security Context Diff &lt;/h4&gt;
&lt;p&gt;
  When the security_context_diff boolean is marked true this section of the pipeline is run, when false this section is ignored.
  A previously generated security context yaml is converted to Base64 and given as a parameter so that the cappa_query gen_pod_sec_context_diff
  function can be run. 
&lt;/p&gt;

&lt;br&gt;

&lt;h4&gt; Cappa is already running error &lt;/h4&gt;

&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;2021&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;08&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;17&lt;/span&gt;:&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;39&lt;/span&gt;:&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;26&lt;/span&gt; INFO: cappa_running_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py: Cappa &lt;span style=&quot;color: #000000; font-weight: bold&quot;&gt;is&lt;/span&gt; already running
DO you want to stop cappa: yes&lt;span style=&quot;color: #333333&quot;&gt;/&lt;/span&gt;no&lt;span style=&quot;color: #FF0000; background-color: #FFAAAA&quot;&gt;?&lt;/span&gt;  &lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;2021&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;08&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;17&lt;/span&gt;:&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;39&lt;/span&gt;:&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;26&lt;/span&gt; INFO: cappa_running_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py: Error running cappa
&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;2021&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;08&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;10&lt;/span&gt; &lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;17&lt;/span&gt;:&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;39&lt;/span&gt;:&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;26&lt;/span&gt; INFO: cappa_running_tool&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;py: Error running cappa
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt; 
  Above is a snippet from the output of a failed Cappa run. This run failed beacause Cappa was already running and Jenkins tried to start a new run at the same time.
  This error happens when Jenkins is interuppted after it starts cappa and before it stops cappa. In this instance cappa doesn&apos;t get stoppped and continues to run. 
  There are two known solutions for this at the moment:&lt;br&gt;
  &lt;b&gt; 1) &lt;/b&gt; The first way to solve this is to ssh to the workernode in question manually and delete the &apos;cappa_running&apos;, &apos;cappa&apos; and &apos;cappa-x.x.x.tar.gz&apos; files.
  Then run the jenkins pipeline again and the cappa_install script will re-install the required files. &lt;br&gt;
  &lt;b&gt; 2) &lt;/b&gt; The second way to fix this issue is to ssh to your workernode and delete the &apos;cappa_running&apos; file. Then enter the following commands:&lt;br&gt;
  &lt;i&gt;eccd@worker-application:~&gt; ps -aef | grep python | pgrep -f &apos;python /cappa&apos;&lt;/i&gt;&lt;br&gt;
  The output will be the id of the Cappa Process &lt;br&gt;&lt;br&gt;
  
  20506 
  
  The root processes here need to be killed to run Cappa again. They can be killed with this command:&lt;br&gt;
  
  &lt;b&gt;sudo su -c &apos;kill -s SIGINT 20506&apos;&lt;/b&gt;&lt;br&gt;
  Wait around ten seconds and run the previous &apos;ps -aef&apos; command to check is the cappa process still running.
  
  
  
  
&lt;br&gt;&lt;br&gt;
  &lt;h2&gt; Gerrit Links &lt;/h2&gt;
  &lt;p&gt;
    &lt;a href=&quot;https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/TORF-521425&quot;&gt;&gt; Create a Jenkins Job to run Cappa - TORF-521425 &lt;/a&gt;&lt;br&gt;
    &lt;a href=&quot;https://jira-oss.seli.wh.rnd.internal.ericsson.com/browse/TORF-507654&quot;&gt;&gt; Producing Cappa Reports TORF - 507654&lt;/a&gt;
  &lt;/p&gt;
&lt;br&gt;  
</description>
  <properties>
    <org.jenkinsci.plugins.configfiles.folder.FolderConfigFileProperty plugin="config-file-provider@3.6.3">
      <configs class="sorted-set">
        <comparator class="org.jenkinsci.plugins.configfiles.folder.FolderConfigFileProperty$1"/>
      </configs>
    </org.jenkinsci.plugins.configfiles.folder.FolderConfigFileProperty>
    <org.jenkinsci.plugins.docker.workflow.declarative.FolderConfig plugin="docker-workflow@1.23">
      <dockerLabel>CN_DesingRFA</dockerLabel>
      <registry plugin="docker-commons@1.16"/>
    </org.jenkinsci.plugins.docker.workflow.declarative.FolderConfig>
    <io.jenkins.blueocean.rest.impl.pipeline.credential.BlueOceanCredentialsProvider_-FolderPropertyImpl plugin="blueocean-pipeline-scm-api@1.23.2">
      <domain plugin="credentials@2.5">
        <name>blueocean-folder-credential-domain</name>
        <description>Blue Ocean Folder Credentials domain</description>
        <specifications/>
      </domain>
      <user>evadtam</user>
      <id>jenkins-generated-ssh-key</id>
    </io.jenkins.blueocean.rest.impl.pipeline.credential.BlueOceanCredentialsProvider_-FolderPropertyImpl>
    <org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty plugin="kubernetes@1.24.1">
      <permittedClouds/>
    </org.csanchez.jenkins.plugins.kubernetes.KubernetesFolderProperty>
    <org.jenkinsci.plugins.pipeline.maven.MavenConfigFolderOverrideProperty plugin="pipeline-maven@3.5.5">
      <settings class="jenkins.mvn.DefaultSettingsProvider"/>
      <globalSettings class="jenkins.mvn.DefaultGlobalSettingsProvider"/>
      <override>false</override>
    </org.jenkinsci.plugins.pipeline.maven.MavenConfigFolderOverrideProperty>
  </properties>
  <folderViews class="jenkins.branch.MultiBranchProjectViewHolder" plugin="branch-api@2.5.6">
    <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
  </folderViews>
  <healthMetrics>
    <com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric plugin="cloudbees-folder@6.14">
      <nonRecursive>false</nonRecursive>
    </com.cloudbees.hudson.plugins.folder.health.WorstChildHealthMetric>
  </healthMetrics>
  <icon class="jenkins.branch.MetadataActionFolderIcon" plugin="branch-api@2.5.6">
    <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
  </icon>
  <triggers/>
  <disabled>false</disabled>
  <sources class="jenkins.branch.MultiBranchProject$BranchSourceList" plugin="branch-api@2.5.6">
    <data>
      <jenkins.branch.BranchSource>
        <source class="jenkins.plugins.git.GitSCMSource" plugin="git@4.2.2">
          <id>blueocean</id>
          <remote>ssh://evadtam@gerrit.ericsson.se:29418/OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enm-cappa-utils</remote>
          <credentialsId>jenkins-generated-ssh-key</credentialsId>
          <traits>
            <jenkins.plugins.git.traits.BranchDiscoveryTrait/>
            <jenkins.plugins.git.traits.CleanBeforeCheckoutTrait>
              <extension class="hudson.plugins.git.extensions.impl.CleanBeforeCheckout">
                <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
              </extension>
            </jenkins.plugins.git.traits.CleanBeforeCheckoutTrait>
            <jenkins.plugins.git.traits.CleanAfterCheckoutTrait>
              <extension class="hudson.plugins.git.extensions.impl.CleanCheckout">
                <deleteUntrackedNestedRepositories>false</deleteUntrackedNestedRepositories>
              </extension>
            </jenkins.plugins.git.traits.CleanAfterCheckoutTrait>
            <jenkins.plugins.git.traits.LocalBranchTrait>
              <extension class="hudson.plugins.git.extensions.impl.LocalBranch">
                <localBranch>**</localBranch>
              </extension>
            </jenkins.plugins.git.traits.LocalBranchTrait>
          </traits>
        </source>
        <strategy class="jenkins.branch.DefaultBranchPropertyStrategy">
          <properties class="empty-list"/>
        </strategy>
      </jenkins.branch.BranchSource>
    </data>
    <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
  </sources>
  <factory class="org.jenkinsci.plugins.workflow.multibranch.WorkflowBranchProjectFactory">
    <owner class="org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject" reference="../.."/>
    <scriptPath>Jenkinsfile</scriptPath>
  </factory>
</org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject>