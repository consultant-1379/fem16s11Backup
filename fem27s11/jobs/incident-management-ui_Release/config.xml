<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>&lt;p&gt;This job build the artifact again with a full version number. Code coverage and Unit tests are ran again. If the job is successful the artifact is published to the CI Portal.&lt;/p&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>NODE</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>incident-management-ui_PCR</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@74.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.24.1">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@74.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.presentation.client.incidentmgt/incident-management-ui
ADMIN_CONTROL=true
SKIP_SONAR=false
SKIP_SONAR_GLOBAL=
PUBLISH_SITE=false
BRANCH=master
TEAM_NAME=
GERRIT_REFSPEC=refs/heads/master
SLAVE_LABEL=fem27s11_podc_CIAgent
JDK_HOME=JDK 1.8.0_291
JDK_SONAR=JDK 11.0.1-1
MVN_HOME=Maven 3.5.3
MVN_PCR=-V -U jacoco:prepare-agent install jacoco:report pmd:pmd
MVN_PCR_INT=-V -Dts -P jboss_managed_local install -U
MVN_Release=-V -Dresume=false release:prepare release:perform -DpreparationGoals="install -U" -Dgoals="clean deploy pmd:pmd jacoco:report -U" -DlocalCheckout=true -DskipTests=true
MVN_SONAR=sonar:sonar -Dsonar.login=${SONAR_AUTH_UAT} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.branch.name=${SONAR_BRANCH} -Dsonar.branch.target=master
VERSANT=false
VERSANT_DB_NAME=dps_integration
VERSANT_DB_VERSION=1.0.33
SQ_SERVER=sonarqube enterprise 89
TESTWARE_REPO=
IT_FOLDER=
MVN_VERIFY_BASE_OPTIONS=
SOURCES_DIR=.
JAVA_MONITORED_SERVICES=.*jboss.*
IT_REPORT_TYPE=surefire
COMPOSE_FILE=
TESTRUNNER_JAVA_VERSION=jdk8_tmp
SNAPSHOT_CODE_RPMS_CONTAINER=im_jboss
COMPOSE_HTTP_TIMEOUT=500
IGNORE_RPMS=
DEFAULT_TEAM=
AUTO_DELIVER=false
CREATE_DELIVERY_GROUP=false
PRE_TEST_SCRIPT=pre_test.sh
POST_TEST_SCRIPT=post_test.sh
DOCKER_COMPOSE_OPTIONS=-f docker-compose.yml -f docker-compose.netsim.yml
CI_SCRIPTS_VERSION=1.0.1057
ARQUILLIAN_CUCUMBER_OPTIONS=
INTEGRATION_TESTS=
ADDITIONAL_SYSTSEM_PROPERTIES=
TOPIC=
deployPackage=</propertiesContent>
        <secureGroovyScript plugin="script-security@1.78">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>@Library('ci-pipeline-lib') _
pipeline {
    agent { label env.SLAVE_LABEL }
    options {
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage('Pre-step') {
            steps {
                ci_pcr_pre()
            }
        }
        stage('Clone') {
            steps {
                ci_pcr_clone()
            }
        }
        stage('Init') {
            steps {
                ci_pcr_init()
                ci_delivery_group_init()
            }
        }
        stage('Release') {
            steps {
                ci_full_release_build()
                ci_merge_to_master()
            }
        }
        stage('Delivery-Group') {
            when {
                environment name: 'CREATE_DELIVERY_GROUP', value: 'true'
            }
            steps {
                ci_create_delivery_group()
            }
        }
        stage('Sonar') {
            when {
                environment name: 'SKIP_SONAR_GLOBAL', value: 'false'
            }
            steps {
                ci_release_sonar_test()
            }
        }
    }
    post {
        always {
            ci_release_post()
        }
    }
}
def ci_release_sonar_test() {
     withSonarQubeEnv(env.SQ_SERVER) {
        withMaven(jdk: env.JDK_SONAR, maven: env.MVN_HOME) {
            sh "mvn -U -V jacoco:prepare-agent install sonar:sonar -Dsonar.login=${SONAR_AUTH_UAT} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectVersion=${env.BUILD_VERSION}"
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>