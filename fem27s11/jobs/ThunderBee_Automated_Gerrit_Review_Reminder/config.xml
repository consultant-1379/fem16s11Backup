<?xml version="1.1" encoding="UTF-8" standalone="no"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs/>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@69.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.24.1">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@69.0.3">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@69.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@1.0.3">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@69.0.3">
      <enabled>false</enabled>
      <userDomainSuffix/>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
    <de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty plugin="jenkinswalldisplay@0.6.30"/>
    
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>ENM-SLAVE-GE-7_2</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(System)</jdk>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 9,14,16,18 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>import json
import subprocess
import sys
from pprint import pprint

READY_TOPIC = 'TB_Review_Ready'
EARLY_FEEDBACK_TOPIC = 'TB_Early_Feedback'
NOT_READY_TOPIC = "TB_Not_Ready"

MINIMUM_NUMBER_OF_REVIEWERS=3 # if we want to filter on reviews with X number of reviews, not currently used

review_ready_json='ssh -p 29418 gerrit.ericsson.se gerrit query topic:' + READY_TOPIC + ' NOT status:merged NOT status:Abandoned  --comments --all-reviewers --patch-sets --format=JSON'
early_feedback_reviews='ssh -p 29418 gerrit.ericsson.se gerrit query topic:' + EARLY_FEEDBACK_TOPIC + ' NOT status:merged NOT status:Abandoned  --comments --all-reviewers --patch-sets --format=JSON'
not_ready_reviews='ssh -p 29418 gerrit.ericsson.se gerrit query topic:' + NOT_READY_TOPIC + ' NOT status:merged NOT status:Abandoned  --comments --all-reviewers --patch-sets --format=JSON'

# Functional ID for ENM CI

#useful down the line
# OR project:	OSS/com.ericsson.oss.services.mtg/maintrack-testsuite-testware NOT topic:Not_Ready NOT status:merged NOT status:Abandoned 
# OR OSS/com.ericsson.oss.services.mtg/xyz NOT topic:Not_Ready NOT status:merged NOT status:Abandoned

def get_number_of_reviewers(input):
	numberOfReviewers = 0
	if 'allReviewers' in input:
		# numberOfReviewers = len(input['allReviewers'])
		for reviewer in input['allReviewers']: 
                        if reviewer['username'] not in ['enmsonar', 'enmadm100', input['owner']['username'], 'axisadm']:
				numberOfReviewers += 1
	return numberOfReviewers

def filter_reviews_less_than_minimum_reviewers(input, mininum):
	output = []
	for review in input:
		numberOfReviewers = get_number_of_reviewers(review)
		if numberOfReviewers &lt; mininum:
			output.append(review)
	return output

def filter_reviews(input):
	output = []
	for entry in input:
		if 'owner' in entry:
			output.append(entry)
	return output

def filter_json(input):
	output = []
	for entry in input:
		if is_json(entry):
			output.append(json.loads(entry))
	return output

def is_json(myjson):
	try:
		json_object = json.loads(myjson)
	except ValueError, e:
		return False
	return True

def create_email_section(json, topic, file):
        SECTION = '&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;This table is for reviews which have the topic \"' + topic + '\"&lt;/th&gt;&lt;th class=\'align-center\'&gt;Link&lt;/th&gt;&lt;th&gt;Owner&lt;/th&gt;&lt;th class=\'align-center\'&gt;Active Reviewers&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;'
	reviews =  filter_reviews(filter_json(execute_command(json)))
        for review in reviews:
		SECTION += '&lt;tr&gt;&lt;td&gt;' + review['commitMessage'][:len(review['commitMessage'])].split('\n')[0] + '&lt;/td&gt; '
		SECTION += '&lt;td class=\'align-center\'&gt;&lt;a href=\"' + review['url'] + '\"&gt;Review&lt;/a&gt;' + ' &lt;/td&gt;'
		SECTION += '&lt;td class=\'align-right\'&gt;' + review['owner']['name'] + ' &lt;/td&gt;'
		SECTION += '&lt;td class=\'align-right\'&gt;' + str(get_number_of_reviewers(review)) + '&lt;/td&gt;&lt;/tr&gt;'
        SECTION += '&lt;/tbody&gt;&lt;/table&gt;&lt;/br&gt;'
	return SECTION

def execute_command(command):
	p = subprocess.Popen([command], stdout=subprocess.PIPE, stderr=None, shell=True)
	bytes = p.communicate()[0]
	text = bytes.decode('utf-8')
	lines = text.split('\n')
        return lines

# reviewsThatNeedReviewers = filter_reviews_less_than_minimum_reviewers(allReviews, MINIMUM_NUMBER_OF_REVIEWERS)
# pprint(reviewsThatNeedReviewers)

#if len(reviewsThatNeedReviewers) == 0:
#	print 'No reviews are pending volunteers'
#	sys.exit(0)

EMAIL_SUBJECT = 'ThunderBee Open Reviews'

EMAIL_CONTENT = '&lt;p&gt;*Only open reviews will be shown, abandoned reviews are excluded.&lt;/br&gt;'
EMAIL_CONTENT = 'If you want your review in the list below apply the topics as per the appropriate section on &lt;a href="https://confluence-nam.lmera.ericsson.se/display/ERSD/Automated+Gerrit+Review+Reminder"&gt;confluence&lt;/a&gt;&lt;/br&gt;'
EMAIL_CONTENT += 'The "No topic" table is all reviews which haven\'t been assigned a topic, yet.&lt;/br&gt;&lt;/p&gt;'
EMAIL_CONTENT += create_email_section(review_ready_json, READY_TOPIC, file)
EMAIL_CONTENT += create_email_section(early_feedback_reviews, EARLY_FEEDBACK_TOPIC, file)
EMAIL_CONTENT += create_email_section(not_ready_reviews, NOT_READY_TOPIC, file)

print(EMAIL_CONTENT)

#write email.properties files
file = open( 'email.properties', 'w' )
file.write( 'EMAIL_SUBJECT=' + EMAIL_SUBJECT.encode("utf-8") + '\n' )
file.write( 'EMAIL_CONTENT =' + EMAIL_CONTENT.encode("utf-8") + '\n' )
file.close()</command>
    </hudson.plugins.python.Python>
    <EnvInjectBuilder plugin="envinject@2.1.5">
      <info>
        <propertiesFilePath>email.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
  </builders>
  <publishers>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.63">
      <recipientList>ruaidhri.garrett@ericsson.com,PDLENMCOUN@pdl.internal.ericsson.com, gelli.sreelatha@tcs.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern/>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>both</contentType>
      <defaultSubject>$EMAIL_SUBJECT</defaultSubject>
      <defaultContent>&lt;html&gt;
&lt;head&gt;
&lt;style&gt;

table {
    border-collapse: collapse;
    width : 100%;
   
}
th {
        font: bold 20px  Arial, Helvetica,"Trebuchet MS", Verdana, sans-serif;
	color: white;
        background-color:#4c686f;
	border-right: 1px solid #C1DAD7;
	border-bottom: 1px solid #C1DAD7;
	border-top: 1px solid #C1DAD7;
        border-left: 1px solid #C1DAD7;
	text-align: left;
	padding: 6px 6px 6px 12px;
	
}

td{
	font: 16px Arial, Helvetica,"Trebuchet MS", Verdana, sans-serif;
	color: #4c686f;
	border-right: 1px solid #C1DAD7;
	border-bottom: 1px solid #C1DAD7;
        border-left: 1px solid #C1DAD7;
	border-top: 1px solid #C1DAD7;
	text-align: left;
	padding: 6px 6px 6px 12px;	
}

p {
font: bold 11px Arial, Helvetica,"Trebuchet MS", Verdana, sans-serif;
color: #4c686f;
margin-left: 20px
}

.align-center {
	text-align: center;
}

.align-right {
        margin-right: 5px;
	text-align: right;
}
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

$EMAIL_CONTENT
&lt;/body&gt;
&lt;/html&gt;</defaultContent>
      <attachmentsPattern/>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <postsendScript>$DEFAULT_POSTSEND_SCRIPT</postsendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <from/>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers/>
</project>