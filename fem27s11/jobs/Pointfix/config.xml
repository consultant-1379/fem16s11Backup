<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>&lt;p&gt;This job is to deploy point fixes version&lt;/p&gt;&#xd;
&#xd;
&lt;b&gt;&lt;font color=&quot;red&quot;&gt;Note: The job is configured with below default environment variables.&lt;/font&gt;&lt;/b&gt;&lt;br&gt;&#xd;
&lt;ul&gt;&#xd;
&lt;li&gt;JDK version=JDK 1.8.0_101 vApp&lt;/li&gt;&#xd;
&lt;li&gt;Maven version=Maven 3.5.3&lt;/li&gt;&#xd;
  //&lt;li&gt;Slave=GridEngine_RHEL6.10&lt;/li&gt;&#xd;
&lt;li&gt;Slave=ENM-SLAVE-GE-7_2&lt;/li&gt;&#xd;
&lt;li&gt;Maven goal=-V -Dresume=false release:prepare release:perform -DpreparationGoals=&quot;install -U&quot; -Dgoals=&quot;clean deploy pmd:pmd jacoco:report -U&quot; -DlocalCheckout=true&lt;/li&gt;&#xd;
&lt;li&gt;PYTHON_HOME=/proj/ciexadm200/tools/python-2.7.8&lt;/li&gt;&#xd;
&lt;li&gt;ENM_PY=/proj/ciexadm200/tools/enm_py-2.7.8_reqmnts-2.0&lt;/li&gt;&#xd;
&lt;li&gt;PYTHONPATH=$ENM_PY/usr/lib/python2.7/site-packages:$ENM_PY/usr/lib64/python2.7/site-packages&lt;/li&gt;&#xd;
&lt;li&gt;PATH+EXTRA=/proj/ciexadm200/tools/python-2.7.8/bin:$ENM_PY/usr/bin&lt;/li&gt;&#xd;
&lt;/ul&gt;&#xd;
&lt;b&gt;&lt;font color=&quot;red&quot;&gt;Note: If the point fix need to done with other versions of java or maven or with different maven goal then please refer below confluence page&lt;/font&gt;&lt;/b&gt;&lt;br&gt;&#xd;
&lt;a href=&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/CICD/Pipeline+Point+Fix&quot;&gt;Pipeline point fix confluence page&lt;/a&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition plugin="validating-string-parameter@2.4">
          <name>BRANCH_NAME</name>
          <description>Please enter the branch that needs to be updated here &lt;br&gt;&lt;br&gt; The branch name must respect the following syntax: &lt;br&gt; dPF_drop_version &lt;br&gt; where version is a serie of three numbers splitted by points (e.g. dPF_drop_1.0.1). &lt;br&gt;&lt;br&gt; Branch name should reflect that of an existing branch on the repository. &lt;br&gt; If there is not a branch with the syntax described above then it must be created a new one, using the desired revision.</description>
          <defaultValue></defaultValue>
          <regex>(dPF_drop_).*(\d)+(\.\d+)+(\.\d+)</regex>
          <failedValidationMessage>You cannot apply point fixes to the master branch.</failedValidationMessage>
        </hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition>
        <hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition plugin="validating-string-parameter@2.4">
          <name>FIX_VERSION</name>
          <description>Please enter the version you wish to release here. If you are point fixing to a certain drop then use the same minor version that you delivered and increment the incremental version to be one above the last version you released on that minor version. &lt;br&gt;&lt;br&gt; I.E. If you released 1.2.10 to 15.12 and need to point fix this then you should deliver 1.2.x here. x being a version above the last one you released. NOTE. Snapshot will be added automatically so you do not need to put -SNAPSHOT here</description>
          <defaultValue></defaultValue>
          <regex>(\d)+(\.\d+)+(\.\d+)</regex>
          <failedValidationMessage>Please enter a valid fix-version.</failedValidationMessage>
        </hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPOSITORY</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>JDK_HOME=JDK 1.8.0_101 vApp
MVN_HOME=Maven 3.5.3
//SLAVE_LABEL=GridEngine_RHEL6.10
SLAVE_LABEL=ENM-SLAVE-GE-7_2
MVN_Release=release:prepare release:perform -Dgoals=&quot;deploy -DdeployOnly -U&quot; -DlocalCheckout=true -DskipTests=true -Dmaven.test.skip=true -Darguments=&quot;-Dmaven.javadoc.skip=true -DskipTests -DskipTests&quot;
PYTHON_HOME=/proj/ciexadm200/tools/python-2.7.8
ENM_PY=/proj/ciexadm200/tools/enm_py-2.7.8_reqmnts-2.0
PYTHONPATH=$ENM_PY/usr/lib/python2.7/site-packages:$ENM_PY/usr/lib64/python2.7/site-packages
PATH+EXTRA=/proj/ciexadm200/tools/python-2.7.8/bin:$ENM_PY/usr/bin</propertiesContent>
        <secureGroovyScript plugin="script-security@1.78">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
          <spec></spec>
          <gerritProjects>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
              <compareType>PLAIN</compareType>
              <pattern></pattern>
              <branches>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>PLAIN</compareType>
                  <pattern></pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              </branches>
              <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          </gerritProjects>
          <dynamicGerritProjects class="empty-list"/>
          <skipVote>
            <onSuccessful>false</onSuccessful>
            <onFailed>false</onFailed>
            <onUnstable>false</onUnstable>
            <onNotBuilt>false</onNotBuilt>
          </skipVote>
          <silentMode>false</silentMode>
          <notificationLevel></notificationLevel>
          <silentStartMode>false</silentStartMode>
          <escapeQuotes>true</escapeQuotes>
          <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
          <dependencyJobsNames></dependencyJobsNames>
          <commitMessageParameterMode>BASE64</commitMessageParameterMode>
          <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
          <commentTextParameterMode>BASE64</commentTextParameterMode>
          <buildStartMessage></buildStartMessage>
          <buildFailureMessage></buildFailureMessage>
          <buildSuccessfulMessage></buildSuccessfulMessage>
          <buildUnstableMessage></buildUnstableMessage>
          <buildNotBuiltMessage></buildNotBuiltMessage>
          <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
          <customUrl></customUrl>
          <serverName>Gerrit_UAT_3.4</serverName>
          <triggerOnEvents>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
              <excludeDrafts>false</excludeDrafts>
              <excludeTrivialRebase>false</excludeTrivialRebase>
              <excludeNoCodeChange>false</excludeNoCodeChange>
              <excludePrivateState>false</excludePrivateState>
              <excludeWipState>false</excludeWipState>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginDraftPublishedEvent/>
          </triggerOnEvents>
          <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
          <triggerConfigURL></triggerConfigURL>
          <triggerInformationAction/>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>@Library(&apos;ci-pipeline-lib&apos;) _
pipeline{
    agent{
        label env.SLAVE_LABEL
    }
    options{
        timestamps()
        timeout(time: 120, unit: &apos;MINUTES&apos;)
    }
    stages{
        stage(&quot;Pre-pointfix&quot;){
            steps{
                script{
                    env.REPO=&quot;${params.REPOSITORY}&quot;
                    artifact=REPO.split(&quot;/&quot;)
                    env.BRANCH=&quot;${params.BRANCH_NAME}&quot;
                    env.FIX_VERSION=&quot;${params.FIX_VERSION}&quot;
                    try{
                        sh &apos;&apos;&apos;
                        set +x
                        git archive --remote=${GERRIT_MIRROR}/${REPOSITORY}.git ${BRANCH} pipeline_local_pointfix.cfg | tar -xO pipeline_local_pointfix.cfg  &gt; pipeline_local_pointfix.cfg
                        &apos;&apos;&apos;
                        print &quot;**********Configuring below environment variables**********&quot;
                        def envVariableMap = readProperties  file: &apos;pipeline_local_pointfix.cfg&apos;
                        def String[] var = [&apos;MVN_HOME&apos;,&apos;JDK_HOME&apos;,&apos;MVN_Release&apos;,&apos;ENM_PY&apos;,&apos;PYTHONPATH&apos;,&apos;PYTHON_HOME&apos;,&apos;PATH+EXTRA&apos;,&apos;SLAVE_LABEL&apos;]
                        envVariableMap.each { entry -&gt;
                        if (var.contains(&quot;$entry.key&quot;)) {
                            env.&quot;$entry.key&quot; = &quot;$entry.value&quot;.trim()
                            }
                        }
                    }
                    catch(Exception e){
                        print&quot;**********Repository doesn&apos;t contain pipeline_local_pointfix.cfg file. Hence configuring default environment variables**********&quot;
                    }
                    def envVariable=[&apos;MVN_HOME&apos;,&apos;JDK_HOME&apos;,&apos;MVN_Release&apos;,&apos;ENM_PY&apos;,&apos;PYTHONPATH&apos;,&apos;PYTHON_HOME&apos;,&apos;PATH+EXTRA&apos;,&apos;SLAVE_LABEL&apos;]
                    for(var in envVariable){
                        print env.&quot;$var&quot;
                    }
                    deleteDir()
                }
            }
        }
        stage(&quot;Start&quot;){
            agent{
                label env.SLAVE_LABEL
            }
            stages{
                stage(&apos;Pre-step&apos;) {
                    steps {
                        ci_pcr_pre()
                    }
                }
                stage(&apos;Clone&apos;) {
                    steps {
                        ci_pcr_clone()
                    }       
                }
                stage(&apos;Init-pointfix&apos;){
                    steps{
                        setBuildName()
                        checkIntegrationPom()
                        checkVersionInNexus()
                        checkSnapshot()
                    }
                }
                stage(&apos;Release&apos;){
                    steps{
                        ci_pre_pointfix_build()
                        ci_pointfix_release_build()
                    }
                }
            }
        }
    }
}
def setBuildName() {
    currentBuild.displayName = &quot;${BUILD_NUMBER} | ${artifact[2]} | ${env.BRANCH}&quot;
}
def checkIntegrationPom()
{
    sh &apos;&apos;&apos;
    set +x
    NEXUS_HOST=&quot;arm1s11-eiffel004.eiffel.gic.ericsson.se:8443&quot;
    
    PARENT_GROUP_ENM=&quot;com.ericsson.nms&quot;
    PARENT_GROUP_CDS=&quot;com.ericsson.cds&quot; 
    PARENT_ARTIFACT=&quot;integration&quot;

    #Find group ID and artifact ID of the repo&apos;s parent
    REPO_PARENT_GROUP=`awk &apos;/&lt;parent&gt;/,/&lt;\\/parent&gt;/&apos; pom.xml | awk &apos;/&lt;groupId&gt;/,/&lt;\\/groupId&gt;/&apos; | awk -v FS=&quot;(&lt;groupId&gt;|&lt;/groupId&gt;)&quot; &apos;{print $2}&apos;`
    REPO_PARENT_ARTIFACT=`awk &apos;/&lt;parent&gt;/,/&lt;\\/parent&gt;/&apos; pom.xml | awk &apos;/&lt;artifactId&gt;/,/&lt;\\/artifactId&gt;/&apos; | awk -v FS=&quot;(&lt;artifactId&gt;|&lt;/artifactId&gt;)&quot; &apos;{print $2}&apos;`


    #Update project POM with latest integration POM version 
    integration_update()
    {
        PARENT_GROUP=$1

        PARENT_VERSION=`awk &apos;/&lt;parent&gt;/,/&lt;\\/parent&gt;/&apos; pom.xml | awk &apos;/&lt;version&gt;/,/&lt;\\/version&gt;/&apos; | awk -v FS=&quot;(&lt;version&gt;|&lt;/version&gt;)&quot; &apos;{print $2}&apos;`
        echo &quot;PARENT_VERSION: $PARENT_VERSION&quot;
    
        #ENM_VERSION=$( curl --silent &quot;https://${NEXUS_HOST}/nexus/service/local/lucene/search?g=${PARENT_GROUP}&amp;a=${PARENT_ARTIFACT}&quot; | sed -n &apos;s|&lt;latestRelease&gt;\\(.*\\)&lt;/latestRelease&gt;|\\1|p&apos; | sed -e &apos;s/^[ \\t]*//&apos; | tail -1 )
        ENM_VERSION=15.2.0.33    # version hardcoded as the latest version is 15.2.0.34 released as part of CIP-37698
        echo &quot;ENM_VERSION: $ENM_VERSION&quot;
    
        if [ $PARENT_VERSION != $ENM_VERSION ]
        then
            find . -name &quot;pom.xml&quot; -exec sed -i &quot;s/&gt;$PARENT_VERSION&lt;/&gt;$ENM_VERSION&lt;/g&quot; {} \\;
            git add .
            git commit -m &quot;Integration pom version update&quot;
        fi
    }

    if [ $REPO_PARENT_GROUP == &quot;$PARENT_GROUP_ENM&quot; ] &amp;&amp; [ $REPO_PARENT_ARTIFACT == &quot;$PARENT_ARTIFACT&quot; ]
    then
        integration_update ${PARENT_GROUP_ENM}    
    elif [ $REPO_PARENT_GROUP == &quot;$PARENT_GROUP_CDS&quot; ] &amp;&amp; [ $REPO_PARENT_ARTIFACT == &quot;$PARENT_ARTIFACT&quot; ]
    then
        integration_update ${PARENT_GROUP_CDS}
    fi
    &apos;&apos;&apos;
}
def checkVersionInNexus()
{
    sh &apos;&apos;&apos;
    set +x
    NEXUS_HOST=&quot;arm1s11-eiffel004.eiffel.gic.ericsson.se:8443&quot;

    #checking the given version to git labels
    allVersions=`git ls-remote --tags origin  | awk -F\\- &apos;{print $NF}&apos;  | sed &apos;s/ //&apos; | sed &apos;s/{//&apos; | sed &apos;s/}//&apos; | tr -d &apos;^&apos; | uniq`

    for oneVersion in $allVersions
    do
	    if [ &quot;$oneVersion&quot; = &quot;${FIX_VERSION}&quot; ]; then 
    	    echo -e &quot;\n\n\nFix version ${FIX_VERSION} already available in git\n\n\n&quot;     
            exit 1
	    fi;
    done

    biggerUsedVersion=${FIX_VERSION}

    for oneVersion in $allVersions
    do
	    IFS=&apos;.&apos; read -r -a currentVersion &lt;&lt;&lt; &quot;$oneVersion&quot;
        IFS=&apos;.&apos; read -r -a expectedVersion &lt;&lt;&lt; &quot;${FIX_VERSION}&quot;
    
        if [ ${currentVersion[0]} -eq  ${expectedVersion[0]} ] &amp;&amp; [ ${currentVersion[1]} -eq  ${expectedVersion[1]} ] &amp;&amp; [ ${currentVersion[2]} -gt  ${expectedVersion[2]} ]; then  
            biggerUsedVersion=$oneVersion
	    fi;
    done

    if [ &quot;$biggerUsedVersion&quot; = &quot;${FIX_VERSION}&quot; ]; then
    #	echo &quot;Using Available Version = ${FIX_VERSION}&quot;
        git_check=1
    else
    #	echo &quot;Bigger used version available $biggerUserdVersion&quot;
        git_check=0
    fi;


    # Performing preliminary checks on nexus

    nexus_repo_address=`echo ${REPOSITORY} | sed &quot;s/\\./\\//g&quot; | cut -d &apos;/&apos; -f2-`
    nexus_allVersions=`curl https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/content/repositories/releases/$nexus_repo_address/maven-metadata.xml | grep &quot;&lt;version&gt;&quot; | awk -F &quot;&gt;|&lt;&quot; &apos;{print$3}&apos;`


    for nexus_oneVersion in $nexus_allVersions
    do
        if [ &quot;$nexus_oneVersion&quot; = &quot;${FIX_VERSION}&quot; ]; then
        echo -e &quot;\n\n\nFix version ${FIX_VERSION} already available in Nexus\n\n\n&quot;
        exit 1
        fi;
    done

    nexus_biggerUsedVersion=${FIX_VERSION}

    for nexus_oneVersion in $nexus_allVersions
    do
        IFS=&apos;.&apos; read -r -a nexus_currentVersion &lt;&lt;&lt; &quot;$nexus_oneVersion&quot;
        IFS=&apos;.&apos; read -r -a nexus_expectedVersion &lt;&lt;&lt; &quot;${FIX_VERSION}&quot;

        if [ ${nexus_currentVersion[0]} -eq  ${nexus_expectedVersion[0]} ] &amp;&amp; [ ${nexus_currentVersion[1]} -eq  ${nexus_expectedVersion[1]} ] &amp;&amp; [ ${nexus_currentVersion[2]} -gt  ${nexus_expectedVersion[2]} ]; then
            nexus_biggerUsedVersion=$nexus_oneVersion
            fi;
    done

    if [ &quot;$nexus_biggerUsedVersion&quot; = &quot;${FIX_VERSION}&quot; ]; then
    #   echo &quot;Using Available Version = ${FIX_VERSION}&quot;
        nexus_check=1
    else
    #   echo &quot;Bigger used version available on nexus $nexus_biggerUsedVersion&quot;
        nexus_check=0
    fi;

    if [ &quot;$nexus_check&quot; = &quot;1&quot; ] &amp;&amp; [ &quot;$nexus_check&quot; = &quot;1&quot; ];  then
        echo -e &quot;\n\n\nThe selected Point Fix Version is ok. Proceeding with the job\n\n\n&quot;
        exit 0
    else         
		echo -e &quot;\n\n\nThe selected Point Fix Version is not ok. Job is failing. Please use patchset version greater than $biggerUsedVersion. \nCheck the Console log for details\n\n\n&quot;
        exit 1
    fi
    &apos;&apos;&apos;
}
def checkSnapshot(){
    sh&apos;&apos;&apos;
    set +x
    #Get current version of project
    currentVersion=`/proj/ciexadm200/tools/apache-maven-3.5.3/bin/mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version|grep &quot;^[0-9]*\\.[0-9]*\\.[0-9]*&quot;`

    #Check if there is a SNAPSHOT in the pom
    if [[ $currentVersion == *SNAPSHOT ]]; then
        echo &quot;Snapshot in pom!&quot;
    else
 	    echo &quot;Adding Snapshot in pom!&quot;
 	
	    #Replace versions with SNAPSHOT version
	    /proj/ciexadm200/tools/apache-maven-3.5.3/bin/mvn versions:set -DnewVersion=$currentVersion-SNAPSHOT
 	
	    #clean all untracted files
        git clean -fdx

	    #Add files
	    git add .
 	    git commit -m &quot;Adding Snapshot to Project&quot;

    fi

    git status
    git reset --hard $BRANCH_NAME
    
    #Set the version of the point fix to deploy 
    /proj/ciexadm200/tools/apache-maven-3.5.3/bin/mvn -X versions:set -DnewVersion=&quot;${FIX_VERSION}-SNAPSHOT&quot;

    #preliminary versioning check: compare if every pom files has version modified. If not potential error in deploy  
    echo $&apos;\n&apos;
    echo -e &quot;===== Check Modifed Pom =====&quot;
    echo -e &quot;  --- Total Number of Pom in repo ---  &quot;
    find . -name &quot;pom.xml&quot; -print &gt; ./AllPom.txt
    cat ./AllPom.txt| wc -l
    echo -e &quot;  --- Total Number of Pom modified ---  &quot;
    find . -name &quot;pom.xml&quot; -print | xargs grep -l &quot;${FIX_VERSION}-SNAPSHOT&quot; &gt; ./ModPom.txt
    cat ./ModPom.txt| wc -l
    echo -e &quot; --- Suspected POM list ---  &quot;
    diff ./AllPom.txt ./ModPom.txt &gt; ErrPom.txt
    cat ./ErrPom.txt
    echo -e &quot;===== Check Modifed Pom END =====&quot;
    echo $&apos;\n&apos;

    git add .
    if [ &quot;$(git status --porcelain)&quot; != &quot;&quot; ]; then
    git commit -m &quot;versions update&quot;
    fi
    &apos;&apos;&apos;
}
def ci_pointfix_release_build() {
    // maven goal to deploy
    withMaven(jdk: env.JDK_HOME, maven: env.MVN_HOME, options: [junitPublisher(healthScaleFactor: 1.0)]) {
        if (env.MVN_Release) {
              env.MAVEN_COMMAND =  env.MVN_Release
        }        
        def buildResult = sh returnStatus: true, script: &apos;mvn &apos; + env.MAVEN_COMMAND
        println &quot;Build Return Status: &quot; + buildResult
        if (buildResult != 0) {
            currentBuild.rawBuild.result = Result.FAILURE
            throw new hudson.AbortException(&apos;Release Failed, Failing Build&apos;)
        }
    }
    // curl command to align the latest and release tag version in metadata.xml file
    sh &apos;&apos;&apos;
    removeParent=&quot;${REPOSITORY/OSS/}&quot;
    artifactpath=&quot;${removeParent//.//}&quot;

    echo &quot;${artifactpath}&quot;

    curl -v -u NexusID:nexuspwdrestapi! -X DELETE https://arm1s11-eiffel004.eiffel.gic.ericsson.se:8443/nexus/service/local/metadata/repositories/releases/content${artifactpath}
    &apos;&apos;&apos;
}
def ci_pre_pointfix_build(){
    //CIP-31822:maven goal to build the project by skipping test case to avoid git tag issue
    withMaven(jdk: env.JDK_HOME, maven: env.MVN_HOME, options: [junitPublisher(healthScaleFactor: 1.0)]) {
        env.MAVEN_COMMAND=&quot;-V -U -Dresume=false clean install -DlocalCheckout=true -Pintegration-tests -DskipTests=true -Dmaven.test.skip=true -Darguments=\&quot;-Dmaven.javadoc.skip=true\&quot;&quot;      
        def buildResult = sh returnStatus: true, script: &apos;mvn &apos; + env.MAVEN_COMMAND
        println &quot;Build Return Status: &quot; + buildResult
        if (buildResult != 0) {
            currentBuild.rawBuild.result = Result.FAILURE
            throw new hudson.AbortException(&apos;Release Failed, Failing Build&apos;)
        }
    }    
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>