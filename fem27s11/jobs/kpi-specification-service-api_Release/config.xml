<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>&lt;br&gt; This job build the artifact again with a full version number. Code coverage and Unit tests are ran again. If the job is successful the artifact is published to the CI Portal.&lt;br&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>NODE</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>kpi-specification-service-api_PCR</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.services/kpi-specification-service-api
ADMIN_CONTROL=true
SKIP_SONAR=false
SKIP_SONAR_GLOBAL=
PUBLISH_SITE=false
BRANCH=master
TEAM_NAME=
GERRIT_REFSPEC=refs/heads/master
SLAVE_LABEL=fem27s11_podc_CIAgent
JDK_HOME=JDK 1.8.0_291
JDK_SONAR=JDK 11.0.1-1
MVN_HOME=Maven 3.5.3
MVN_PCR=-V -U jacoco:prepare-agent install jacoco:report pmd:pmd
MVN_PCR_INT=-V -Dts -P jboss_managed_local install -U
MVN_Release=-V -Dresume=false release:prepare release:perform -DpreparationGoals=&quot;install -U&quot; -Dgoals=&quot;clean deploy pmd:pmd jacoco:report -U&quot; -DlocalCheckout=true
MVN_SONAR=sonar:sonar -Dsonar.login=${SONAR_AUTH_UAT} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.branch.name=${SONAR_BRANCH} -Dsonar.branch.target=${BRANCH}
MVN_ARQUILLIAN=
POSTGRES=false
POSTGRES_DB_NAME=my_pg_db
POSTGRES_DB_VERSION=10.9
VERSANT=false
VERSANT_DB_NAME=dps_integration
VERSANT_DB_VERSION=1.0.33
SQ_SERVER=sonarqube enterprise 89
TESTWARE_REPO=
IT_FOLDER=
MVN_VERIFY_BASE_OPTIONS=
SOURCES_DIR=.
JAVA_MONITORED_SERVICES=.*jboss.*
IT_REPORT_TYPE=surefire
COMPOSE_FILE=
TESTRUNNER_JAVA_VERSION=jdk8_tmp
SNAPSHOT_CODE_RPMS_CONTAINER=im_jboss
COMPOSE_HTTP_TIMEOUT=500
IGNORE_RPMS=
DEFAULT_TEAM=
AUTO_DELIVER=false
CREATE_DELIVERY_GROUP=false
PRE_TEST_SCRIPT=pre_test.sh
POST_TEST_SCRIPT=post_test.sh
DOCKER_COMPOSE_OPTIONS=-f docker-compose.yml
IT_REPO=OSS/com.ericsson.oss.mediation.pm.testsuite/pm-mediation-vertical-slice
INTEGRATION_TESTS=
ADDITIONAL_SYSTSEM_PROPERTIES=
TOPIC=
deployPackage=
PYTHON_HOME=/proj/ciexadm200/tools/python-2.7.8
ENM_PY=/proj/ciexadm200/tools/enm_py-2.7.8_reqmnts-2.0
PYTHONPATH=$ENM_PY/usr/lib/python2.7/site-packages:$ENM_PY/usr/lib64/python2.7/site-packages
PATH+EXTRA=/proj/ciexadm200/tools/python-2.7.8/bin:$ENM_PY/usr/bin
ARTIFACTS_WILDCARDS=**/*.log,**/*.ear,**/*.rpm</propertiesContent>
        <secureGroovyScript plugin="script-security@1.78">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>@Library(&apos;ci-pipeline-lib&apos;) _
pipeline {
    agent { label env.SLAVE_LABEL }
    options {
        timeout(time: 60, unit: &apos;MINUTES&apos;)
        timestamps()
    }
    stages {
        stage(&apos;Pre-step&apos;) {
            steps {
                ci_pcr_pre()
            }
        }
        stage(&apos;Clone&apos;) {
            steps {
                ci_pcr_clone()
            }
        }
        stage(&apos;Init&apos;) {
            steps {
                ci_pcr_init()
                ci_delivery_group_init()
            }
        }
        stage(&apos;Release&apos;) {
            steps {
                ci_full_release_build()
                ci_merge_to_master()
            }
        }
        stage(&apos;Delivery-Group&apos;) {
            when {
                environment name: &apos;CREATE_DELIVERY_GROUP&apos;, value: &apos;true&apos;
            }
            steps {
                ci_create_delivery_group()
            }
        }
        stage(&apos;Sonar&apos;) {
            when {
                environment name: &apos;SKIP_SONAR_GLOBAL&apos;, value: &apos;false&apos;
            }
            steps {
                ci_release_sonar_test()
            }
        }
    }
    post {
        always {
            ci_release_post()
            ci_reports()
        }
    }
}
def ci_release_sonar_test() {
     withSonarQubeEnv(env.SQ_SERVER) {
        withMaven(jdk: env.JDK_SONAR, maven: env.MVN_HOME) {
            sh &quot;mvn -U -V jacoco:prepare-agent install sonar:sonar -Dsonar.login=${SONAR_AUTH_UAT} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectVersion=${env.BUILD_VERSION}&quot;
        }
    }
}
def qualityGateCheck() {
    if (!env.GERRIT_HOST) {
        env.GERRIT_HOST = &quot;gerrit.ericsson.se&quot;
    }
    if (env.SKIP_SONAR &amp;&amp; env.SKIP_SONAR == &apos;true&apos;) {
        sh &apos;echo &quot;SKIP_SONAR -&gt; TRUE, disable Quality gate section&quot;&apos;
        env.SQ_MESSAGE=&quot;&apos;&quot;+&quot;SonarQube Quality Gate: ${DASHBOARD_URL}&quot;+&quot;&apos;&quot;
  
        if (env.GERRIT_CHANGE_NUMBER) {
        sh &apos;&apos;&apos;
         ssh -p 29418 ${GERRIT_HOST} gerrit review --label &apos;SQ-Quality-Gate=0&apos; --message ${SQ_MESSAGE} --project ${REPO} ${GERRIT_PATCHSET_REVISION}
        &apos;&apos;&apos;
        }
        if (env.TOPIC || env.GERRIT_CHANGE_NUMBERS) {
            ci_get_gerrit_revisions_list()
            def files = readFile(&quot;${WORKSPACE}/GerritRevisionsList.txt&quot;)
            def lines = files.readLines()
               for (PATCHSET_ITEM in lines) {
                   env.PATCHSET_REV=PATCHSET_ITEM
                    if (env.PATCHSET_REV != null &amp;&amp; !env.PATCHSET_REV.isEmpty()) {
                       sh &apos;&apos;&apos;
                        echo &quot;SQ Gate OFF - Trying to send SQ-Quality-Gate=0 on Revision: ${PATCHSET_REV}  for this project...&quot;
                        ssh -p 29418 ${GERRIT_HOST} gerrit review --label &apos;SQ-Quality-Gate=0&apos; --message ${SQ_MESSAGE} --project ${REPO} ${PATCHSET_REV}
                       &apos;&apos;&apos;
                    }
               }
            }
        if (qualityGate_status.replaceAll(&quot;\\s&quot;,&quot;&quot;) != &apos;OK&apos;) {
            manager.addBadge(&quot;error.gif&quot;, &quot;Patchset would have FAILED SQ Quality Gate threshold&quot;)
            manager.createSummary(&quot;error.gif&quot;).appendText(&quot;&lt;h2&gt;Patchset would have FAILED SQ Quality Gate threshold.&lt;/h2&gt; &lt;p&gt;See &lt;b&gt;&lt;a href=${DASHBOARD_URL}&gt; SQ report&lt;/a&gt;&lt;/b&gt; for more details&lt;/p&gt;&quot;, false, false, false, &quot;red&quot;)
        } else {
            manager.addBadge(&quot;accept.png&quot;, &quot;Patchset would have PASSED SQ Quality Gate threshold&quot;)
            manager.createSummary(&quot;accept.png&quot;).appendText(&quot;&lt;h2&gt;Nice! Patchset would have PASSED SQ Quality Gate threshold&lt;/h2&gt;&quot;, false, false, false, &quot;green&quot;)
        }
    } else {
        sh &apos;echo &quot;SKIP_SONAR -&gt; FALSE, proceeding to Quality Gate section&quot;&apos;
        if (qualityGate_status.replaceAll(&quot;\\s&quot;,&quot;&quot;) != &apos;OK&apos;) {
            env.SQ_MESSAGE=&quot;&apos;&quot;+&quot;SonarQube Quality Gate Failed: ${DASHBOARD_URL}&quot;+&quot;&apos;&quot;

            if (env.GERRIT_CHANGE_NUMBER) {
                sh &apos;&apos;&apos;
                 ssh -p 29418 ${GERRIT_HOST} gerrit review --label &apos;SQ-Quality-Gate=-1&apos; --message ${SQ_MESSAGE} --project ${REPO} ${GERRIT_PATCHSET_REVISION}
                &apos;&apos;&apos;
            }
            if (env.TOPIC || env.GERRIT_CHANGE_NUMBERS) {
                ci_get_gerrit_revisions_list()
                def files = readFile(&quot;${WORKSPACE}/GerritRevisionsList.txt&quot;)
                def lines = files.readLines()
                   for (PATCHSET_ITEM in lines) {
                       env.PATCHSET_REV=PATCHSET_ITEM
                        if (env.PATCHSET_REV != null &amp;&amp; !env.PATCHSET_REV.isEmpty()) {
                           sh &apos;&apos;&apos;
                            echo &quot;Trying to send SQ-Quality-Gate=-1 on Revision: ${PATCHSET_REV}  for this project...&quot;
                            ssh -p 29418 ${GERRIT_HOST} gerrit review --label &apos;SQ-Quality-Gate=-1&apos; --message ${SQ_MESSAGE} --project ${REPO} ${PATCHSET_REV}
                           &apos;&apos;&apos;
                        }
                   }
            }
            setQualityGateStatus()
            error &quot;Pipeline aborted due to quality gate failure!\n Report: ${env.DASHBOARD_URL}\n Pom might be incorrectly defined for code coverage: https://confluence-oss.seli.wh.rnd.internal.ericsson.com/pages/viewpage.action?pageId=309793813&quot;

        } else {
            env.SQ_MESSAGE=&quot;&apos;&quot;+&quot;SonarQube Quality Gate Passed: ${DASHBOARD_URL}&quot;+&quot;&apos;&quot;

            if (env.GERRIT_CHANGE_NUMBER) {
            sh &apos;&apos;&apos;
            ssh -p 29418 ${GERRIT_HOST} gerrit review --label &apos;SQ-Quality-Gate=+1&apos; --message ${SQ_MESSAGE} --project ${REPO} ${GERRIT_PATCHSET_REVISION}
            &apos;&apos;&apos;
            } 
            if (env.TOPIC || env.GERRIT_CHANGE_NUMBERS) {
                ci_get_gerrit_revisions_list()
                def files = readFile(&quot;${WORKSPACE}/GerritRevisionsList.txt&quot;)
                def lines = files.readLines()
                   for (PATCHSET_ITEM in lines) {
                        env.PATCHSET_REV=PATCHSET_ITEM
                        if (env.PATCHSET_REV != null &amp;&amp; !env.PATCHSET_REV.isEmpty()) {
                           sh &apos;&apos;&apos;
                            echo &quot;Trying to send SQ-Quality-Gate=+1 on Revision: ${PATCHSET_REV}   for this project...&quot;
                            ssh -p 29418 ${GERRIT_HOST} gerrit review --label &apos;SQ-Quality-Gate=+1&apos; --message ${SQ_MESSAGE} --project ${REPO} ${PATCHSET_REV}
                           &apos;&apos;&apos;
                        }
                   }
            }
        }
    }
}

def setQualityGateStatus() {
    manager.addWarningBadge(&quot;Pipeline aborted due to quality gate failure, see build summary for more information.&quot;)
    manager.createSummary(&quot;warning.gif&quot;).appendText(&quot;&lt;h3&gt;Pipeline aborted due to quality gate failure:&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Please check the &lt;a href=\&quot;${env.DASHBOARD_URL}\&quot;&gt;SonarQube Report&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Please verify your POMs are configured according to: &lt;a href=\&quot;https://confluence-oss.seli.wh.rnd.internal.ericsson.com/pages/viewpage.action?pageId=309793813#SonarQube%22Howto%22forCI/CDPipeline-ConfiguringMaven/JaCoCoforJavaCodeCoverage\&quot;&gt;SonarQube &apos;How to&apos; for CI/CD Pipeline&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&quot;, false)
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>true</disabled>
</flow-definition>