<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Use the following job to update the Sprint Version of a SINGLE project&lt;br&gt;   &#xd;
Build it with parameter REPO = The Gerrit repo for which you want to update the Sprint Version ( i.e. OSS/com.ericsson.oss.test/test-repo )&lt;br&gt;&#xd;
&lt;br&gt;&#xd;
&lt;font color=&quot;red&quot;&gt;WARNING: You must be code-reviewer ( please, check you have explicit +2 permissions) for this repo !&lt;/font&gt;&lt;br&gt;&#xd;
         You have to set only ONE repo name&lt;br&gt;&#xd;
The allowed format of the REPO name must be one of the following:  OSS/GroupId/ArtifactId   or  LITP/ArtifactId &lt;br&gt; </description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@75.0.1">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.23.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty plugin="eiffel-core@75.0.1">
      <sequentialLinkingEnabled>false</sequentialLinkingEnabled>
    </com.ericsson.duraci.messaging.SequentialSemanticEiffelMessageLinkingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelConfigurationNotificationMessagingJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@75.0.1">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty plugin="leastload@1.0.3">
      <leastLoadDisabled>false</leastLoadDisabled>
    </org.bstick12.jenkinsci.plugins.leastload.LeastLoadDisabledProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPO</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
      <configVersion>1</configVersion>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <com.ericsson.duraci.messaging.UserDomainSuffixJobProperty plugin="eiffel-core@75.0.1">
      <enabled>false</enabled>
      <userDomainSuffix></userDomainSuffix>
    </com.ericsson.duraci.messaging.UserDomainSuffixJobProperty>
    <de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty plugin="jenkinswalldisplay@0.6.30"/>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@4.2.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>gcm</name>
        <url>ssh://staging-gerritmirror.sero.gic.ericsson.se:29418/OSS/com.ericsson.oss.de/ci-flow-infra</url>
      </hudson.plugins.git.UserRemoteConfig>
      <hudson.plugins.git.UserRemoteConfig>
        <name>gcn</name>
        <url>${GERRIT_CENTRAL}/${REPO}</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <gitTool>Default</gitTool>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.PerBuildTag/>
      <hudson.plugins.git.extensions.impl.UserIdentity>
        <name>ENM_Jenkins</name>
      </hudson.plugins.git.extensions.impl.UserIdentity>
    </extensions>
  </scm>
  <assignedNode>ENM-SLAVE-GE-7_2</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>JDK 1.8.0_172</jdk>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern></pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern></pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
          <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <dynamicGerritProjects class="empty-list"/>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
      <dependencyJobsNames></dependencyJobsNames>
      <commitMessageParameterMode>BASE64</commitMessageParameterMode>
      <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
      <commentTextParameterMode>BASE64</commentTextParameterMode>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>GERRIT_MIRROR_UAT</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>false</excludeDrafts>
          <excludeTrivialRebase>false</excludeTrivialRebase>
          <excludeNoCodeChange>false</excludeNoCodeChange>
          <excludePrivateState>false</excludePrivateState>
          <excludeWipState>false</excludeWipState>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginDraftPublishedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.plugins.python.Python plugin="python@1.3">
      <command>#!/usr/bin/python

from xml.dom import minidom
import subprocess
import urllib2
import xml
import sys
import os

sys.path.insert(0, &apos;/proj/ciexadm200/tools/utils/scripts/Monitoring_tools/Various_methods&apos;)
from getRestApi import getRestApiXML
from getXMLvalues import getValueFromTag

# Import environment variables
DOMAIN_ID = os.environ[&apos;DOMAIN_ID&apos;]
FEM = DOMAIN_ID.split(&apos;.&apos;)[2]
userSignum = open(&apos;userSignum.txt&apos;, &apos;w&apos;)

def main():
    # get .xml file from REST API
    rest_command = &quot;https://&quot; + FEM + &quot;-eiffel004.eiffel.gic.ericsson.se:8443/jenkins/job/Admin_Sprint_Version_Update/lastBuild/api/xml&quot;
    getRestApiXML(FEM, rest_command, &quot;lastBuildREST.xml&quot;)
    builtOn = getValueFromTag(&quot;lastBuildREST.xml&quot;, &quot;userId&quot;)

    try:
        userSignum.write(&quot;BUILD_USER_ID=&quot; + builtOn[0].firstChild.nodeValue)
    except (AttributeError, IOError), e:
        userSignum.write(&quot;BUILD_USER_ID=&quot; + &quot;&quot;)
    
    userSignum.close()
   
main()</command>
      <configuredLocalRules/>
    </hudson.plugins.python.Python>
    <com.ericsson.de.multi.master.ReadFile plugin="multi-master@1.0.13">
      <filePath>userSignum.txt</filePath>
    </com.ericsson.de.multi.master.ReadFile>
    <com.ericsson.de.multi.master.EnvironmentBuilder plugin="multi-master@1.0.13">
      <envVars>
        <com.ericsson.de.multi.master.EnvVar>
          <name>PATH</name>
          <value>/proj/ciexadm200/tools/apache-maven-3.5.3/bin:$PATH</value>
        </com.ericsson.de.multi.master.EnvVar>
      </envVars>
    </com.ericsson.de.multi.master.EnvironmentBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash +x
mkdir info_tmp
cd info_tmp
/proj/ciexadm200/tools/git/latest/bin/git init
/proj/ciexadm200/tools/git/latest/bin/git remote add origin ssh://staging-gerritmirror.sero.gic.ericsson.se:29418/${REPO}
/proj/ciexadm200/tools/git/latest/bin/git fetch origin refs/meta/config:refs/remotes/origin/meta/config
/proj/ciexadm200/tools/git/latest/bin/git checkout meta/config
# list of guardian groups/users allowed for +2ing
grep -i &apos;label-Code-Review = -2..+2 group&apos; project.config &gt;&gt; guardians.txt
# search for guardian_groups    grep -E &apos;_Guard|_guard|-guard|-Guard&apos; guardians.txt | sed &apos;s/^.*: //&apos;
awk &apos;{print $NF}&apos; guardians.txt &gt;&gt; guard_groups.txt
# expand guardian_groups users in a file
for line in $(cat guard_groups.txt)
  do
  ssh -p 29418 staging-gerritmirror.sero.gic.ericsson.se gerrit ls-members &quot;$line&quot; | awk &apos;{print $2}&apos; | grep -v &apos;username&apos; &gt;&gt; guard_users.txt
done
# append single guardian_users to the users file
grep -ir &apos;user/&apos; guardians.txt | sed &apos;s/^.*: //&apos; | awk &apos;{print $NF}&apos; | sed &apos;s/) (/\n/;s/[()]//g&apos; &gt;&gt; guard_users.txt
mv guard_users.txt ..
cd ..
rm -Rf info_tmp
rm -Rf ale_tmp
# 
# check if the user is included in the guardian_users file
grep -Fixq &quot;$BUILD_USER_ID&quot; guard_users.txt 
if [ $? -eq 0 ]
 then
    echo &quot; USER ALLOWED TO UPDATE SPRINT VERSION &quot; 
    export currentVersion=`mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version|grep &quot;^[0-9]*\.[0-9]*\.[0-9]*&quot;`
	export cleanedVersion=`echo $currentVersion | sed -e &apos;s/[^0-9][^0-9]*$//&apos;`
	export incrementalVersion=`echo $cleanedVersion | cut -d&quot;.&quot; -f3`
	export minorVersion=`echo $cleanedVersion | cut -d&quot;.&quot; -f2`
	export majorVersion=`echo $cleanedVersion | cut -d&quot;.&quot; -f1`
	export nextminorVersion=$(($minorVersion+1))
	export newVersion=`echo $majorVersion.$nextminorVersion.1-SNAPSHOT`
	find . -name &quot;pom.xml&quot; -exec sed -i &quot;s/${currentVersion}/${newVersion}/g&quot; {} \; 2&gt;/dev/null
#
	rm -f guard_users.txt userSignum.txt lastBuildREST.xml
#
#   define git path reflecting the SCM git executable path
	/proj/ciexadm200/tools/git/latest/bin/git add --all
	if [ &quot;$(/proj/ciexadm200/tools/git/latest/bin/git status --porcelain)&quot; != &quot;&quot; ]; then
    /proj/ciexadm200/tools/git/latest/bin/git commit -m &quot;Sprint version update&quot;
	fi
    echo &quot; PROJECT SPRINT UPDATE EXECUTED &quot;
    #    
 else
   echo &quot; ========================== . ============================== &quot;
   echo &quot;                                                             &quot;
   echo &quot; YOU ARE NOT AUTHORIZED to update the project SPRINT VERSION &quot; 
   echo &quot;                                                             &quot;
   echo &quot; PLEASE, ASK ONE OF THE USERS LISTED BELOW, TO DO IT FOR YOU &quot;
   echo &quot;                                                             &quot;
   for line in $(cat guard_users.txt)
      do
         echo &quot;$line&quot;
      done
   echo &quot;                                                             &quot;
   echo &quot; =========================== . ============================= &quot;
   #curl -o jenkins-cli.jar ${JENKINS_URL}/jnlpJars/jenkins-cli.jar
   #java -jar jenkins-cli.jar set-build-result unstable  
   rm -f guard_users.txt userSignum.txt lastBuildREST.xml
   exit 1
fi
</command>
      <configuredLocalRules/>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.git.GitPublisher plugin="git@4.2.2">
      <configVersion>2</configVersion>
      <pushMerge>false</pushMerge>
      <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
      <forcePush>false</forcePush>
      <tagsToPush/>
      <branchesToPush>
        <hudson.plugins.git.GitPublisher_-BranchToPush>
          <targetRepoName>gcn</targetRepoName>
          <branchName>master</branchName>
          <rebaseBeforePush>false</rebaseBeforePush>
        </hudson.plugins.git.GitPublisher_-BranchToPush>
      </branchesToPush>
      <notesToPush/>
    </hudson.plugins.git.GitPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.37">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
      <disableDeferredWipeout>false</disableDeferredWipeout>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.19">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>30</timeoutMinutes>
      </strategy>
      <operationList/>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.6.9">
      <template>#${BUILD_NUMBER} - ${ENV,var=&quot;REPO&quot;} by ${ENV, var=&quot;BUILD_USER_ID&quot;}</template>
      <runAtStart>true</runAtStart>
      <runAtEnd>true</runAtEnd>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>