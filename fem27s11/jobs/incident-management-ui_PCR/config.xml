<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>&lt;b&gt;&lt;font color="red"&gt;CLICK "RETRIGGER" ON THE PATCH YOU WANT TO BUILD, OTHERWISE CLICK "BUILD NOW" TO BUILD THE LAST.&lt;/font&gt;&lt;/b&gt;&lt;br&gt;&lt;a href="https://confluence-nam.lmera.ericsson.se/display/CIE/Retriggering+a+parameterised%28preCodeReview%29+Jenkins+job"&gt;How to "RETRIGGER" a job&lt;/a&gt;&lt;br&gt;This job is triggered by a "git push origin HEAD:refs/for/master".&lt;br&gt;It will build the artifact. If the build is successful the code is sent for code review.&lt;br&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.0"/>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>true</useBuildBlocker>
      <blockLevel>NODE</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs>incident-management-ui_Release</blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty plugin="eiffel-core@74.0.3">
      <scriptEnabled>false</scriptEnabled>
    </com.ericsson.duraci.messaging.ImplicitMessagingContributorProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>20</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.24.1">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty plugin="eiffel-core@74.0.3">
      <messagingEnabled>false</messagingEnabled>
      <jobFinishedDisabled>false</jobFinishedDisabled>
    </com.ericsson.duraci.messaging.ImplicitEiffelMessagingJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.8.5">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <EnvInjectJobProperty plugin="envinject@2.1.5">
      <info>
        <propertiesContent>REPO=OSS/com.ericsson.oss.presentation.client.incidentmgt/incident-management-ui
ADMIN_CONTROL=true
SKIP_SONAR=false
SKIP_SONAR_GLOBAL=
PUBLISH_SITE=false
BRANCH=master
TEAM_NAME=
GERRIT_REFSPEC=refs/heads/master
SLAVE_LABEL=GridEngine_RHEL6.10
JDK_HOME=JDK 1.8.0_291
JDK_SONAR=jdk-11.0.10
MVN_HOME=Maven 3.5.3
MVN_PCR=-V -U jacoco:prepare-agent install jacoco:report pmd:pmd
MVN_PCR_INT=-V -Dts -P jboss_managed_local install -U
MVN_DOCKER_INT=clean install -Pdocker
MVN_Release=-V -Dresume=false release:prepare release:perform -DpreparationGoals="install -U" -Dgoals="clean deploy pmd:pmd jacoco:report -U" -DlocalCheckout=true
MVN_SONAR=sonar:sonar -Dsonar.login=${SONAR_AUTH_UAT2} -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.branch.name=${SONAR_BRANCH} -Dsonar.branch.target=master
VERSANT=false
VERSANT_DB_NAME=dps_integration
VERSANT_DB_VERSION=1.0.33
SQ_SERVER=sonarqube enterprise 89-2
TESTWARE_REPO=
IT_FOLDER=/incident-management-ui-testsuite
MVN_VERIFY_BASE_OPTIONS=-V -U  clean install integration-test -Pdocker -Dtest.skip=false
MVN_VERIFY_BASE_OPTIONS=
SOURCES_DIR=.
JAVA_MONITORED_SERVICES=.*jboss.*
IT_REPORT_TYPE=surefire
COMPOSE_FILE=incident-management-ui-testsuite/docker-compose.yml
TESTRUNNER_JAVA_VERSION=jdk8_tmp
SNAPSHOT_CODE_RPMS_CONTAINER=im_jboss
COMPOSE_HTTP_TIMEOUT=500
IGNORE_RPMS=
DEFAULT_TEAM=
AUTO_DELIVER=false
CREATE_DELIVERY_GROUP=false
PRE_TEST_SCRIPT=pre_test.sh
POST_TEST_SCRIPT=post_test.sh
DOCKER_COMPOSE_OPTIONS=-f docker-compose.yml -f docker-compose.netsim.yml
CI_SCRIPTS_VERSION=1.0.1057
ARQUILLIAN_CUCUMBER_OPTIONS=
INTEGRATION_TESTS=
ADDITIONAL_SYSTSEM_PROPERTIES=
TOPIC=
deployPackage=
ARTIFACTS_WILDCARDS=**/*.log,**/*.ear,**/*.rpm</propertiesContent>
        <secureGroovyScript plugin="script-security@1.78">
          <script/>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
    
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.30.5">
          <spec/>
          <gerritProjects>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
              <compareType>PLAIN</compareType>
              <pattern>OSS/com.ericsson.oss.presentation.client.incidentmgt/incident-management-ui</pattern>
              <branches>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>PLAIN</compareType>
                  <pattern>master</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
                  <compareType>REG_EXP</compareType>
                  <pattern>dPipelineBranch.*</pattern>
                </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              </branches>
              <disableStrictForbiddenFileVerification>false</disableStrictForbiddenFileVerification>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          </gerritProjects>
          <dynamicGerritProjects class="empty-list"/>
          <skipVote>
            <onSuccessful>false</onSuccessful>
            <onFailed>false</onFailed>
            <onUnstable>false</onUnstable>
            <onNotBuilt>false</onNotBuilt>
          </skipVote>
          <silentMode>true</silentMode>
          <notificationLevel/>
          <silentStartMode>false</silentStartMode>
          <escapeQuotes>true</escapeQuotes>
          <nameAndEmailParameterMode>PLAIN</nameAndEmailParameterMode>
          <dependencyJobsNames/>
          <commitMessageParameterMode>BASE64</commitMessageParameterMode>
          <changeSubjectParameterMode>PLAIN</changeSubjectParameterMode>
          <commentTextParameterMode>BASE64</commentTextParameterMode>
          <buildStartMessage/>
          <buildFailureMessage/>
          <buildSuccessfulMessage/>
          <buildUnstableMessage/>
          <buildNotBuiltMessage/>
          <buildUnsuccessfulFilepath/>
          <customUrl/>
          <serverName>__ANY__</serverName>
          <triggerOnEvents>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
              <excludeDrafts>false</excludeDrafts>
              <excludeTrivialRebase>false</excludeTrivialRebase>
              <excludeNoCodeChange>false</excludeNoCodeChange>
              <excludePrivateState>false</excludePrivateState>
              <excludeWipState>false</excludeWipState>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          </triggerOnEvents>
          <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
          <triggerConfigURL/>
          <triggerInformationAction/>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>@Library('ci-pipeline-lib') _
pipeline {
    agent { label env.SLAVE_LABEL }
    options {
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    stages {
        stage('Pre-step') {
            steps {
                ci_pcr_pre()
            }
        }
        stage('Clone') {
            steps {
                 ci_pcr_clone()
            }
        }
        stage('Manage-commits') {
            steps {
                ci_manage_commits()
            }
        }
        stage('Init') {
            steps {
                ci_pcr_init()
                echo "COMPOSE_FILE is: --&gt; " +COMPOSE_FILE
            }
        }
        stage('Unit') {
            steps {
                ci_pcr_unit()
            }
        }
    stage('Build Containers') {
        steps {
              ci_build_containers()
        }
    }
    stage('Start Containers') {
        steps {
              ci_start_containers()
              ci_containers_healthcheck()
        }
    }
    stage('Deploy') {
        steps {
              ci_pcr_deploy_artifact()
        }
    }
        stage('Integration') {
            steps {
                ci_pcr_integration_no_docker()
            }
        }
        stage('Sonar') {
            when {
                environment name: 'SKIP_SONAR_GLOBAL', value: 'false'
            }
            steps {
                ci_pcr_sonar_analysis_test()
            }
        }
        stage('Quality Gate') {
            when {
                environment name: 'SKIP_SONAR_GLOBAL', value: 'false'
            }
            steps {
                ci_pcr_get_qualitygate()
            }
        }
    }
    post {
        always {
            ci_docker_cleanup()
            ci_pcr_post()
            ci_reports()
        }
    }
}
def ci_pcr_sonar_analysis_test() {
    withSonarQubeEnv(env.SQ_SERVER) {
        withMaven(jdk: env.JDK_SONAR, maven: env.MVN_HOME, options: [artifactsPublisher(disabled: true)]) {	
          if ( env.INSPECT_REVIEW == 'true' &amp;&amp;  env.PROJECT_NAME == env.IT_PROJECT_NAME ) {
                 sh "cd ${PROJECT_NAME}; mvn ${env.MVN_SONAR}"
          }
          else {
              sh "mvn ${env.MVN_SONAR}"
          }
        }
    }	
}</script>
    <sandbox>true</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>